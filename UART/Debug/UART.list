
UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000032c8  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  08003468  08003468  00004468  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080034c4  080034c4  00005090  2**0
                  CONTENTS
  4 .ARM          00000008  080034c4  080034c4  000044c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080034cc  080034cc  00005090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080034cc  080034cc  000044cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080034d0  080034d0  000044d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000090  20000000  080034d4  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001cc  20000090  08003564  00005090  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000025c  08003564  0000525c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00005090  2**0
                  CONTENTS, READONLY
 12 .debug_info   000082f6  00000000  00000000  000050c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001708  00000000  00000000  0000d3b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006d8  00000000  00000000  0000eac0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000537  00000000  00000000  0000f198  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001583a  00000000  00000000  0000f6cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008eea  00000000  00000000  00024f09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00085cef  00000000  00000000  0002ddf3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b3ae2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002014  00000000  00000000  000b3b28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  000b5b3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000090 	.word	0x20000090
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08003450 	.word	0x08003450

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000094 	.word	0x20000094
 80001dc:	08003450 	.word	0x08003450

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000574:	f000 faa6 	bl	8000ac4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000578:	f000 f846 	bl	8000608 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800057c:	f000 f8d8 	bl	8000730 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000580:	f000 f8ac 	bl	80006dc <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Transmit_IT(&huart2, (const uint8_t*)tx_buff, sizeof(tx_buff));
 8000584:	2231      	movs	r2, #49	@ 0x31
 8000586:	4916      	ldr	r1, [pc, #88]	@ (80005e0 <main+0x70>)
 8000588:	4816      	ldr	r0, [pc, #88]	@ (80005e4 <main+0x74>)
 800058a:	f001 fb51 	bl	8001c30 <HAL_UART_Transmit_IT>
  HAL_UART_Receive_IT(&huart2, rx_buff, 7);
 800058e:	2207      	movs	r2, #7
 8000590:	4915      	ldr	r1, [pc, #84]	@ (80005e8 <main+0x78>)
 8000592:	4814      	ldr	r0, [pc, #80]	@ (80005e4 <main+0x74>)
 8000594:	f001 fb82 	bl	8001c9c <HAL_UART_Receive_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (toggle != last){
 8000598:	4b14      	ldr	r3, [pc, #80]	@ (80005ec <main+0x7c>)
 800059a:	781b      	ldrb	r3, [r3, #0]
 800059c:	b2da      	uxtb	r2, r3
 800059e:	4b14      	ldr	r3, [pc, #80]	@ (80005f0 <main+0x80>)
 80005a0:	781b      	ldrb	r3, [r3, #0]
 80005a2:	429a      	cmp	r2, r3
 80005a4:	d008      	beq.n	80005b8 <main+0x48>
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80005a6:	2120      	movs	r1, #32
 80005a8:	4812      	ldr	r0, [pc, #72]	@ (80005f4 <main+0x84>)
 80005aa:	f000 fe3e 	bl	800122a <HAL_GPIO_TogglePin>
		last = toggle;
 80005ae:	4b0f      	ldr	r3, [pc, #60]	@ (80005ec <main+0x7c>)
 80005b0:	781b      	ldrb	r3, [r3, #0]
 80005b2:	b2da      	uxtb	r2, r3
 80005b4:	4b0e      	ldr	r3, [pc, #56]	@ (80005f0 <main+0x80>)
 80005b6:	701a      	strb	r2, [r3, #0]
	  }
	  if (ok)
 80005b8:	4b0f      	ldr	r3, [pc, #60]	@ (80005f8 <main+0x88>)
 80005ba:	781b      	ldrb	r3, [r3, #0]
 80005bc:	b2db      	uxtb	r3, r3
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d0ea      	beq.n	8000598 <main+0x28>
	  {
		  sprintf(msg, "%s\n", "ok");
 80005c2:	4a0e      	ldr	r2, [pc, #56]	@ (80005fc <main+0x8c>)
 80005c4:	490e      	ldr	r1, [pc, #56]	@ (8000600 <main+0x90>)
 80005c6:	480f      	ldr	r0, [pc, #60]	@ (8000604 <main+0x94>)
 80005c8:	f002 fa8c 	bl	8002ae4 <siprintf>
		  HAL_UART_Transmit_IT(&huart2, (const uint8_t*)msg, 10);
 80005cc:	220a      	movs	r2, #10
 80005ce:	490d      	ldr	r1, [pc, #52]	@ (8000604 <main+0x94>)
 80005d0:	4804      	ldr	r0, [pc, #16]	@ (80005e4 <main+0x74>)
 80005d2:	f001 fb2d 	bl	8001c30 <HAL_UART_Transmit_IT>
		  ok = false;
 80005d6:	4b08      	ldr	r3, [pc, #32]	@ (80005f8 <main+0x88>)
 80005d8:	2200      	movs	r2, #0
 80005da:	701a      	strb	r2, [r3, #0]
	  if (toggle != last){
 80005dc:	e7dc      	b.n	8000598 <main+0x28>
 80005de:	bf00      	nop
 80005e0:	20000000 	.word	0x20000000
 80005e4:	200000ac 	.word	0x200000ac
 80005e8:	20000100 	.word	0x20000100
 80005ec:	20000108 	.word	0x20000108
 80005f0:	20000109 	.word	0x20000109
 80005f4:	40020000 	.word	0x40020000
 80005f8:	20000107 	.word	0x20000107
 80005fc:	08003468 	.word	0x08003468
 8000600:	0800346c 	.word	0x0800346c
 8000604:	200000f4 	.word	0x200000f4

08000608 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b094      	sub	sp, #80	@ 0x50
 800060c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800060e:	f107 0320 	add.w	r3, r7, #32
 8000612:	2230      	movs	r2, #48	@ 0x30
 8000614:	2100      	movs	r1, #0
 8000616:	4618      	mov	r0, r3
 8000618:	f002 fa84 	bl	8002b24 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800061c:	f107 030c 	add.w	r3, r7, #12
 8000620:	2200      	movs	r2, #0
 8000622:	601a      	str	r2, [r3, #0]
 8000624:	605a      	str	r2, [r3, #4]
 8000626:	609a      	str	r2, [r3, #8]
 8000628:	60da      	str	r2, [r3, #12]
 800062a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800062c:	2300      	movs	r3, #0
 800062e:	60bb      	str	r3, [r7, #8]
 8000630:	4b28      	ldr	r3, [pc, #160]	@ (80006d4 <SystemClock_Config+0xcc>)
 8000632:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000634:	4a27      	ldr	r2, [pc, #156]	@ (80006d4 <SystemClock_Config+0xcc>)
 8000636:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800063a:	6413      	str	r3, [r2, #64]	@ 0x40
 800063c:	4b25      	ldr	r3, [pc, #148]	@ (80006d4 <SystemClock_Config+0xcc>)
 800063e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000640:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000644:	60bb      	str	r3, [r7, #8]
 8000646:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000648:	2300      	movs	r3, #0
 800064a:	607b      	str	r3, [r7, #4]
 800064c:	4b22      	ldr	r3, [pc, #136]	@ (80006d8 <SystemClock_Config+0xd0>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	4a21      	ldr	r2, [pc, #132]	@ (80006d8 <SystemClock_Config+0xd0>)
 8000652:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000656:	6013      	str	r3, [r2, #0]
 8000658:	4b1f      	ldr	r3, [pc, #124]	@ (80006d8 <SystemClock_Config+0xd0>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000660:	607b      	str	r3, [r7, #4]
 8000662:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000664:	2302      	movs	r3, #2
 8000666:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000668:	2301      	movs	r3, #1
 800066a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800066c:	2310      	movs	r3, #16
 800066e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000670:	2302      	movs	r3, #2
 8000672:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000674:	2300      	movs	r3, #0
 8000676:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000678:	2310      	movs	r3, #16
 800067a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800067c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000680:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000682:	2304      	movs	r3, #4
 8000684:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000686:	2304      	movs	r3, #4
 8000688:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800068a:	f107 0320 	add.w	r3, r7, #32
 800068e:	4618      	mov	r0, r3
 8000690:	f000 fde6 	bl	8001260 <HAL_RCC_OscConfig>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	d001      	beq.n	800069e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800069a:	f000 f8e9 	bl	8000870 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800069e:	230f      	movs	r3, #15
 80006a0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006a2:	2302      	movs	r3, #2
 80006a4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006a6:	2300      	movs	r3, #0
 80006a8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006aa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006ae:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006b0:	2300      	movs	r3, #0
 80006b2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006b4:	f107 030c 	add.w	r3, r7, #12
 80006b8:	2102      	movs	r1, #2
 80006ba:	4618      	mov	r0, r3
 80006bc:	f001 f848 	bl	8001750 <HAL_RCC_ClockConfig>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d001      	beq.n	80006ca <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006c6:	f000 f8d3 	bl	8000870 <Error_Handler>
  }
}
 80006ca:	bf00      	nop
 80006cc:	3750      	adds	r7, #80	@ 0x50
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	40023800 	.word	0x40023800
 80006d8:	40007000 	.word	0x40007000

080006dc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006e0:	4b11      	ldr	r3, [pc, #68]	@ (8000728 <MX_USART2_UART_Init+0x4c>)
 80006e2:	4a12      	ldr	r2, [pc, #72]	@ (800072c <MX_USART2_UART_Init+0x50>)
 80006e4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006e6:	4b10      	ldr	r3, [pc, #64]	@ (8000728 <MX_USART2_UART_Init+0x4c>)
 80006e8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80006ec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006ee:	4b0e      	ldr	r3, [pc, #56]	@ (8000728 <MX_USART2_UART_Init+0x4c>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006f4:	4b0c      	ldr	r3, [pc, #48]	@ (8000728 <MX_USART2_UART_Init+0x4c>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006fa:	4b0b      	ldr	r3, [pc, #44]	@ (8000728 <MX_USART2_UART_Init+0x4c>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000700:	4b09      	ldr	r3, [pc, #36]	@ (8000728 <MX_USART2_UART_Init+0x4c>)
 8000702:	220c      	movs	r2, #12
 8000704:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000706:	4b08      	ldr	r3, [pc, #32]	@ (8000728 <MX_USART2_UART_Init+0x4c>)
 8000708:	2200      	movs	r2, #0
 800070a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800070c:	4b06      	ldr	r3, [pc, #24]	@ (8000728 <MX_USART2_UART_Init+0x4c>)
 800070e:	2200      	movs	r2, #0
 8000710:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000712:	4805      	ldr	r0, [pc, #20]	@ (8000728 <MX_USART2_UART_Init+0x4c>)
 8000714:	f001 fa3c 	bl	8001b90 <HAL_UART_Init>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d001      	beq.n	8000722 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800071e:	f000 f8a7 	bl	8000870 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000722:	bf00      	nop
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	200000ac 	.word	0x200000ac
 800072c:	40004400 	.word	0x40004400

08000730 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b08a      	sub	sp, #40	@ 0x28
 8000734:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000736:	f107 0314 	add.w	r3, r7, #20
 800073a:	2200      	movs	r2, #0
 800073c:	601a      	str	r2, [r3, #0]
 800073e:	605a      	str	r2, [r3, #4]
 8000740:	609a      	str	r2, [r3, #8]
 8000742:	60da      	str	r2, [r3, #12]
 8000744:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000746:	2300      	movs	r3, #0
 8000748:	613b      	str	r3, [r7, #16]
 800074a:	4b2d      	ldr	r3, [pc, #180]	@ (8000800 <MX_GPIO_Init+0xd0>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800074e:	4a2c      	ldr	r2, [pc, #176]	@ (8000800 <MX_GPIO_Init+0xd0>)
 8000750:	f043 0304 	orr.w	r3, r3, #4
 8000754:	6313      	str	r3, [r2, #48]	@ 0x30
 8000756:	4b2a      	ldr	r3, [pc, #168]	@ (8000800 <MX_GPIO_Init+0xd0>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800075a:	f003 0304 	and.w	r3, r3, #4
 800075e:	613b      	str	r3, [r7, #16]
 8000760:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000762:	2300      	movs	r3, #0
 8000764:	60fb      	str	r3, [r7, #12]
 8000766:	4b26      	ldr	r3, [pc, #152]	@ (8000800 <MX_GPIO_Init+0xd0>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800076a:	4a25      	ldr	r2, [pc, #148]	@ (8000800 <MX_GPIO_Init+0xd0>)
 800076c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000770:	6313      	str	r3, [r2, #48]	@ 0x30
 8000772:	4b23      	ldr	r3, [pc, #140]	@ (8000800 <MX_GPIO_Init+0xd0>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000776:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800077a:	60fb      	str	r3, [r7, #12]
 800077c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800077e:	2300      	movs	r3, #0
 8000780:	60bb      	str	r3, [r7, #8]
 8000782:	4b1f      	ldr	r3, [pc, #124]	@ (8000800 <MX_GPIO_Init+0xd0>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000786:	4a1e      	ldr	r2, [pc, #120]	@ (8000800 <MX_GPIO_Init+0xd0>)
 8000788:	f043 0301 	orr.w	r3, r3, #1
 800078c:	6313      	str	r3, [r2, #48]	@ 0x30
 800078e:	4b1c      	ldr	r3, [pc, #112]	@ (8000800 <MX_GPIO_Init+0xd0>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000792:	f003 0301 	and.w	r3, r3, #1
 8000796:	60bb      	str	r3, [r7, #8]
 8000798:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800079a:	2300      	movs	r3, #0
 800079c:	607b      	str	r3, [r7, #4]
 800079e:	4b18      	ldr	r3, [pc, #96]	@ (8000800 <MX_GPIO_Init+0xd0>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007a2:	4a17      	ldr	r2, [pc, #92]	@ (8000800 <MX_GPIO_Init+0xd0>)
 80007a4:	f043 0302 	orr.w	r3, r3, #2
 80007a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80007aa:	4b15      	ldr	r3, [pc, #84]	@ (8000800 <MX_GPIO_Init+0xd0>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ae:	f003 0302 	and.w	r3, r3, #2
 80007b2:	607b      	str	r3, [r7, #4]
 80007b4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80007b6:	2200      	movs	r2, #0
 80007b8:	2120      	movs	r1, #32
 80007ba:	4812      	ldr	r0, [pc, #72]	@ (8000804 <MX_GPIO_Init+0xd4>)
 80007bc:	f000 fd1c 	bl	80011f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007c0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80007c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007c6:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80007ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007cc:	2300      	movs	r3, #0
 80007ce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007d0:	f107 0314 	add.w	r3, r7, #20
 80007d4:	4619      	mov	r1, r3
 80007d6:	480c      	ldr	r0, [pc, #48]	@ (8000808 <MX_GPIO_Init+0xd8>)
 80007d8:	f000 fb8a 	bl	8000ef0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80007dc:	2320      	movs	r3, #32
 80007de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007e0:	2301      	movs	r3, #1
 80007e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e4:	2300      	movs	r3, #0
 80007e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e8:	2300      	movs	r3, #0
 80007ea:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80007ec:	f107 0314 	add.w	r3, r7, #20
 80007f0:	4619      	mov	r1, r3
 80007f2:	4804      	ldr	r0, [pc, #16]	@ (8000804 <MX_GPIO_Init+0xd4>)
 80007f4:	f000 fb7c 	bl	8000ef0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007f8:	bf00      	nop
 80007fa:	3728      	adds	r7, #40	@ 0x28
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd80      	pop	{r7, pc}
 8000800:	40023800 	.word	0x40023800
 8000804:	40020000 	.word	0x40020000
 8000808:	40020800 	.word	0x40020800

0800080c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b082      	sub	sp, #8
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
  if (strstr((char*)rx_buff, "toggle") != NULL)
 8000814:	4911      	ldr	r1, [pc, #68]	@ (800085c <HAL_UART_RxCpltCallback+0x50>)
 8000816:	4812      	ldr	r0, [pc, #72]	@ (8000860 <HAL_UART_RxCpltCallback+0x54>)
 8000818:	f002 f98c 	bl	8002b34 <strstr>
 800081c:	4603      	mov	r3, r0
 800081e:	2b00      	cmp	r3, #0
 8000820:	d00f      	beq.n	8000842 <HAL_UART_RxCpltCallback+0x36>
  {
	  toggle = !toggle;
 8000822:	4b10      	ldr	r3, [pc, #64]	@ (8000864 <HAL_UART_RxCpltCallback+0x58>)
 8000824:	781b      	ldrb	r3, [r3, #0]
 8000826:	b2db      	uxtb	r3, r3
 8000828:	2b00      	cmp	r3, #0
 800082a:	bf14      	ite	ne
 800082c:	2301      	movne	r3, #1
 800082e:	2300      	moveq	r3, #0
 8000830:	b2db      	uxtb	r3, r3
 8000832:	f083 0301 	eor.w	r3, r3, #1
 8000836:	b2db      	uxtb	r3, r3
 8000838:	f003 0301 	and.w	r3, r3, #1
 800083c:	b2da      	uxtb	r2, r3
 800083e:	4b09      	ldr	r3, [pc, #36]	@ (8000864 <HAL_UART_RxCpltCallback+0x58>)
 8000840:	701a      	strb	r2, [r3, #0]
  }
  ok = true;
 8000842:	4b09      	ldr	r3, [pc, #36]	@ (8000868 <HAL_UART_RxCpltCallback+0x5c>)
 8000844:	2201      	movs	r2, #1
 8000846:	701a      	strb	r2, [r3, #0]
  HAL_UART_Receive_IT(&huart2, rx_buff, 7);
 8000848:	2207      	movs	r2, #7
 800084a:	4905      	ldr	r1, [pc, #20]	@ (8000860 <HAL_UART_RxCpltCallback+0x54>)
 800084c:	4807      	ldr	r0, [pc, #28]	@ (800086c <HAL_UART_RxCpltCallback+0x60>)
 800084e:	f001 fa25 	bl	8001c9c <HAL_UART_Receive_IT>
}
 8000852:	bf00      	nop
 8000854:	3708      	adds	r7, #8
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	08003470 	.word	0x08003470
 8000860:	20000100 	.word	0x20000100
 8000864:	20000108 	.word	0x20000108
 8000868:	20000107 	.word	0x20000107
 800086c:	200000ac 	.word	0x200000ac

08000870 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000870:	b480      	push	{r7}
 8000872:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000874:	b672      	cpsid	i
}
 8000876:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000878:	bf00      	nop
 800087a:	e7fd      	b.n	8000878 <Error_Handler+0x8>

0800087c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b082      	sub	sp, #8
 8000880:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000882:	2300      	movs	r3, #0
 8000884:	607b      	str	r3, [r7, #4]
 8000886:	4b10      	ldr	r3, [pc, #64]	@ (80008c8 <HAL_MspInit+0x4c>)
 8000888:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800088a:	4a0f      	ldr	r2, [pc, #60]	@ (80008c8 <HAL_MspInit+0x4c>)
 800088c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000890:	6453      	str	r3, [r2, #68]	@ 0x44
 8000892:	4b0d      	ldr	r3, [pc, #52]	@ (80008c8 <HAL_MspInit+0x4c>)
 8000894:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000896:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800089a:	607b      	str	r3, [r7, #4]
 800089c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800089e:	2300      	movs	r3, #0
 80008a0:	603b      	str	r3, [r7, #0]
 80008a2:	4b09      	ldr	r3, [pc, #36]	@ (80008c8 <HAL_MspInit+0x4c>)
 80008a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008a6:	4a08      	ldr	r2, [pc, #32]	@ (80008c8 <HAL_MspInit+0x4c>)
 80008a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80008ae:	4b06      	ldr	r3, [pc, #24]	@ (80008c8 <HAL_MspInit+0x4c>)
 80008b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008b6:	603b      	str	r3, [r7, #0]
 80008b8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80008ba:	2007      	movs	r0, #7
 80008bc:	f000 fa44 	bl	8000d48 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008c0:	bf00      	nop
 80008c2:	3708      	adds	r7, #8
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	40023800 	.word	0x40023800

080008cc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b08a      	sub	sp, #40	@ 0x28
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008d4:	f107 0314 	add.w	r3, r7, #20
 80008d8:	2200      	movs	r2, #0
 80008da:	601a      	str	r2, [r3, #0]
 80008dc:	605a      	str	r2, [r3, #4]
 80008de:	609a      	str	r2, [r3, #8]
 80008e0:	60da      	str	r2, [r3, #12]
 80008e2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	4a1d      	ldr	r2, [pc, #116]	@ (8000960 <HAL_UART_MspInit+0x94>)
 80008ea:	4293      	cmp	r3, r2
 80008ec:	d133      	bne.n	8000956 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80008ee:	2300      	movs	r3, #0
 80008f0:	613b      	str	r3, [r7, #16]
 80008f2:	4b1c      	ldr	r3, [pc, #112]	@ (8000964 <HAL_UART_MspInit+0x98>)
 80008f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008f6:	4a1b      	ldr	r2, [pc, #108]	@ (8000964 <HAL_UART_MspInit+0x98>)
 80008f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80008fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80008fe:	4b19      	ldr	r3, [pc, #100]	@ (8000964 <HAL_UART_MspInit+0x98>)
 8000900:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000902:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000906:	613b      	str	r3, [r7, #16]
 8000908:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800090a:	2300      	movs	r3, #0
 800090c:	60fb      	str	r3, [r7, #12]
 800090e:	4b15      	ldr	r3, [pc, #84]	@ (8000964 <HAL_UART_MspInit+0x98>)
 8000910:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000912:	4a14      	ldr	r2, [pc, #80]	@ (8000964 <HAL_UART_MspInit+0x98>)
 8000914:	f043 0301 	orr.w	r3, r3, #1
 8000918:	6313      	str	r3, [r2, #48]	@ 0x30
 800091a:	4b12      	ldr	r3, [pc, #72]	@ (8000964 <HAL_UART_MspInit+0x98>)
 800091c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800091e:	f003 0301 	and.w	r3, r3, #1
 8000922:	60fb      	str	r3, [r7, #12]
 8000924:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000926:	230c      	movs	r3, #12
 8000928:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800092a:	2302      	movs	r3, #2
 800092c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092e:	2300      	movs	r3, #0
 8000930:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000932:	2303      	movs	r3, #3
 8000934:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000936:	2307      	movs	r3, #7
 8000938:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800093a:	f107 0314 	add.w	r3, r7, #20
 800093e:	4619      	mov	r1, r3
 8000940:	4809      	ldr	r0, [pc, #36]	@ (8000968 <HAL_UART_MspInit+0x9c>)
 8000942:	f000 fad5 	bl	8000ef0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000946:	2200      	movs	r2, #0
 8000948:	2100      	movs	r1, #0
 800094a:	2026      	movs	r0, #38	@ 0x26
 800094c:	f000 fa07 	bl	8000d5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000950:	2026      	movs	r0, #38	@ 0x26
 8000952:	f000 fa20 	bl	8000d96 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000956:	bf00      	nop
 8000958:	3728      	adds	r7, #40	@ 0x28
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	40004400 	.word	0x40004400
 8000964:	40023800 	.word	0x40023800
 8000968:	40020000 	.word	0x40020000

0800096c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000970:	bf00      	nop
 8000972:	e7fd      	b.n	8000970 <NMI_Handler+0x4>

08000974 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000974:	b480      	push	{r7}
 8000976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000978:	bf00      	nop
 800097a:	e7fd      	b.n	8000978 <HardFault_Handler+0x4>

0800097c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000980:	bf00      	nop
 8000982:	e7fd      	b.n	8000980 <MemManage_Handler+0x4>

08000984 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000988:	bf00      	nop
 800098a:	e7fd      	b.n	8000988 <BusFault_Handler+0x4>

0800098c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000990:	bf00      	nop
 8000992:	e7fd      	b.n	8000990 <UsageFault_Handler+0x4>

08000994 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000998:	bf00      	nop
 800099a:	46bd      	mov	sp, r7
 800099c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a0:	4770      	bx	lr

080009a2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009a2:	b480      	push	{r7}
 80009a4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009a6:	bf00      	nop
 80009a8:	46bd      	mov	sp, r7
 80009aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ae:	4770      	bx	lr

080009b0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009b4:	bf00      	nop
 80009b6:	46bd      	mov	sp, r7
 80009b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009bc:	4770      	bx	lr

080009be <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009be:	b580      	push	{r7, lr}
 80009c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009c2:	f000 f8d1 	bl	8000b68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009c6:	bf00      	nop
 80009c8:	bd80      	pop	{r7, pc}
	...

080009cc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80009d0:	4802      	ldr	r0, [pc, #8]	@ (80009dc <USART2_IRQHandler+0x10>)
 80009d2:	f001 f989 	bl	8001ce8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80009d6:	bf00      	nop
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	200000ac 	.word	0x200000ac

080009e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b086      	sub	sp, #24
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80009e8:	4a14      	ldr	r2, [pc, #80]	@ (8000a3c <_sbrk+0x5c>)
 80009ea:	4b15      	ldr	r3, [pc, #84]	@ (8000a40 <_sbrk+0x60>)
 80009ec:	1ad3      	subs	r3, r2, r3
 80009ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80009f0:	697b      	ldr	r3, [r7, #20]
 80009f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80009f4:	4b13      	ldr	r3, [pc, #76]	@ (8000a44 <_sbrk+0x64>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d102      	bne.n	8000a02 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80009fc:	4b11      	ldr	r3, [pc, #68]	@ (8000a44 <_sbrk+0x64>)
 80009fe:	4a12      	ldr	r2, [pc, #72]	@ (8000a48 <_sbrk+0x68>)
 8000a00:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a02:	4b10      	ldr	r3, [pc, #64]	@ (8000a44 <_sbrk+0x64>)
 8000a04:	681a      	ldr	r2, [r3, #0]
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	4413      	add	r3, r2
 8000a0a:	693a      	ldr	r2, [r7, #16]
 8000a0c:	429a      	cmp	r2, r3
 8000a0e:	d207      	bcs.n	8000a20 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a10:	f002 f8a6 	bl	8002b60 <__errno>
 8000a14:	4603      	mov	r3, r0
 8000a16:	220c      	movs	r2, #12
 8000a18:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a1a:	f04f 33ff 	mov.w	r3, #4294967295
 8000a1e:	e009      	b.n	8000a34 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a20:	4b08      	ldr	r3, [pc, #32]	@ (8000a44 <_sbrk+0x64>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a26:	4b07      	ldr	r3, [pc, #28]	@ (8000a44 <_sbrk+0x64>)
 8000a28:	681a      	ldr	r2, [r3, #0]
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	4413      	add	r3, r2
 8000a2e:	4a05      	ldr	r2, [pc, #20]	@ (8000a44 <_sbrk+0x64>)
 8000a30:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a32:	68fb      	ldr	r3, [r7, #12]
}
 8000a34:	4618      	mov	r0, r3
 8000a36:	3718      	adds	r7, #24
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bd80      	pop	{r7, pc}
 8000a3c:	20020000 	.word	0x20020000
 8000a40:	00000400 	.word	0x00000400
 8000a44:	2000010c 	.word	0x2000010c
 8000a48:	20000260 	.word	0x20000260

08000a4c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a50:	4b06      	ldr	r3, [pc, #24]	@ (8000a6c <SystemInit+0x20>)
 8000a52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a56:	4a05      	ldr	r2, [pc, #20]	@ (8000a6c <SystemInit+0x20>)
 8000a58:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a5c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a60:	bf00      	nop
 8000a62:	46bd      	mov	sp, r7
 8000a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop
 8000a6c:	e000ed00 	.word	0xe000ed00

08000a70 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000a70:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000aa8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000a74:	f7ff ffea 	bl	8000a4c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a78:	480c      	ldr	r0, [pc, #48]	@ (8000aac <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000a7a:	490d      	ldr	r1, [pc, #52]	@ (8000ab0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000a7c:	4a0d      	ldr	r2, [pc, #52]	@ (8000ab4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000a7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a80:	e002      	b.n	8000a88 <LoopCopyDataInit>

08000a82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a86:	3304      	adds	r3, #4

08000a88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a8c:	d3f9      	bcc.n	8000a82 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a8e:	4a0a      	ldr	r2, [pc, #40]	@ (8000ab8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000a90:	4c0a      	ldr	r4, [pc, #40]	@ (8000abc <LoopFillZerobss+0x22>)
  movs r3, #0
 8000a92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a94:	e001      	b.n	8000a9a <LoopFillZerobss>

08000a96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a98:	3204      	adds	r2, #4

08000a9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a9c:	d3fb      	bcc.n	8000a96 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a9e:	f002 f865 	bl	8002b6c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000aa2:	f7ff fd65 	bl	8000570 <main>
  bx  lr    
 8000aa6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000aa8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000aac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ab0:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8000ab4:	080034d4 	.word	0x080034d4
  ldr r2, =_sbss
 8000ab8:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8000abc:	2000025c 	.word	0x2000025c

08000ac0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ac0:	e7fe      	b.n	8000ac0 <ADC_IRQHandler>
	...

08000ac4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ac8:	4b0e      	ldr	r3, [pc, #56]	@ (8000b04 <HAL_Init+0x40>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	4a0d      	ldr	r2, [pc, #52]	@ (8000b04 <HAL_Init+0x40>)
 8000ace:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000ad2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ad4:	4b0b      	ldr	r3, [pc, #44]	@ (8000b04 <HAL_Init+0x40>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	4a0a      	ldr	r2, [pc, #40]	@ (8000b04 <HAL_Init+0x40>)
 8000ada:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000ade:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ae0:	4b08      	ldr	r3, [pc, #32]	@ (8000b04 <HAL_Init+0x40>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	4a07      	ldr	r2, [pc, #28]	@ (8000b04 <HAL_Init+0x40>)
 8000ae6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000aea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000aec:	2003      	movs	r0, #3
 8000aee:	f000 f92b 	bl	8000d48 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000af2:	2000      	movs	r0, #0
 8000af4:	f000 f808 	bl	8000b08 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000af8:	f7ff fec0 	bl	800087c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000afc:	2300      	movs	r3, #0
}
 8000afe:	4618      	mov	r0, r3
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	40023c00 	.word	0x40023c00

08000b08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b082      	sub	sp, #8
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b10:	4b12      	ldr	r3, [pc, #72]	@ (8000b5c <HAL_InitTick+0x54>)
 8000b12:	681a      	ldr	r2, [r3, #0]
 8000b14:	4b12      	ldr	r3, [pc, #72]	@ (8000b60 <HAL_InitTick+0x58>)
 8000b16:	781b      	ldrb	r3, [r3, #0]
 8000b18:	4619      	mov	r1, r3
 8000b1a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b22:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b26:	4618      	mov	r0, r3
 8000b28:	f000 f943 	bl	8000db2 <HAL_SYSTICK_Config>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d001      	beq.n	8000b36 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b32:	2301      	movs	r3, #1
 8000b34:	e00e      	b.n	8000b54 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	2b0f      	cmp	r3, #15
 8000b3a:	d80a      	bhi.n	8000b52 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	6879      	ldr	r1, [r7, #4]
 8000b40:	f04f 30ff 	mov.w	r0, #4294967295
 8000b44:	f000 f90b 	bl	8000d5e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b48:	4a06      	ldr	r2, [pc, #24]	@ (8000b64 <HAL_InitTick+0x5c>)
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	e000      	b.n	8000b54 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b52:	2301      	movs	r3, #1
}
 8000b54:	4618      	mov	r0, r3
 8000b56:	3708      	adds	r7, #8
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bd80      	pop	{r7, pc}
 8000b5c:	20000034 	.word	0x20000034
 8000b60:	2000003c 	.word	0x2000003c
 8000b64:	20000038 	.word	0x20000038

08000b68 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b6c:	4b06      	ldr	r3, [pc, #24]	@ (8000b88 <HAL_IncTick+0x20>)
 8000b6e:	781b      	ldrb	r3, [r3, #0]
 8000b70:	461a      	mov	r2, r3
 8000b72:	4b06      	ldr	r3, [pc, #24]	@ (8000b8c <HAL_IncTick+0x24>)
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	4413      	add	r3, r2
 8000b78:	4a04      	ldr	r2, [pc, #16]	@ (8000b8c <HAL_IncTick+0x24>)
 8000b7a:	6013      	str	r3, [r2, #0]
}
 8000b7c:	bf00      	nop
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b84:	4770      	bx	lr
 8000b86:	bf00      	nop
 8000b88:	2000003c 	.word	0x2000003c
 8000b8c:	20000110 	.word	0x20000110

08000b90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
  return uwTick;
 8000b94:	4b03      	ldr	r3, [pc, #12]	@ (8000ba4 <HAL_GetTick+0x14>)
 8000b96:	681b      	ldr	r3, [r3, #0]
}
 8000b98:	4618      	mov	r0, r3
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba0:	4770      	bx	lr
 8000ba2:	bf00      	nop
 8000ba4:	20000110 	.word	0x20000110

08000ba8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	b085      	sub	sp, #20
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	f003 0307 	and.w	r3, r3, #7
 8000bb6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bb8:	4b0c      	ldr	r3, [pc, #48]	@ (8000bec <__NVIC_SetPriorityGrouping+0x44>)
 8000bba:	68db      	ldr	r3, [r3, #12]
 8000bbc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bbe:	68ba      	ldr	r2, [r7, #8]
 8000bc0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000bc4:	4013      	ands	r3, r2
 8000bc6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bc8:	68fb      	ldr	r3, [r7, #12]
 8000bca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bcc:	68bb      	ldr	r3, [r7, #8]
 8000bce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bd0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000bd4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000bd8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bda:	4a04      	ldr	r2, [pc, #16]	@ (8000bec <__NVIC_SetPriorityGrouping+0x44>)
 8000bdc:	68bb      	ldr	r3, [r7, #8]
 8000bde:	60d3      	str	r3, [r2, #12]
}
 8000be0:	bf00      	nop
 8000be2:	3714      	adds	r7, #20
 8000be4:	46bd      	mov	sp, r7
 8000be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bea:	4770      	bx	lr
 8000bec:	e000ed00 	.word	0xe000ed00

08000bf0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bf4:	4b04      	ldr	r3, [pc, #16]	@ (8000c08 <__NVIC_GetPriorityGrouping+0x18>)
 8000bf6:	68db      	ldr	r3, [r3, #12]
 8000bf8:	0a1b      	lsrs	r3, r3, #8
 8000bfa:	f003 0307 	and.w	r3, r3, #7
}
 8000bfe:	4618      	mov	r0, r3
 8000c00:	46bd      	mov	sp, r7
 8000c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c06:	4770      	bx	lr
 8000c08:	e000ed00 	.word	0xe000ed00

08000c0c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	b083      	sub	sp, #12
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	4603      	mov	r3, r0
 8000c14:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	db0b      	blt.n	8000c36 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c1e:	79fb      	ldrb	r3, [r7, #7]
 8000c20:	f003 021f 	and.w	r2, r3, #31
 8000c24:	4907      	ldr	r1, [pc, #28]	@ (8000c44 <__NVIC_EnableIRQ+0x38>)
 8000c26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c2a:	095b      	lsrs	r3, r3, #5
 8000c2c:	2001      	movs	r0, #1
 8000c2e:	fa00 f202 	lsl.w	r2, r0, r2
 8000c32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000c36:	bf00      	nop
 8000c38:	370c      	adds	r7, #12
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c40:	4770      	bx	lr
 8000c42:	bf00      	nop
 8000c44:	e000e100 	.word	0xe000e100

08000c48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	b083      	sub	sp, #12
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	4603      	mov	r3, r0
 8000c50:	6039      	str	r1, [r7, #0]
 8000c52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	db0a      	blt.n	8000c72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c5c:	683b      	ldr	r3, [r7, #0]
 8000c5e:	b2da      	uxtb	r2, r3
 8000c60:	490c      	ldr	r1, [pc, #48]	@ (8000c94 <__NVIC_SetPriority+0x4c>)
 8000c62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c66:	0112      	lsls	r2, r2, #4
 8000c68:	b2d2      	uxtb	r2, r2
 8000c6a:	440b      	add	r3, r1
 8000c6c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c70:	e00a      	b.n	8000c88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c72:	683b      	ldr	r3, [r7, #0]
 8000c74:	b2da      	uxtb	r2, r3
 8000c76:	4908      	ldr	r1, [pc, #32]	@ (8000c98 <__NVIC_SetPriority+0x50>)
 8000c78:	79fb      	ldrb	r3, [r7, #7]
 8000c7a:	f003 030f 	and.w	r3, r3, #15
 8000c7e:	3b04      	subs	r3, #4
 8000c80:	0112      	lsls	r2, r2, #4
 8000c82:	b2d2      	uxtb	r2, r2
 8000c84:	440b      	add	r3, r1
 8000c86:	761a      	strb	r2, [r3, #24]
}
 8000c88:	bf00      	nop
 8000c8a:	370c      	adds	r7, #12
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c92:	4770      	bx	lr
 8000c94:	e000e100 	.word	0xe000e100
 8000c98:	e000ed00 	.word	0xe000ed00

08000c9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	b089      	sub	sp, #36	@ 0x24
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	60f8      	str	r0, [r7, #12]
 8000ca4:	60b9      	str	r1, [r7, #8]
 8000ca6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	f003 0307 	and.w	r3, r3, #7
 8000cae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cb0:	69fb      	ldr	r3, [r7, #28]
 8000cb2:	f1c3 0307 	rsb	r3, r3, #7
 8000cb6:	2b04      	cmp	r3, #4
 8000cb8:	bf28      	it	cs
 8000cba:	2304      	movcs	r3, #4
 8000cbc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cbe:	69fb      	ldr	r3, [r7, #28]
 8000cc0:	3304      	adds	r3, #4
 8000cc2:	2b06      	cmp	r3, #6
 8000cc4:	d902      	bls.n	8000ccc <NVIC_EncodePriority+0x30>
 8000cc6:	69fb      	ldr	r3, [r7, #28]
 8000cc8:	3b03      	subs	r3, #3
 8000cca:	e000      	b.n	8000cce <NVIC_EncodePriority+0x32>
 8000ccc:	2300      	movs	r3, #0
 8000cce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cd0:	f04f 32ff 	mov.w	r2, #4294967295
 8000cd4:	69bb      	ldr	r3, [r7, #24]
 8000cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cda:	43da      	mvns	r2, r3
 8000cdc:	68bb      	ldr	r3, [r7, #8]
 8000cde:	401a      	ands	r2, r3
 8000ce0:	697b      	ldr	r3, [r7, #20]
 8000ce2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ce4:	f04f 31ff 	mov.w	r1, #4294967295
 8000ce8:	697b      	ldr	r3, [r7, #20]
 8000cea:	fa01 f303 	lsl.w	r3, r1, r3
 8000cee:	43d9      	mvns	r1, r3
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cf4:	4313      	orrs	r3, r2
         );
}
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	3724      	adds	r7, #36	@ 0x24
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d00:	4770      	bx	lr
	...

08000d04 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b082      	sub	sp, #8
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	3b01      	subs	r3, #1
 8000d10:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000d14:	d301      	bcc.n	8000d1a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d16:	2301      	movs	r3, #1
 8000d18:	e00f      	b.n	8000d3a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d1a:	4a0a      	ldr	r2, [pc, #40]	@ (8000d44 <SysTick_Config+0x40>)
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	3b01      	subs	r3, #1
 8000d20:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d22:	210f      	movs	r1, #15
 8000d24:	f04f 30ff 	mov.w	r0, #4294967295
 8000d28:	f7ff ff8e 	bl	8000c48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d2c:	4b05      	ldr	r3, [pc, #20]	@ (8000d44 <SysTick_Config+0x40>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d32:	4b04      	ldr	r3, [pc, #16]	@ (8000d44 <SysTick_Config+0x40>)
 8000d34:	2207      	movs	r2, #7
 8000d36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d38:	2300      	movs	r3, #0
}
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	3708      	adds	r7, #8
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	e000e010 	.word	0xe000e010

08000d48 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b082      	sub	sp, #8
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d50:	6878      	ldr	r0, [r7, #4]
 8000d52:	f7ff ff29 	bl	8000ba8 <__NVIC_SetPriorityGrouping>
}
 8000d56:	bf00      	nop
 8000d58:	3708      	adds	r7, #8
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}

08000d5e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d5e:	b580      	push	{r7, lr}
 8000d60:	b086      	sub	sp, #24
 8000d62:	af00      	add	r7, sp, #0
 8000d64:	4603      	mov	r3, r0
 8000d66:	60b9      	str	r1, [r7, #8]
 8000d68:	607a      	str	r2, [r7, #4]
 8000d6a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d70:	f7ff ff3e 	bl	8000bf0 <__NVIC_GetPriorityGrouping>
 8000d74:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d76:	687a      	ldr	r2, [r7, #4]
 8000d78:	68b9      	ldr	r1, [r7, #8]
 8000d7a:	6978      	ldr	r0, [r7, #20]
 8000d7c:	f7ff ff8e 	bl	8000c9c <NVIC_EncodePriority>
 8000d80:	4602      	mov	r2, r0
 8000d82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d86:	4611      	mov	r1, r2
 8000d88:	4618      	mov	r0, r3
 8000d8a:	f7ff ff5d 	bl	8000c48 <__NVIC_SetPriority>
}
 8000d8e:	bf00      	nop
 8000d90:	3718      	adds	r7, #24
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}

08000d96 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d96:	b580      	push	{r7, lr}
 8000d98:	b082      	sub	sp, #8
 8000d9a:	af00      	add	r7, sp, #0
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000da0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000da4:	4618      	mov	r0, r3
 8000da6:	f7ff ff31 	bl	8000c0c <__NVIC_EnableIRQ>
}
 8000daa:	bf00      	nop
 8000dac:	3708      	adds	r7, #8
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}

08000db2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000db2:	b580      	push	{r7, lr}
 8000db4:	b082      	sub	sp, #8
 8000db6:	af00      	add	r7, sp, #0
 8000db8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000dba:	6878      	ldr	r0, [r7, #4]
 8000dbc:	f7ff ffa2 	bl	8000d04 <SysTick_Config>
 8000dc0:	4603      	mov	r3, r0
}
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	3708      	adds	r7, #8
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}

08000dca <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000dca:	b580      	push	{r7, lr}
 8000dcc:	b084      	sub	sp, #16
 8000dce:	af00      	add	r7, sp, #0
 8000dd0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000dd6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000dd8:	f7ff feda 	bl	8000b90 <HAL_GetTick>
 8000ddc:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8000de4:	b2db      	uxtb	r3, r3
 8000de6:	2b02      	cmp	r3, #2
 8000de8:	d008      	beq.n	8000dfc <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	2280      	movs	r2, #128	@ 0x80
 8000dee:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	2200      	movs	r2, #0
 8000df4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8000df8:	2301      	movs	r3, #1
 8000dfa:	e052      	b.n	8000ea2 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	681a      	ldr	r2, [r3, #0]
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	f022 0216 	bic.w	r2, r2, #22
 8000e0a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	695a      	ldr	r2, [r3, #20]
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000e1a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d103      	bne.n	8000e2c <HAL_DMA_Abort+0x62>
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d007      	beq.n	8000e3c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	681a      	ldr	r2, [r3, #0]
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	f022 0208 	bic.w	r2, r2, #8
 8000e3a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	681a      	ldr	r2, [r3, #0]
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	f022 0201 	bic.w	r2, r2, #1
 8000e4a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000e4c:	e013      	b.n	8000e76 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000e4e:	f7ff fe9f 	bl	8000b90 <HAL_GetTick>
 8000e52:	4602      	mov	r2, r0
 8000e54:	68bb      	ldr	r3, [r7, #8]
 8000e56:	1ad3      	subs	r3, r2, r3
 8000e58:	2b05      	cmp	r3, #5
 8000e5a:	d90c      	bls.n	8000e76 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	2220      	movs	r2, #32
 8000e60:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	2203      	movs	r2, #3
 8000e66:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8000e72:	2303      	movs	r3, #3
 8000e74:	e015      	b.n	8000ea2 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	f003 0301 	and.w	r3, r3, #1
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d1e4      	bne.n	8000e4e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000e88:	223f      	movs	r2, #63	@ 0x3f
 8000e8a:	409a      	lsls	r2, r3
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	2201      	movs	r2, #1
 8000e94:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8000ea0:	2300      	movs	r3, #0
}
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	3710      	adds	r7, #16
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}

08000eaa <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000eaa:	b480      	push	{r7}
 8000eac:	b083      	sub	sp, #12
 8000eae:	af00      	add	r7, sp, #0
 8000eb0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8000eb8:	b2db      	uxtb	r3, r3
 8000eba:	2b02      	cmp	r3, #2
 8000ebc:	d004      	beq.n	8000ec8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	2280      	movs	r2, #128	@ 0x80
 8000ec2:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8000ec4:	2301      	movs	r3, #1
 8000ec6:	e00c      	b.n	8000ee2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	2205      	movs	r2, #5
 8000ecc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	681a      	ldr	r2, [r3, #0]
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	f022 0201 	bic.w	r2, r2, #1
 8000ede:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000ee0:	2300      	movs	r3, #0
}
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	370c      	adds	r7, #12
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr
	...

08000ef0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	b089      	sub	sp, #36	@ 0x24
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
 8000ef8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000efa:	2300      	movs	r3, #0
 8000efc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000efe:	2300      	movs	r3, #0
 8000f00:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f02:	2300      	movs	r3, #0
 8000f04:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f06:	2300      	movs	r3, #0
 8000f08:	61fb      	str	r3, [r7, #28]
 8000f0a:	e159      	b.n	80011c0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f0c:	2201      	movs	r2, #1
 8000f0e:	69fb      	ldr	r3, [r7, #28]
 8000f10:	fa02 f303 	lsl.w	r3, r2, r3
 8000f14:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	697a      	ldr	r2, [r7, #20]
 8000f1c:	4013      	ands	r3, r2
 8000f1e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f20:	693a      	ldr	r2, [r7, #16]
 8000f22:	697b      	ldr	r3, [r7, #20]
 8000f24:	429a      	cmp	r2, r3
 8000f26:	f040 8148 	bne.w	80011ba <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	685b      	ldr	r3, [r3, #4]
 8000f2e:	f003 0303 	and.w	r3, r3, #3
 8000f32:	2b01      	cmp	r3, #1
 8000f34:	d005      	beq.n	8000f42 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	685b      	ldr	r3, [r3, #4]
 8000f3a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f3e:	2b02      	cmp	r3, #2
 8000f40:	d130      	bne.n	8000fa4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	689b      	ldr	r3, [r3, #8]
 8000f46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f48:	69fb      	ldr	r3, [r7, #28]
 8000f4a:	005b      	lsls	r3, r3, #1
 8000f4c:	2203      	movs	r2, #3
 8000f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f52:	43db      	mvns	r3, r3
 8000f54:	69ba      	ldr	r2, [r7, #24]
 8000f56:	4013      	ands	r3, r2
 8000f58:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	68da      	ldr	r2, [r3, #12]
 8000f5e:	69fb      	ldr	r3, [r7, #28]
 8000f60:	005b      	lsls	r3, r3, #1
 8000f62:	fa02 f303 	lsl.w	r3, r2, r3
 8000f66:	69ba      	ldr	r2, [r7, #24]
 8000f68:	4313      	orrs	r3, r2
 8000f6a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	69ba      	ldr	r2, [r7, #24]
 8000f70:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	685b      	ldr	r3, [r3, #4]
 8000f76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f78:	2201      	movs	r2, #1
 8000f7a:	69fb      	ldr	r3, [r7, #28]
 8000f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f80:	43db      	mvns	r3, r3
 8000f82:	69ba      	ldr	r2, [r7, #24]
 8000f84:	4013      	ands	r3, r2
 8000f86:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	685b      	ldr	r3, [r3, #4]
 8000f8c:	091b      	lsrs	r3, r3, #4
 8000f8e:	f003 0201 	and.w	r2, r3, #1
 8000f92:	69fb      	ldr	r3, [r7, #28]
 8000f94:	fa02 f303 	lsl.w	r3, r2, r3
 8000f98:	69ba      	ldr	r2, [r7, #24]
 8000f9a:	4313      	orrs	r3, r2
 8000f9c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	69ba      	ldr	r2, [r7, #24]
 8000fa2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	685b      	ldr	r3, [r3, #4]
 8000fa8:	f003 0303 	and.w	r3, r3, #3
 8000fac:	2b03      	cmp	r3, #3
 8000fae:	d017      	beq.n	8000fe0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	68db      	ldr	r3, [r3, #12]
 8000fb4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000fb6:	69fb      	ldr	r3, [r7, #28]
 8000fb8:	005b      	lsls	r3, r3, #1
 8000fba:	2203      	movs	r2, #3
 8000fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc0:	43db      	mvns	r3, r3
 8000fc2:	69ba      	ldr	r2, [r7, #24]
 8000fc4:	4013      	ands	r3, r2
 8000fc6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	689a      	ldr	r2, [r3, #8]
 8000fcc:	69fb      	ldr	r3, [r7, #28]
 8000fce:	005b      	lsls	r3, r3, #1
 8000fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd4:	69ba      	ldr	r2, [r7, #24]
 8000fd6:	4313      	orrs	r3, r2
 8000fd8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	69ba      	ldr	r2, [r7, #24]
 8000fde:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	685b      	ldr	r3, [r3, #4]
 8000fe4:	f003 0303 	and.w	r3, r3, #3
 8000fe8:	2b02      	cmp	r3, #2
 8000fea:	d123      	bne.n	8001034 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000fec:	69fb      	ldr	r3, [r7, #28]
 8000fee:	08da      	lsrs	r2, r3, #3
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	3208      	adds	r2, #8
 8000ff4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ff8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000ffa:	69fb      	ldr	r3, [r7, #28]
 8000ffc:	f003 0307 	and.w	r3, r3, #7
 8001000:	009b      	lsls	r3, r3, #2
 8001002:	220f      	movs	r2, #15
 8001004:	fa02 f303 	lsl.w	r3, r2, r3
 8001008:	43db      	mvns	r3, r3
 800100a:	69ba      	ldr	r2, [r7, #24]
 800100c:	4013      	ands	r3, r2
 800100e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	691a      	ldr	r2, [r3, #16]
 8001014:	69fb      	ldr	r3, [r7, #28]
 8001016:	f003 0307 	and.w	r3, r3, #7
 800101a:	009b      	lsls	r3, r3, #2
 800101c:	fa02 f303 	lsl.w	r3, r2, r3
 8001020:	69ba      	ldr	r2, [r7, #24]
 8001022:	4313      	orrs	r3, r2
 8001024:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001026:	69fb      	ldr	r3, [r7, #28]
 8001028:	08da      	lsrs	r2, r3, #3
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	3208      	adds	r2, #8
 800102e:	69b9      	ldr	r1, [r7, #24]
 8001030:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800103a:	69fb      	ldr	r3, [r7, #28]
 800103c:	005b      	lsls	r3, r3, #1
 800103e:	2203      	movs	r2, #3
 8001040:	fa02 f303 	lsl.w	r3, r2, r3
 8001044:	43db      	mvns	r3, r3
 8001046:	69ba      	ldr	r2, [r7, #24]
 8001048:	4013      	ands	r3, r2
 800104a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	685b      	ldr	r3, [r3, #4]
 8001050:	f003 0203 	and.w	r2, r3, #3
 8001054:	69fb      	ldr	r3, [r7, #28]
 8001056:	005b      	lsls	r3, r3, #1
 8001058:	fa02 f303 	lsl.w	r3, r2, r3
 800105c:	69ba      	ldr	r2, [r7, #24]
 800105e:	4313      	orrs	r3, r2
 8001060:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	69ba      	ldr	r2, [r7, #24]
 8001066:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	685b      	ldr	r3, [r3, #4]
 800106c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001070:	2b00      	cmp	r3, #0
 8001072:	f000 80a2 	beq.w	80011ba <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001076:	2300      	movs	r3, #0
 8001078:	60fb      	str	r3, [r7, #12]
 800107a:	4b57      	ldr	r3, [pc, #348]	@ (80011d8 <HAL_GPIO_Init+0x2e8>)
 800107c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800107e:	4a56      	ldr	r2, [pc, #344]	@ (80011d8 <HAL_GPIO_Init+0x2e8>)
 8001080:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001084:	6453      	str	r3, [r2, #68]	@ 0x44
 8001086:	4b54      	ldr	r3, [pc, #336]	@ (80011d8 <HAL_GPIO_Init+0x2e8>)
 8001088:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800108a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800108e:	60fb      	str	r3, [r7, #12]
 8001090:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001092:	4a52      	ldr	r2, [pc, #328]	@ (80011dc <HAL_GPIO_Init+0x2ec>)
 8001094:	69fb      	ldr	r3, [r7, #28]
 8001096:	089b      	lsrs	r3, r3, #2
 8001098:	3302      	adds	r3, #2
 800109a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800109e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80010a0:	69fb      	ldr	r3, [r7, #28]
 80010a2:	f003 0303 	and.w	r3, r3, #3
 80010a6:	009b      	lsls	r3, r3, #2
 80010a8:	220f      	movs	r2, #15
 80010aa:	fa02 f303 	lsl.w	r3, r2, r3
 80010ae:	43db      	mvns	r3, r3
 80010b0:	69ba      	ldr	r2, [r7, #24]
 80010b2:	4013      	ands	r3, r2
 80010b4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	4a49      	ldr	r2, [pc, #292]	@ (80011e0 <HAL_GPIO_Init+0x2f0>)
 80010ba:	4293      	cmp	r3, r2
 80010bc:	d019      	beq.n	80010f2 <HAL_GPIO_Init+0x202>
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	4a48      	ldr	r2, [pc, #288]	@ (80011e4 <HAL_GPIO_Init+0x2f4>)
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d013      	beq.n	80010ee <HAL_GPIO_Init+0x1fe>
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	4a47      	ldr	r2, [pc, #284]	@ (80011e8 <HAL_GPIO_Init+0x2f8>)
 80010ca:	4293      	cmp	r3, r2
 80010cc:	d00d      	beq.n	80010ea <HAL_GPIO_Init+0x1fa>
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	4a46      	ldr	r2, [pc, #280]	@ (80011ec <HAL_GPIO_Init+0x2fc>)
 80010d2:	4293      	cmp	r3, r2
 80010d4:	d007      	beq.n	80010e6 <HAL_GPIO_Init+0x1f6>
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	4a45      	ldr	r2, [pc, #276]	@ (80011f0 <HAL_GPIO_Init+0x300>)
 80010da:	4293      	cmp	r3, r2
 80010dc:	d101      	bne.n	80010e2 <HAL_GPIO_Init+0x1f2>
 80010de:	2304      	movs	r3, #4
 80010e0:	e008      	b.n	80010f4 <HAL_GPIO_Init+0x204>
 80010e2:	2307      	movs	r3, #7
 80010e4:	e006      	b.n	80010f4 <HAL_GPIO_Init+0x204>
 80010e6:	2303      	movs	r3, #3
 80010e8:	e004      	b.n	80010f4 <HAL_GPIO_Init+0x204>
 80010ea:	2302      	movs	r3, #2
 80010ec:	e002      	b.n	80010f4 <HAL_GPIO_Init+0x204>
 80010ee:	2301      	movs	r3, #1
 80010f0:	e000      	b.n	80010f4 <HAL_GPIO_Init+0x204>
 80010f2:	2300      	movs	r3, #0
 80010f4:	69fa      	ldr	r2, [r7, #28]
 80010f6:	f002 0203 	and.w	r2, r2, #3
 80010fa:	0092      	lsls	r2, r2, #2
 80010fc:	4093      	lsls	r3, r2
 80010fe:	69ba      	ldr	r2, [r7, #24]
 8001100:	4313      	orrs	r3, r2
 8001102:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001104:	4935      	ldr	r1, [pc, #212]	@ (80011dc <HAL_GPIO_Init+0x2ec>)
 8001106:	69fb      	ldr	r3, [r7, #28]
 8001108:	089b      	lsrs	r3, r3, #2
 800110a:	3302      	adds	r3, #2
 800110c:	69ba      	ldr	r2, [r7, #24]
 800110e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001112:	4b38      	ldr	r3, [pc, #224]	@ (80011f4 <HAL_GPIO_Init+0x304>)
 8001114:	689b      	ldr	r3, [r3, #8]
 8001116:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001118:	693b      	ldr	r3, [r7, #16]
 800111a:	43db      	mvns	r3, r3
 800111c:	69ba      	ldr	r2, [r7, #24]
 800111e:	4013      	ands	r3, r2
 8001120:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	685b      	ldr	r3, [r3, #4]
 8001126:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800112a:	2b00      	cmp	r3, #0
 800112c:	d003      	beq.n	8001136 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800112e:	69ba      	ldr	r2, [r7, #24]
 8001130:	693b      	ldr	r3, [r7, #16]
 8001132:	4313      	orrs	r3, r2
 8001134:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001136:	4a2f      	ldr	r2, [pc, #188]	@ (80011f4 <HAL_GPIO_Init+0x304>)
 8001138:	69bb      	ldr	r3, [r7, #24]
 800113a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800113c:	4b2d      	ldr	r3, [pc, #180]	@ (80011f4 <HAL_GPIO_Init+0x304>)
 800113e:	68db      	ldr	r3, [r3, #12]
 8001140:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001142:	693b      	ldr	r3, [r7, #16]
 8001144:	43db      	mvns	r3, r3
 8001146:	69ba      	ldr	r2, [r7, #24]
 8001148:	4013      	ands	r3, r2
 800114a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	685b      	ldr	r3, [r3, #4]
 8001150:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001154:	2b00      	cmp	r3, #0
 8001156:	d003      	beq.n	8001160 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001158:	69ba      	ldr	r2, [r7, #24]
 800115a:	693b      	ldr	r3, [r7, #16]
 800115c:	4313      	orrs	r3, r2
 800115e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001160:	4a24      	ldr	r2, [pc, #144]	@ (80011f4 <HAL_GPIO_Init+0x304>)
 8001162:	69bb      	ldr	r3, [r7, #24]
 8001164:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001166:	4b23      	ldr	r3, [pc, #140]	@ (80011f4 <HAL_GPIO_Init+0x304>)
 8001168:	685b      	ldr	r3, [r3, #4]
 800116a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800116c:	693b      	ldr	r3, [r7, #16]
 800116e:	43db      	mvns	r3, r3
 8001170:	69ba      	ldr	r2, [r7, #24]
 8001172:	4013      	ands	r3, r2
 8001174:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	685b      	ldr	r3, [r3, #4]
 800117a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800117e:	2b00      	cmp	r3, #0
 8001180:	d003      	beq.n	800118a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001182:	69ba      	ldr	r2, [r7, #24]
 8001184:	693b      	ldr	r3, [r7, #16]
 8001186:	4313      	orrs	r3, r2
 8001188:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800118a:	4a1a      	ldr	r2, [pc, #104]	@ (80011f4 <HAL_GPIO_Init+0x304>)
 800118c:	69bb      	ldr	r3, [r7, #24]
 800118e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001190:	4b18      	ldr	r3, [pc, #96]	@ (80011f4 <HAL_GPIO_Init+0x304>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001196:	693b      	ldr	r3, [r7, #16]
 8001198:	43db      	mvns	r3, r3
 800119a:	69ba      	ldr	r2, [r7, #24]
 800119c:	4013      	ands	r3, r2
 800119e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d003      	beq.n	80011b4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80011ac:	69ba      	ldr	r2, [r7, #24]
 80011ae:	693b      	ldr	r3, [r7, #16]
 80011b0:	4313      	orrs	r3, r2
 80011b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80011b4:	4a0f      	ldr	r2, [pc, #60]	@ (80011f4 <HAL_GPIO_Init+0x304>)
 80011b6:	69bb      	ldr	r3, [r7, #24]
 80011b8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011ba:	69fb      	ldr	r3, [r7, #28]
 80011bc:	3301      	adds	r3, #1
 80011be:	61fb      	str	r3, [r7, #28]
 80011c0:	69fb      	ldr	r3, [r7, #28]
 80011c2:	2b0f      	cmp	r3, #15
 80011c4:	f67f aea2 	bls.w	8000f0c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80011c8:	bf00      	nop
 80011ca:	bf00      	nop
 80011cc:	3724      	adds	r7, #36	@ 0x24
 80011ce:	46bd      	mov	sp, r7
 80011d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d4:	4770      	bx	lr
 80011d6:	bf00      	nop
 80011d8:	40023800 	.word	0x40023800
 80011dc:	40013800 	.word	0x40013800
 80011e0:	40020000 	.word	0x40020000
 80011e4:	40020400 	.word	0x40020400
 80011e8:	40020800 	.word	0x40020800
 80011ec:	40020c00 	.word	0x40020c00
 80011f0:	40021000 	.word	0x40021000
 80011f4:	40013c00 	.word	0x40013c00

080011f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011f8:	b480      	push	{r7}
 80011fa:	b083      	sub	sp, #12
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
 8001200:	460b      	mov	r3, r1
 8001202:	807b      	strh	r3, [r7, #2]
 8001204:	4613      	mov	r3, r2
 8001206:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001208:	787b      	ldrb	r3, [r7, #1]
 800120a:	2b00      	cmp	r3, #0
 800120c:	d003      	beq.n	8001216 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800120e:	887a      	ldrh	r2, [r7, #2]
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001214:	e003      	b.n	800121e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001216:	887b      	ldrh	r3, [r7, #2]
 8001218:	041a      	lsls	r2, r3, #16
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	619a      	str	r2, [r3, #24]
}
 800121e:	bf00      	nop
 8001220:	370c      	adds	r7, #12
 8001222:	46bd      	mov	sp, r7
 8001224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001228:	4770      	bx	lr

0800122a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800122a:	b480      	push	{r7}
 800122c:	b085      	sub	sp, #20
 800122e:	af00      	add	r7, sp, #0
 8001230:	6078      	str	r0, [r7, #4]
 8001232:	460b      	mov	r3, r1
 8001234:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	695b      	ldr	r3, [r3, #20]
 800123a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800123c:	887a      	ldrh	r2, [r7, #2]
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	4013      	ands	r3, r2
 8001242:	041a      	lsls	r2, r3, #16
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	43d9      	mvns	r1, r3
 8001248:	887b      	ldrh	r3, [r7, #2]
 800124a:	400b      	ands	r3, r1
 800124c:	431a      	orrs	r2, r3
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	619a      	str	r2, [r3, #24]
}
 8001252:	bf00      	nop
 8001254:	3714      	adds	r7, #20
 8001256:	46bd      	mov	sp, r7
 8001258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125c:	4770      	bx	lr
	...

08001260 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b086      	sub	sp, #24
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	2b00      	cmp	r3, #0
 800126c:	d101      	bne.n	8001272 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800126e:	2301      	movs	r3, #1
 8001270:	e267      	b.n	8001742 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f003 0301 	and.w	r3, r3, #1
 800127a:	2b00      	cmp	r3, #0
 800127c:	d075      	beq.n	800136a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800127e:	4b88      	ldr	r3, [pc, #544]	@ (80014a0 <HAL_RCC_OscConfig+0x240>)
 8001280:	689b      	ldr	r3, [r3, #8]
 8001282:	f003 030c 	and.w	r3, r3, #12
 8001286:	2b04      	cmp	r3, #4
 8001288:	d00c      	beq.n	80012a4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800128a:	4b85      	ldr	r3, [pc, #532]	@ (80014a0 <HAL_RCC_OscConfig+0x240>)
 800128c:	689b      	ldr	r3, [r3, #8]
 800128e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001292:	2b08      	cmp	r3, #8
 8001294:	d112      	bne.n	80012bc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001296:	4b82      	ldr	r3, [pc, #520]	@ (80014a0 <HAL_RCC_OscConfig+0x240>)
 8001298:	685b      	ldr	r3, [r3, #4]
 800129a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800129e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80012a2:	d10b      	bne.n	80012bc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012a4:	4b7e      	ldr	r3, [pc, #504]	@ (80014a0 <HAL_RCC_OscConfig+0x240>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d05b      	beq.n	8001368 <HAL_RCC_OscConfig+0x108>
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d157      	bne.n	8001368 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80012b8:	2301      	movs	r3, #1
 80012ba:	e242      	b.n	8001742 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80012c4:	d106      	bne.n	80012d4 <HAL_RCC_OscConfig+0x74>
 80012c6:	4b76      	ldr	r3, [pc, #472]	@ (80014a0 <HAL_RCC_OscConfig+0x240>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	4a75      	ldr	r2, [pc, #468]	@ (80014a0 <HAL_RCC_OscConfig+0x240>)
 80012cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80012d0:	6013      	str	r3, [r2, #0]
 80012d2:	e01d      	b.n	8001310 <HAL_RCC_OscConfig+0xb0>
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80012dc:	d10c      	bne.n	80012f8 <HAL_RCC_OscConfig+0x98>
 80012de:	4b70      	ldr	r3, [pc, #448]	@ (80014a0 <HAL_RCC_OscConfig+0x240>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	4a6f      	ldr	r2, [pc, #444]	@ (80014a0 <HAL_RCC_OscConfig+0x240>)
 80012e4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80012e8:	6013      	str	r3, [r2, #0]
 80012ea:	4b6d      	ldr	r3, [pc, #436]	@ (80014a0 <HAL_RCC_OscConfig+0x240>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	4a6c      	ldr	r2, [pc, #432]	@ (80014a0 <HAL_RCC_OscConfig+0x240>)
 80012f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80012f4:	6013      	str	r3, [r2, #0]
 80012f6:	e00b      	b.n	8001310 <HAL_RCC_OscConfig+0xb0>
 80012f8:	4b69      	ldr	r3, [pc, #420]	@ (80014a0 <HAL_RCC_OscConfig+0x240>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4a68      	ldr	r2, [pc, #416]	@ (80014a0 <HAL_RCC_OscConfig+0x240>)
 80012fe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001302:	6013      	str	r3, [r2, #0]
 8001304:	4b66      	ldr	r3, [pc, #408]	@ (80014a0 <HAL_RCC_OscConfig+0x240>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4a65      	ldr	r2, [pc, #404]	@ (80014a0 <HAL_RCC_OscConfig+0x240>)
 800130a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800130e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	2b00      	cmp	r3, #0
 8001316:	d013      	beq.n	8001340 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001318:	f7ff fc3a 	bl	8000b90 <HAL_GetTick>
 800131c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800131e:	e008      	b.n	8001332 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001320:	f7ff fc36 	bl	8000b90 <HAL_GetTick>
 8001324:	4602      	mov	r2, r0
 8001326:	693b      	ldr	r3, [r7, #16]
 8001328:	1ad3      	subs	r3, r2, r3
 800132a:	2b64      	cmp	r3, #100	@ 0x64
 800132c:	d901      	bls.n	8001332 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800132e:	2303      	movs	r3, #3
 8001330:	e207      	b.n	8001742 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001332:	4b5b      	ldr	r3, [pc, #364]	@ (80014a0 <HAL_RCC_OscConfig+0x240>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800133a:	2b00      	cmp	r3, #0
 800133c:	d0f0      	beq.n	8001320 <HAL_RCC_OscConfig+0xc0>
 800133e:	e014      	b.n	800136a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001340:	f7ff fc26 	bl	8000b90 <HAL_GetTick>
 8001344:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001346:	e008      	b.n	800135a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001348:	f7ff fc22 	bl	8000b90 <HAL_GetTick>
 800134c:	4602      	mov	r2, r0
 800134e:	693b      	ldr	r3, [r7, #16]
 8001350:	1ad3      	subs	r3, r2, r3
 8001352:	2b64      	cmp	r3, #100	@ 0x64
 8001354:	d901      	bls.n	800135a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001356:	2303      	movs	r3, #3
 8001358:	e1f3      	b.n	8001742 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800135a:	4b51      	ldr	r3, [pc, #324]	@ (80014a0 <HAL_RCC_OscConfig+0x240>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001362:	2b00      	cmp	r3, #0
 8001364:	d1f0      	bne.n	8001348 <HAL_RCC_OscConfig+0xe8>
 8001366:	e000      	b.n	800136a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001368:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f003 0302 	and.w	r3, r3, #2
 8001372:	2b00      	cmp	r3, #0
 8001374:	d063      	beq.n	800143e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001376:	4b4a      	ldr	r3, [pc, #296]	@ (80014a0 <HAL_RCC_OscConfig+0x240>)
 8001378:	689b      	ldr	r3, [r3, #8]
 800137a:	f003 030c 	and.w	r3, r3, #12
 800137e:	2b00      	cmp	r3, #0
 8001380:	d00b      	beq.n	800139a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001382:	4b47      	ldr	r3, [pc, #284]	@ (80014a0 <HAL_RCC_OscConfig+0x240>)
 8001384:	689b      	ldr	r3, [r3, #8]
 8001386:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800138a:	2b08      	cmp	r3, #8
 800138c:	d11c      	bne.n	80013c8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800138e:	4b44      	ldr	r3, [pc, #272]	@ (80014a0 <HAL_RCC_OscConfig+0x240>)
 8001390:	685b      	ldr	r3, [r3, #4]
 8001392:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001396:	2b00      	cmp	r3, #0
 8001398:	d116      	bne.n	80013c8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800139a:	4b41      	ldr	r3, [pc, #260]	@ (80014a0 <HAL_RCC_OscConfig+0x240>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f003 0302 	and.w	r3, r3, #2
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d005      	beq.n	80013b2 <HAL_RCC_OscConfig+0x152>
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	68db      	ldr	r3, [r3, #12]
 80013aa:	2b01      	cmp	r3, #1
 80013ac:	d001      	beq.n	80013b2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80013ae:	2301      	movs	r3, #1
 80013b0:	e1c7      	b.n	8001742 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013b2:	4b3b      	ldr	r3, [pc, #236]	@ (80014a0 <HAL_RCC_OscConfig+0x240>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	691b      	ldr	r3, [r3, #16]
 80013be:	00db      	lsls	r3, r3, #3
 80013c0:	4937      	ldr	r1, [pc, #220]	@ (80014a0 <HAL_RCC_OscConfig+0x240>)
 80013c2:	4313      	orrs	r3, r2
 80013c4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013c6:	e03a      	b.n	800143e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	68db      	ldr	r3, [r3, #12]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d020      	beq.n	8001412 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013d0:	4b34      	ldr	r3, [pc, #208]	@ (80014a4 <HAL_RCC_OscConfig+0x244>)
 80013d2:	2201      	movs	r2, #1
 80013d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013d6:	f7ff fbdb 	bl	8000b90 <HAL_GetTick>
 80013da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013dc:	e008      	b.n	80013f0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013de:	f7ff fbd7 	bl	8000b90 <HAL_GetTick>
 80013e2:	4602      	mov	r2, r0
 80013e4:	693b      	ldr	r3, [r7, #16]
 80013e6:	1ad3      	subs	r3, r2, r3
 80013e8:	2b02      	cmp	r3, #2
 80013ea:	d901      	bls.n	80013f0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80013ec:	2303      	movs	r3, #3
 80013ee:	e1a8      	b.n	8001742 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013f0:	4b2b      	ldr	r3, [pc, #172]	@ (80014a0 <HAL_RCC_OscConfig+0x240>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f003 0302 	and.w	r3, r3, #2
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d0f0      	beq.n	80013de <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013fc:	4b28      	ldr	r3, [pc, #160]	@ (80014a0 <HAL_RCC_OscConfig+0x240>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	691b      	ldr	r3, [r3, #16]
 8001408:	00db      	lsls	r3, r3, #3
 800140a:	4925      	ldr	r1, [pc, #148]	@ (80014a0 <HAL_RCC_OscConfig+0x240>)
 800140c:	4313      	orrs	r3, r2
 800140e:	600b      	str	r3, [r1, #0]
 8001410:	e015      	b.n	800143e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001412:	4b24      	ldr	r3, [pc, #144]	@ (80014a4 <HAL_RCC_OscConfig+0x244>)
 8001414:	2200      	movs	r2, #0
 8001416:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001418:	f7ff fbba 	bl	8000b90 <HAL_GetTick>
 800141c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800141e:	e008      	b.n	8001432 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001420:	f7ff fbb6 	bl	8000b90 <HAL_GetTick>
 8001424:	4602      	mov	r2, r0
 8001426:	693b      	ldr	r3, [r7, #16]
 8001428:	1ad3      	subs	r3, r2, r3
 800142a:	2b02      	cmp	r3, #2
 800142c:	d901      	bls.n	8001432 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800142e:	2303      	movs	r3, #3
 8001430:	e187      	b.n	8001742 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001432:	4b1b      	ldr	r3, [pc, #108]	@ (80014a0 <HAL_RCC_OscConfig+0x240>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f003 0302 	and.w	r3, r3, #2
 800143a:	2b00      	cmp	r3, #0
 800143c:	d1f0      	bne.n	8001420 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f003 0308 	and.w	r3, r3, #8
 8001446:	2b00      	cmp	r3, #0
 8001448:	d036      	beq.n	80014b8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	695b      	ldr	r3, [r3, #20]
 800144e:	2b00      	cmp	r3, #0
 8001450:	d016      	beq.n	8001480 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001452:	4b15      	ldr	r3, [pc, #84]	@ (80014a8 <HAL_RCC_OscConfig+0x248>)
 8001454:	2201      	movs	r2, #1
 8001456:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001458:	f7ff fb9a 	bl	8000b90 <HAL_GetTick>
 800145c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800145e:	e008      	b.n	8001472 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001460:	f7ff fb96 	bl	8000b90 <HAL_GetTick>
 8001464:	4602      	mov	r2, r0
 8001466:	693b      	ldr	r3, [r7, #16]
 8001468:	1ad3      	subs	r3, r2, r3
 800146a:	2b02      	cmp	r3, #2
 800146c:	d901      	bls.n	8001472 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800146e:	2303      	movs	r3, #3
 8001470:	e167      	b.n	8001742 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001472:	4b0b      	ldr	r3, [pc, #44]	@ (80014a0 <HAL_RCC_OscConfig+0x240>)
 8001474:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001476:	f003 0302 	and.w	r3, r3, #2
 800147a:	2b00      	cmp	r3, #0
 800147c:	d0f0      	beq.n	8001460 <HAL_RCC_OscConfig+0x200>
 800147e:	e01b      	b.n	80014b8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001480:	4b09      	ldr	r3, [pc, #36]	@ (80014a8 <HAL_RCC_OscConfig+0x248>)
 8001482:	2200      	movs	r2, #0
 8001484:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001486:	f7ff fb83 	bl	8000b90 <HAL_GetTick>
 800148a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800148c:	e00e      	b.n	80014ac <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800148e:	f7ff fb7f 	bl	8000b90 <HAL_GetTick>
 8001492:	4602      	mov	r2, r0
 8001494:	693b      	ldr	r3, [r7, #16]
 8001496:	1ad3      	subs	r3, r2, r3
 8001498:	2b02      	cmp	r3, #2
 800149a:	d907      	bls.n	80014ac <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800149c:	2303      	movs	r3, #3
 800149e:	e150      	b.n	8001742 <HAL_RCC_OscConfig+0x4e2>
 80014a0:	40023800 	.word	0x40023800
 80014a4:	42470000 	.word	0x42470000
 80014a8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014ac:	4b88      	ldr	r3, [pc, #544]	@ (80016d0 <HAL_RCC_OscConfig+0x470>)
 80014ae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80014b0:	f003 0302 	and.w	r3, r3, #2
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d1ea      	bne.n	800148e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f003 0304 	and.w	r3, r3, #4
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	f000 8097 	beq.w	80015f4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014c6:	2300      	movs	r3, #0
 80014c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014ca:	4b81      	ldr	r3, [pc, #516]	@ (80016d0 <HAL_RCC_OscConfig+0x470>)
 80014cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d10f      	bne.n	80014f6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014d6:	2300      	movs	r3, #0
 80014d8:	60bb      	str	r3, [r7, #8]
 80014da:	4b7d      	ldr	r3, [pc, #500]	@ (80016d0 <HAL_RCC_OscConfig+0x470>)
 80014dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014de:	4a7c      	ldr	r2, [pc, #496]	@ (80016d0 <HAL_RCC_OscConfig+0x470>)
 80014e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014e4:	6413      	str	r3, [r2, #64]	@ 0x40
 80014e6:	4b7a      	ldr	r3, [pc, #488]	@ (80016d0 <HAL_RCC_OscConfig+0x470>)
 80014e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014ee:	60bb      	str	r3, [r7, #8]
 80014f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80014f2:	2301      	movs	r3, #1
 80014f4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014f6:	4b77      	ldr	r3, [pc, #476]	@ (80016d4 <HAL_RCC_OscConfig+0x474>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d118      	bne.n	8001534 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001502:	4b74      	ldr	r3, [pc, #464]	@ (80016d4 <HAL_RCC_OscConfig+0x474>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	4a73      	ldr	r2, [pc, #460]	@ (80016d4 <HAL_RCC_OscConfig+0x474>)
 8001508:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800150c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800150e:	f7ff fb3f 	bl	8000b90 <HAL_GetTick>
 8001512:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001514:	e008      	b.n	8001528 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001516:	f7ff fb3b 	bl	8000b90 <HAL_GetTick>
 800151a:	4602      	mov	r2, r0
 800151c:	693b      	ldr	r3, [r7, #16]
 800151e:	1ad3      	subs	r3, r2, r3
 8001520:	2b02      	cmp	r3, #2
 8001522:	d901      	bls.n	8001528 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001524:	2303      	movs	r3, #3
 8001526:	e10c      	b.n	8001742 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001528:	4b6a      	ldr	r3, [pc, #424]	@ (80016d4 <HAL_RCC_OscConfig+0x474>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001530:	2b00      	cmp	r3, #0
 8001532:	d0f0      	beq.n	8001516 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	689b      	ldr	r3, [r3, #8]
 8001538:	2b01      	cmp	r3, #1
 800153a:	d106      	bne.n	800154a <HAL_RCC_OscConfig+0x2ea>
 800153c:	4b64      	ldr	r3, [pc, #400]	@ (80016d0 <HAL_RCC_OscConfig+0x470>)
 800153e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001540:	4a63      	ldr	r2, [pc, #396]	@ (80016d0 <HAL_RCC_OscConfig+0x470>)
 8001542:	f043 0301 	orr.w	r3, r3, #1
 8001546:	6713      	str	r3, [r2, #112]	@ 0x70
 8001548:	e01c      	b.n	8001584 <HAL_RCC_OscConfig+0x324>
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	689b      	ldr	r3, [r3, #8]
 800154e:	2b05      	cmp	r3, #5
 8001550:	d10c      	bne.n	800156c <HAL_RCC_OscConfig+0x30c>
 8001552:	4b5f      	ldr	r3, [pc, #380]	@ (80016d0 <HAL_RCC_OscConfig+0x470>)
 8001554:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001556:	4a5e      	ldr	r2, [pc, #376]	@ (80016d0 <HAL_RCC_OscConfig+0x470>)
 8001558:	f043 0304 	orr.w	r3, r3, #4
 800155c:	6713      	str	r3, [r2, #112]	@ 0x70
 800155e:	4b5c      	ldr	r3, [pc, #368]	@ (80016d0 <HAL_RCC_OscConfig+0x470>)
 8001560:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001562:	4a5b      	ldr	r2, [pc, #364]	@ (80016d0 <HAL_RCC_OscConfig+0x470>)
 8001564:	f043 0301 	orr.w	r3, r3, #1
 8001568:	6713      	str	r3, [r2, #112]	@ 0x70
 800156a:	e00b      	b.n	8001584 <HAL_RCC_OscConfig+0x324>
 800156c:	4b58      	ldr	r3, [pc, #352]	@ (80016d0 <HAL_RCC_OscConfig+0x470>)
 800156e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001570:	4a57      	ldr	r2, [pc, #348]	@ (80016d0 <HAL_RCC_OscConfig+0x470>)
 8001572:	f023 0301 	bic.w	r3, r3, #1
 8001576:	6713      	str	r3, [r2, #112]	@ 0x70
 8001578:	4b55      	ldr	r3, [pc, #340]	@ (80016d0 <HAL_RCC_OscConfig+0x470>)
 800157a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800157c:	4a54      	ldr	r2, [pc, #336]	@ (80016d0 <HAL_RCC_OscConfig+0x470>)
 800157e:	f023 0304 	bic.w	r3, r3, #4
 8001582:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	689b      	ldr	r3, [r3, #8]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d015      	beq.n	80015b8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800158c:	f7ff fb00 	bl	8000b90 <HAL_GetTick>
 8001590:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001592:	e00a      	b.n	80015aa <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001594:	f7ff fafc 	bl	8000b90 <HAL_GetTick>
 8001598:	4602      	mov	r2, r0
 800159a:	693b      	ldr	r3, [r7, #16]
 800159c:	1ad3      	subs	r3, r2, r3
 800159e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d901      	bls.n	80015aa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80015a6:	2303      	movs	r3, #3
 80015a8:	e0cb      	b.n	8001742 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015aa:	4b49      	ldr	r3, [pc, #292]	@ (80016d0 <HAL_RCC_OscConfig+0x470>)
 80015ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015ae:	f003 0302 	and.w	r3, r3, #2
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d0ee      	beq.n	8001594 <HAL_RCC_OscConfig+0x334>
 80015b6:	e014      	b.n	80015e2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015b8:	f7ff faea 	bl	8000b90 <HAL_GetTick>
 80015bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015be:	e00a      	b.n	80015d6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015c0:	f7ff fae6 	bl	8000b90 <HAL_GetTick>
 80015c4:	4602      	mov	r2, r0
 80015c6:	693b      	ldr	r3, [r7, #16]
 80015c8:	1ad3      	subs	r3, r2, r3
 80015ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d901      	bls.n	80015d6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80015d2:	2303      	movs	r3, #3
 80015d4:	e0b5      	b.n	8001742 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015d6:	4b3e      	ldr	r3, [pc, #248]	@ (80016d0 <HAL_RCC_OscConfig+0x470>)
 80015d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015da:	f003 0302 	and.w	r3, r3, #2
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d1ee      	bne.n	80015c0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80015e2:	7dfb      	ldrb	r3, [r7, #23]
 80015e4:	2b01      	cmp	r3, #1
 80015e6:	d105      	bne.n	80015f4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015e8:	4b39      	ldr	r3, [pc, #228]	@ (80016d0 <HAL_RCC_OscConfig+0x470>)
 80015ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015ec:	4a38      	ldr	r2, [pc, #224]	@ (80016d0 <HAL_RCC_OscConfig+0x470>)
 80015ee:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80015f2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	699b      	ldr	r3, [r3, #24]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	f000 80a1 	beq.w	8001740 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80015fe:	4b34      	ldr	r3, [pc, #208]	@ (80016d0 <HAL_RCC_OscConfig+0x470>)
 8001600:	689b      	ldr	r3, [r3, #8]
 8001602:	f003 030c 	and.w	r3, r3, #12
 8001606:	2b08      	cmp	r3, #8
 8001608:	d05c      	beq.n	80016c4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	699b      	ldr	r3, [r3, #24]
 800160e:	2b02      	cmp	r3, #2
 8001610:	d141      	bne.n	8001696 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001612:	4b31      	ldr	r3, [pc, #196]	@ (80016d8 <HAL_RCC_OscConfig+0x478>)
 8001614:	2200      	movs	r2, #0
 8001616:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001618:	f7ff faba 	bl	8000b90 <HAL_GetTick>
 800161c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800161e:	e008      	b.n	8001632 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001620:	f7ff fab6 	bl	8000b90 <HAL_GetTick>
 8001624:	4602      	mov	r2, r0
 8001626:	693b      	ldr	r3, [r7, #16]
 8001628:	1ad3      	subs	r3, r2, r3
 800162a:	2b02      	cmp	r3, #2
 800162c:	d901      	bls.n	8001632 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800162e:	2303      	movs	r3, #3
 8001630:	e087      	b.n	8001742 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001632:	4b27      	ldr	r3, [pc, #156]	@ (80016d0 <HAL_RCC_OscConfig+0x470>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800163a:	2b00      	cmp	r3, #0
 800163c:	d1f0      	bne.n	8001620 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	69da      	ldr	r2, [r3, #28]
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	6a1b      	ldr	r3, [r3, #32]
 8001646:	431a      	orrs	r2, r3
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800164c:	019b      	lsls	r3, r3, #6
 800164e:	431a      	orrs	r2, r3
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001654:	085b      	lsrs	r3, r3, #1
 8001656:	3b01      	subs	r3, #1
 8001658:	041b      	lsls	r3, r3, #16
 800165a:	431a      	orrs	r2, r3
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001660:	061b      	lsls	r3, r3, #24
 8001662:	491b      	ldr	r1, [pc, #108]	@ (80016d0 <HAL_RCC_OscConfig+0x470>)
 8001664:	4313      	orrs	r3, r2
 8001666:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001668:	4b1b      	ldr	r3, [pc, #108]	@ (80016d8 <HAL_RCC_OscConfig+0x478>)
 800166a:	2201      	movs	r2, #1
 800166c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800166e:	f7ff fa8f 	bl	8000b90 <HAL_GetTick>
 8001672:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001674:	e008      	b.n	8001688 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001676:	f7ff fa8b 	bl	8000b90 <HAL_GetTick>
 800167a:	4602      	mov	r2, r0
 800167c:	693b      	ldr	r3, [r7, #16]
 800167e:	1ad3      	subs	r3, r2, r3
 8001680:	2b02      	cmp	r3, #2
 8001682:	d901      	bls.n	8001688 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001684:	2303      	movs	r3, #3
 8001686:	e05c      	b.n	8001742 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001688:	4b11      	ldr	r3, [pc, #68]	@ (80016d0 <HAL_RCC_OscConfig+0x470>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001690:	2b00      	cmp	r3, #0
 8001692:	d0f0      	beq.n	8001676 <HAL_RCC_OscConfig+0x416>
 8001694:	e054      	b.n	8001740 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001696:	4b10      	ldr	r3, [pc, #64]	@ (80016d8 <HAL_RCC_OscConfig+0x478>)
 8001698:	2200      	movs	r2, #0
 800169a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800169c:	f7ff fa78 	bl	8000b90 <HAL_GetTick>
 80016a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016a2:	e008      	b.n	80016b6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016a4:	f7ff fa74 	bl	8000b90 <HAL_GetTick>
 80016a8:	4602      	mov	r2, r0
 80016aa:	693b      	ldr	r3, [r7, #16]
 80016ac:	1ad3      	subs	r3, r2, r3
 80016ae:	2b02      	cmp	r3, #2
 80016b0:	d901      	bls.n	80016b6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80016b2:	2303      	movs	r3, #3
 80016b4:	e045      	b.n	8001742 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016b6:	4b06      	ldr	r3, [pc, #24]	@ (80016d0 <HAL_RCC_OscConfig+0x470>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d1f0      	bne.n	80016a4 <HAL_RCC_OscConfig+0x444>
 80016c2:	e03d      	b.n	8001740 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	699b      	ldr	r3, [r3, #24]
 80016c8:	2b01      	cmp	r3, #1
 80016ca:	d107      	bne.n	80016dc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80016cc:	2301      	movs	r3, #1
 80016ce:	e038      	b.n	8001742 <HAL_RCC_OscConfig+0x4e2>
 80016d0:	40023800 	.word	0x40023800
 80016d4:	40007000 	.word	0x40007000
 80016d8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80016dc:	4b1b      	ldr	r3, [pc, #108]	@ (800174c <HAL_RCC_OscConfig+0x4ec>)
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	699b      	ldr	r3, [r3, #24]
 80016e6:	2b01      	cmp	r3, #1
 80016e8:	d028      	beq.n	800173c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016f4:	429a      	cmp	r2, r3
 80016f6:	d121      	bne.n	800173c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001702:	429a      	cmp	r2, r3
 8001704:	d11a      	bne.n	800173c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001706:	68fa      	ldr	r2, [r7, #12]
 8001708:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800170c:	4013      	ands	r3, r2
 800170e:	687a      	ldr	r2, [r7, #4]
 8001710:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001712:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001714:	4293      	cmp	r3, r2
 8001716:	d111      	bne.n	800173c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001722:	085b      	lsrs	r3, r3, #1
 8001724:	3b01      	subs	r3, #1
 8001726:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001728:	429a      	cmp	r2, r3
 800172a:	d107      	bne.n	800173c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001736:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001738:	429a      	cmp	r2, r3
 800173a:	d001      	beq.n	8001740 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800173c:	2301      	movs	r3, #1
 800173e:	e000      	b.n	8001742 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001740:	2300      	movs	r3, #0
}
 8001742:	4618      	mov	r0, r3
 8001744:	3718      	adds	r7, #24
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	40023800 	.word	0x40023800

08001750 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b084      	sub	sp, #16
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
 8001758:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d101      	bne.n	8001764 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001760:	2301      	movs	r3, #1
 8001762:	e0cc      	b.n	80018fe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001764:	4b68      	ldr	r3, [pc, #416]	@ (8001908 <HAL_RCC_ClockConfig+0x1b8>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f003 0307 	and.w	r3, r3, #7
 800176c:	683a      	ldr	r2, [r7, #0]
 800176e:	429a      	cmp	r2, r3
 8001770:	d90c      	bls.n	800178c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001772:	4b65      	ldr	r3, [pc, #404]	@ (8001908 <HAL_RCC_ClockConfig+0x1b8>)
 8001774:	683a      	ldr	r2, [r7, #0]
 8001776:	b2d2      	uxtb	r2, r2
 8001778:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800177a:	4b63      	ldr	r3, [pc, #396]	@ (8001908 <HAL_RCC_ClockConfig+0x1b8>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f003 0307 	and.w	r3, r3, #7
 8001782:	683a      	ldr	r2, [r7, #0]
 8001784:	429a      	cmp	r2, r3
 8001786:	d001      	beq.n	800178c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001788:	2301      	movs	r3, #1
 800178a:	e0b8      	b.n	80018fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f003 0302 	and.w	r3, r3, #2
 8001794:	2b00      	cmp	r3, #0
 8001796:	d020      	beq.n	80017da <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f003 0304 	and.w	r3, r3, #4
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d005      	beq.n	80017b0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80017a4:	4b59      	ldr	r3, [pc, #356]	@ (800190c <HAL_RCC_ClockConfig+0x1bc>)
 80017a6:	689b      	ldr	r3, [r3, #8]
 80017a8:	4a58      	ldr	r2, [pc, #352]	@ (800190c <HAL_RCC_ClockConfig+0x1bc>)
 80017aa:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80017ae:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f003 0308 	and.w	r3, r3, #8
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d005      	beq.n	80017c8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80017bc:	4b53      	ldr	r3, [pc, #332]	@ (800190c <HAL_RCC_ClockConfig+0x1bc>)
 80017be:	689b      	ldr	r3, [r3, #8]
 80017c0:	4a52      	ldr	r2, [pc, #328]	@ (800190c <HAL_RCC_ClockConfig+0x1bc>)
 80017c2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80017c6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017c8:	4b50      	ldr	r3, [pc, #320]	@ (800190c <HAL_RCC_ClockConfig+0x1bc>)
 80017ca:	689b      	ldr	r3, [r3, #8]
 80017cc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	689b      	ldr	r3, [r3, #8]
 80017d4:	494d      	ldr	r1, [pc, #308]	@ (800190c <HAL_RCC_ClockConfig+0x1bc>)
 80017d6:	4313      	orrs	r3, r2
 80017d8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f003 0301 	and.w	r3, r3, #1
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d044      	beq.n	8001870 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	2b01      	cmp	r3, #1
 80017ec:	d107      	bne.n	80017fe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017ee:	4b47      	ldr	r3, [pc, #284]	@ (800190c <HAL_RCC_ClockConfig+0x1bc>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d119      	bne.n	800182e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017fa:	2301      	movs	r3, #1
 80017fc:	e07f      	b.n	80018fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	2b02      	cmp	r3, #2
 8001804:	d003      	beq.n	800180e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800180a:	2b03      	cmp	r3, #3
 800180c:	d107      	bne.n	800181e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800180e:	4b3f      	ldr	r3, [pc, #252]	@ (800190c <HAL_RCC_ClockConfig+0x1bc>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001816:	2b00      	cmp	r3, #0
 8001818:	d109      	bne.n	800182e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800181a:	2301      	movs	r3, #1
 800181c:	e06f      	b.n	80018fe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800181e:	4b3b      	ldr	r3, [pc, #236]	@ (800190c <HAL_RCC_ClockConfig+0x1bc>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f003 0302 	and.w	r3, r3, #2
 8001826:	2b00      	cmp	r3, #0
 8001828:	d101      	bne.n	800182e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800182a:	2301      	movs	r3, #1
 800182c:	e067      	b.n	80018fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800182e:	4b37      	ldr	r3, [pc, #220]	@ (800190c <HAL_RCC_ClockConfig+0x1bc>)
 8001830:	689b      	ldr	r3, [r3, #8]
 8001832:	f023 0203 	bic.w	r2, r3, #3
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	4934      	ldr	r1, [pc, #208]	@ (800190c <HAL_RCC_ClockConfig+0x1bc>)
 800183c:	4313      	orrs	r3, r2
 800183e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001840:	f7ff f9a6 	bl	8000b90 <HAL_GetTick>
 8001844:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001846:	e00a      	b.n	800185e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001848:	f7ff f9a2 	bl	8000b90 <HAL_GetTick>
 800184c:	4602      	mov	r2, r0
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	1ad3      	subs	r3, r2, r3
 8001852:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001856:	4293      	cmp	r3, r2
 8001858:	d901      	bls.n	800185e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800185a:	2303      	movs	r3, #3
 800185c:	e04f      	b.n	80018fe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800185e:	4b2b      	ldr	r3, [pc, #172]	@ (800190c <HAL_RCC_ClockConfig+0x1bc>)
 8001860:	689b      	ldr	r3, [r3, #8]
 8001862:	f003 020c 	and.w	r2, r3, #12
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	009b      	lsls	r3, r3, #2
 800186c:	429a      	cmp	r2, r3
 800186e:	d1eb      	bne.n	8001848 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001870:	4b25      	ldr	r3, [pc, #148]	@ (8001908 <HAL_RCC_ClockConfig+0x1b8>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f003 0307 	and.w	r3, r3, #7
 8001878:	683a      	ldr	r2, [r7, #0]
 800187a:	429a      	cmp	r2, r3
 800187c:	d20c      	bcs.n	8001898 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800187e:	4b22      	ldr	r3, [pc, #136]	@ (8001908 <HAL_RCC_ClockConfig+0x1b8>)
 8001880:	683a      	ldr	r2, [r7, #0]
 8001882:	b2d2      	uxtb	r2, r2
 8001884:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001886:	4b20      	ldr	r3, [pc, #128]	@ (8001908 <HAL_RCC_ClockConfig+0x1b8>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f003 0307 	and.w	r3, r3, #7
 800188e:	683a      	ldr	r2, [r7, #0]
 8001890:	429a      	cmp	r2, r3
 8001892:	d001      	beq.n	8001898 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001894:	2301      	movs	r3, #1
 8001896:	e032      	b.n	80018fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f003 0304 	and.w	r3, r3, #4
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d008      	beq.n	80018b6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018a4:	4b19      	ldr	r3, [pc, #100]	@ (800190c <HAL_RCC_ClockConfig+0x1bc>)
 80018a6:	689b      	ldr	r3, [r3, #8]
 80018a8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	68db      	ldr	r3, [r3, #12]
 80018b0:	4916      	ldr	r1, [pc, #88]	@ (800190c <HAL_RCC_ClockConfig+0x1bc>)
 80018b2:	4313      	orrs	r3, r2
 80018b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f003 0308 	and.w	r3, r3, #8
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d009      	beq.n	80018d6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80018c2:	4b12      	ldr	r3, [pc, #72]	@ (800190c <HAL_RCC_ClockConfig+0x1bc>)
 80018c4:	689b      	ldr	r3, [r3, #8]
 80018c6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	691b      	ldr	r3, [r3, #16]
 80018ce:	00db      	lsls	r3, r3, #3
 80018d0:	490e      	ldr	r1, [pc, #56]	@ (800190c <HAL_RCC_ClockConfig+0x1bc>)
 80018d2:	4313      	orrs	r3, r2
 80018d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80018d6:	f000 f821 	bl	800191c <HAL_RCC_GetSysClockFreq>
 80018da:	4602      	mov	r2, r0
 80018dc:	4b0b      	ldr	r3, [pc, #44]	@ (800190c <HAL_RCC_ClockConfig+0x1bc>)
 80018de:	689b      	ldr	r3, [r3, #8]
 80018e0:	091b      	lsrs	r3, r3, #4
 80018e2:	f003 030f 	and.w	r3, r3, #15
 80018e6:	490a      	ldr	r1, [pc, #40]	@ (8001910 <HAL_RCC_ClockConfig+0x1c0>)
 80018e8:	5ccb      	ldrb	r3, [r1, r3]
 80018ea:	fa22 f303 	lsr.w	r3, r2, r3
 80018ee:	4a09      	ldr	r2, [pc, #36]	@ (8001914 <HAL_RCC_ClockConfig+0x1c4>)
 80018f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80018f2:	4b09      	ldr	r3, [pc, #36]	@ (8001918 <HAL_RCC_ClockConfig+0x1c8>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4618      	mov	r0, r3
 80018f8:	f7ff f906 	bl	8000b08 <HAL_InitTick>

  return HAL_OK;
 80018fc:	2300      	movs	r3, #0
}
 80018fe:	4618      	mov	r0, r3
 8001900:	3710      	adds	r7, #16
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	40023c00 	.word	0x40023c00
 800190c:	40023800 	.word	0x40023800
 8001910:	08003478 	.word	0x08003478
 8001914:	20000034 	.word	0x20000034
 8001918:	20000038 	.word	0x20000038

0800191c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800191c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001920:	b094      	sub	sp, #80	@ 0x50
 8001922:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001924:	2300      	movs	r3, #0
 8001926:	647b      	str	r3, [r7, #68]	@ 0x44
 8001928:	2300      	movs	r3, #0
 800192a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800192c:	2300      	movs	r3, #0
 800192e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001930:	2300      	movs	r3, #0
 8001932:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001934:	4b79      	ldr	r3, [pc, #484]	@ (8001b1c <HAL_RCC_GetSysClockFreq+0x200>)
 8001936:	689b      	ldr	r3, [r3, #8]
 8001938:	f003 030c 	and.w	r3, r3, #12
 800193c:	2b08      	cmp	r3, #8
 800193e:	d00d      	beq.n	800195c <HAL_RCC_GetSysClockFreq+0x40>
 8001940:	2b08      	cmp	r3, #8
 8001942:	f200 80e1 	bhi.w	8001b08 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001946:	2b00      	cmp	r3, #0
 8001948:	d002      	beq.n	8001950 <HAL_RCC_GetSysClockFreq+0x34>
 800194a:	2b04      	cmp	r3, #4
 800194c:	d003      	beq.n	8001956 <HAL_RCC_GetSysClockFreq+0x3a>
 800194e:	e0db      	b.n	8001b08 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001950:	4b73      	ldr	r3, [pc, #460]	@ (8001b20 <HAL_RCC_GetSysClockFreq+0x204>)
 8001952:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8001954:	e0db      	b.n	8001b0e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001956:	4b73      	ldr	r3, [pc, #460]	@ (8001b24 <HAL_RCC_GetSysClockFreq+0x208>)
 8001958:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800195a:	e0d8      	b.n	8001b0e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800195c:	4b6f      	ldr	r3, [pc, #444]	@ (8001b1c <HAL_RCC_GetSysClockFreq+0x200>)
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001964:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001966:	4b6d      	ldr	r3, [pc, #436]	@ (8001b1c <HAL_RCC_GetSysClockFreq+0x200>)
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800196e:	2b00      	cmp	r3, #0
 8001970:	d063      	beq.n	8001a3a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001972:	4b6a      	ldr	r3, [pc, #424]	@ (8001b1c <HAL_RCC_GetSysClockFreq+0x200>)
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	099b      	lsrs	r3, r3, #6
 8001978:	2200      	movs	r2, #0
 800197a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800197c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800197e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001980:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001984:	633b      	str	r3, [r7, #48]	@ 0x30
 8001986:	2300      	movs	r3, #0
 8001988:	637b      	str	r3, [r7, #52]	@ 0x34
 800198a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800198e:	4622      	mov	r2, r4
 8001990:	462b      	mov	r3, r5
 8001992:	f04f 0000 	mov.w	r0, #0
 8001996:	f04f 0100 	mov.w	r1, #0
 800199a:	0159      	lsls	r1, r3, #5
 800199c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80019a0:	0150      	lsls	r0, r2, #5
 80019a2:	4602      	mov	r2, r0
 80019a4:	460b      	mov	r3, r1
 80019a6:	4621      	mov	r1, r4
 80019a8:	1a51      	subs	r1, r2, r1
 80019aa:	6139      	str	r1, [r7, #16]
 80019ac:	4629      	mov	r1, r5
 80019ae:	eb63 0301 	sbc.w	r3, r3, r1
 80019b2:	617b      	str	r3, [r7, #20]
 80019b4:	f04f 0200 	mov.w	r2, #0
 80019b8:	f04f 0300 	mov.w	r3, #0
 80019bc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80019c0:	4659      	mov	r1, fp
 80019c2:	018b      	lsls	r3, r1, #6
 80019c4:	4651      	mov	r1, sl
 80019c6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80019ca:	4651      	mov	r1, sl
 80019cc:	018a      	lsls	r2, r1, #6
 80019ce:	4651      	mov	r1, sl
 80019d0:	ebb2 0801 	subs.w	r8, r2, r1
 80019d4:	4659      	mov	r1, fp
 80019d6:	eb63 0901 	sbc.w	r9, r3, r1
 80019da:	f04f 0200 	mov.w	r2, #0
 80019de:	f04f 0300 	mov.w	r3, #0
 80019e2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80019e6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80019ea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80019ee:	4690      	mov	r8, r2
 80019f0:	4699      	mov	r9, r3
 80019f2:	4623      	mov	r3, r4
 80019f4:	eb18 0303 	adds.w	r3, r8, r3
 80019f8:	60bb      	str	r3, [r7, #8]
 80019fa:	462b      	mov	r3, r5
 80019fc:	eb49 0303 	adc.w	r3, r9, r3
 8001a00:	60fb      	str	r3, [r7, #12]
 8001a02:	f04f 0200 	mov.w	r2, #0
 8001a06:	f04f 0300 	mov.w	r3, #0
 8001a0a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001a0e:	4629      	mov	r1, r5
 8001a10:	024b      	lsls	r3, r1, #9
 8001a12:	4621      	mov	r1, r4
 8001a14:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001a18:	4621      	mov	r1, r4
 8001a1a:	024a      	lsls	r2, r1, #9
 8001a1c:	4610      	mov	r0, r2
 8001a1e:	4619      	mov	r1, r3
 8001a20:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001a22:	2200      	movs	r2, #0
 8001a24:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001a26:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001a28:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001a2c:	f7fe fc28 	bl	8000280 <__aeabi_uldivmod>
 8001a30:	4602      	mov	r2, r0
 8001a32:	460b      	mov	r3, r1
 8001a34:	4613      	mov	r3, r2
 8001a36:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001a38:	e058      	b.n	8001aec <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a3a:	4b38      	ldr	r3, [pc, #224]	@ (8001b1c <HAL_RCC_GetSysClockFreq+0x200>)
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	099b      	lsrs	r3, r3, #6
 8001a40:	2200      	movs	r2, #0
 8001a42:	4618      	mov	r0, r3
 8001a44:	4611      	mov	r1, r2
 8001a46:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001a4a:	623b      	str	r3, [r7, #32]
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a50:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001a54:	4642      	mov	r2, r8
 8001a56:	464b      	mov	r3, r9
 8001a58:	f04f 0000 	mov.w	r0, #0
 8001a5c:	f04f 0100 	mov.w	r1, #0
 8001a60:	0159      	lsls	r1, r3, #5
 8001a62:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a66:	0150      	lsls	r0, r2, #5
 8001a68:	4602      	mov	r2, r0
 8001a6a:	460b      	mov	r3, r1
 8001a6c:	4641      	mov	r1, r8
 8001a6e:	ebb2 0a01 	subs.w	sl, r2, r1
 8001a72:	4649      	mov	r1, r9
 8001a74:	eb63 0b01 	sbc.w	fp, r3, r1
 8001a78:	f04f 0200 	mov.w	r2, #0
 8001a7c:	f04f 0300 	mov.w	r3, #0
 8001a80:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001a84:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001a88:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001a8c:	ebb2 040a 	subs.w	r4, r2, sl
 8001a90:	eb63 050b 	sbc.w	r5, r3, fp
 8001a94:	f04f 0200 	mov.w	r2, #0
 8001a98:	f04f 0300 	mov.w	r3, #0
 8001a9c:	00eb      	lsls	r3, r5, #3
 8001a9e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001aa2:	00e2      	lsls	r2, r4, #3
 8001aa4:	4614      	mov	r4, r2
 8001aa6:	461d      	mov	r5, r3
 8001aa8:	4643      	mov	r3, r8
 8001aaa:	18e3      	adds	r3, r4, r3
 8001aac:	603b      	str	r3, [r7, #0]
 8001aae:	464b      	mov	r3, r9
 8001ab0:	eb45 0303 	adc.w	r3, r5, r3
 8001ab4:	607b      	str	r3, [r7, #4]
 8001ab6:	f04f 0200 	mov.w	r2, #0
 8001aba:	f04f 0300 	mov.w	r3, #0
 8001abe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001ac2:	4629      	mov	r1, r5
 8001ac4:	028b      	lsls	r3, r1, #10
 8001ac6:	4621      	mov	r1, r4
 8001ac8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001acc:	4621      	mov	r1, r4
 8001ace:	028a      	lsls	r2, r1, #10
 8001ad0:	4610      	mov	r0, r2
 8001ad2:	4619      	mov	r1, r3
 8001ad4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	61bb      	str	r3, [r7, #24]
 8001ada:	61fa      	str	r2, [r7, #28]
 8001adc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001ae0:	f7fe fbce 	bl	8000280 <__aeabi_uldivmod>
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	460b      	mov	r3, r1
 8001ae8:	4613      	mov	r3, r2
 8001aea:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001aec:	4b0b      	ldr	r3, [pc, #44]	@ (8001b1c <HAL_RCC_GetSysClockFreq+0x200>)
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	0c1b      	lsrs	r3, r3, #16
 8001af2:	f003 0303 	and.w	r3, r3, #3
 8001af6:	3301      	adds	r3, #1
 8001af8:	005b      	lsls	r3, r3, #1
 8001afa:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8001afc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001afe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001b00:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b04:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001b06:	e002      	b.n	8001b0e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001b08:	4b05      	ldr	r3, [pc, #20]	@ (8001b20 <HAL_RCC_GetSysClockFreq+0x204>)
 8001b0a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001b0c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b0e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001b10:	4618      	mov	r0, r3
 8001b12:	3750      	adds	r7, #80	@ 0x50
 8001b14:	46bd      	mov	sp, r7
 8001b16:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001b1a:	bf00      	nop
 8001b1c:	40023800 	.word	0x40023800
 8001b20:	00f42400 	.word	0x00f42400
 8001b24:	007a1200 	.word	0x007a1200

08001b28 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b2c:	4b03      	ldr	r3, [pc, #12]	@ (8001b3c <HAL_RCC_GetHCLKFreq+0x14>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
}
 8001b30:	4618      	mov	r0, r3
 8001b32:	46bd      	mov	sp, r7
 8001b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b38:	4770      	bx	lr
 8001b3a:	bf00      	nop
 8001b3c:	20000034 	.word	0x20000034

08001b40 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001b44:	f7ff fff0 	bl	8001b28 <HAL_RCC_GetHCLKFreq>
 8001b48:	4602      	mov	r2, r0
 8001b4a:	4b05      	ldr	r3, [pc, #20]	@ (8001b60 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b4c:	689b      	ldr	r3, [r3, #8]
 8001b4e:	0a9b      	lsrs	r3, r3, #10
 8001b50:	f003 0307 	and.w	r3, r3, #7
 8001b54:	4903      	ldr	r1, [pc, #12]	@ (8001b64 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b56:	5ccb      	ldrb	r3, [r1, r3]
 8001b58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	bd80      	pop	{r7, pc}
 8001b60:	40023800 	.word	0x40023800
 8001b64:	08003488 	.word	0x08003488

08001b68 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001b6c:	f7ff ffdc 	bl	8001b28 <HAL_RCC_GetHCLKFreq>
 8001b70:	4602      	mov	r2, r0
 8001b72:	4b05      	ldr	r3, [pc, #20]	@ (8001b88 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001b74:	689b      	ldr	r3, [r3, #8]
 8001b76:	0b5b      	lsrs	r3, r3, #13
 8001b78:	f003 0307 	and.w	r3, r3, #7
 8001b7c:	4903      	ldr	r1, [pc, #12]	@ (8001b8c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b7e:	5ccb      	ldrb	r3, [r1, r3]
 8001b80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b84:	4618      	mov	r0, r3
 8001b86:	bd80      	pop	{r7, pc}
 8001b88:	40023800 	.word	0x40023800
 8001b8c:	08003488 	.word	0x08003488

08001b90 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b082      	sub	sp, #8
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d101      	bne.n	8001ba2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	e042      	b.n	8001c28 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001ba8:	b2db      	uxtb	r3, r3
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d106      	bne.n	8001bbc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001bb6:	6878      	ldr	r0, [r7, #4]
 8001bb8:	f7fe fe88 	bl	80008cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2224      	movs	r2, #36	@ 0x24
 8001bc0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	68da      	ldr	r2, [r3, #12]
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001bd2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001bd4:	6878      	ldr	r0, [r7, #4]
 8001bd6:	f000 fd11 	bl	80025fc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	691a      	ldr	r2, [r3, #16]
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001be8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	695a      	ldr	r2, [r3, #20]
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001bf8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	68da      	ldr	r2, [r3, #12]
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001c08:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2220      	movs	r2, #32
 8001c14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2220      	movs	r2, #32
 8001c1c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2200      	movs	r2, #0
 8001c24:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8001c26:	2300      	movs	r3, #0
}
 8001c28:	4618      	mov	r0, r3
 8001c2a:	3708      	adds	r7, #8
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bd80      	pop	{r7, pc}

08001c30 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8001c30:	b480      	push	{r7}
 8001c32:	b085      	sub	sp, #20
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	60f8      	str	r0, [r7, #12]
 8001c38:	60b9      	str	r1, [r7, #8]
 8001c3a:	4613      	mov	r3, r2
 8001c3c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001c44:	b2db      	uxtb	r3, r3
 8001c46:	2b20      	cmp	r3, #32
 8001c48:	d121      	bne.n	8001c8e <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 8001c4a:	68bb      	ldr	r3, [r7, #8]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d002      	beq.n	8001c56 <HAL_UART_Transmit_IT+0x26>
 8001c50:	88fb      	ldrh	r3, [r7, #6]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d101      	bne.n	8001c5a <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8001c56:	2301      	movs	r3, #1
 8001c58:	e01a      	b.n	8001c90 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	68ba      	ldr	r2, [r7, #8]
 8001c5e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	88fa      	ldrh	r2, [r7, #6]
 8001c64:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	88fa      	ldrh	r2, [r7, #6]
 8001c6a:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	2200      	movs	r2, #0
 8001c70:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	2221      	movs	r2, #33	@ 0x21
 8001c76:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	68da      	ldr	r2, [r3, #12]
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001c88:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	e000      	b.n	8001c90 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 8001c8e:	2302      	movs	r3, #2
  }
}
 8001c90:	4618      	mov	r0, r3
 8001c92:	3714      	adds	r7, #20
 8001c94:	46bd      	mov	sp, r7
 8001c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9a:	4770      	bx	lr

08001c9c <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b084      	sub	sp, #16
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	60f8      	str	r0, [r7, #12]
 8001ca4:	60b9      	str	r1, [r7, #8]
 8001ca6:	4613      	mov	r3, r2
 8001ca8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001cb0:	b2db      	uxtb	r3, r3
 8001cb2:	2b20      	cmp	r3, #32
 8001cb4:	d112      	bne.n	8001cdc <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8001cb6:	68bb      	ldr	r3, [r7, #8]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d002      	beq.n	8001cc2 <HAL_UART_Receive_IT+0x26>
 8001cbc:	88fb      	ldrh	r3, [r7, #6]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d101      	bne.n	8001cc6 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	e00b      	b.n	8001cde <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	2200      	movs	r2, #0
 8001cca:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8001ccc:	88fb      	ldrh	r3, [r7, #6]
 8001cce:	461a      	mov	r2, r3
 8001cd0:	68b9      	ldr	r1, [r7, #8]
 8001cd2:	68f8      	ldr	r0, [r7, #12]
 8001cd4:	f000 faba 	bl	800224c <UART_Start_Receive_IT>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	e000      	b.n	8001cde <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8001cdc:	2302      	movs	r3, #2
  }
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	3710      	adds	r7, #16
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}
	...

08001ce8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b0ba      	sub	sp, #232	@ 0xe8
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	68db      	ldr	r3, [r3, #12]
 8001d00:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	695b      	ldr	r3, [r3, #20]
 8001d0a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8001d14:	2300      	movs	r3, #0
 8001d16:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001d1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001d1e:	f003 030f 	and.w	r3, r3, #15
 8001d22:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8001d26:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d10f      	bne.n	8001d4e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001d2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001d32:	f003 0320 	and.w	r3, r3, #32
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d009      	beq.n	8001d4e <HAL_UART_IRQHandler+0x66>
 8001d3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001d3e:	f003 0320 	and.w	r3, r3, #32
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d003      	beq.n	8001d4e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8001d46:	6878      	ldr	r0, [r7, #4]
 8001d48:	f000 fb99 	bl	800247e <UART_Receive_IT>
      return;
 8001d4c:	e25b      	b.n	8002206 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8001d4e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	f000 80de 	beq.w	8001f14 <HAL_UART_IRQHandler+0x22c>
 8001d58:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001d5c:	f003 0301 	and.w	r3, r3, #1
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d106      	bne.n	8001d72 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001d64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001d68:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	f000 80d1 	beq.w	8001f14 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001d72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001d76:	f003 0301 	and.w	r3, r3, #1
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d00b      	beq.n	8001d96 <HAL_UART_IRQHandler+0xae>
 8001d7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001d82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d005      	beq.n	8001d96 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d8e:	f043 0201 	orr.w	r2, r3, #1
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001d96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001d9a:	f003 0304 	and.w	r3, r3, #4
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d00b      	beq.n	8001dba <HAL_UART_IRQHandler+0xd2>
 8001da2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001da6:	f003 0301 	and.w	r3, r3, #1
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d005      	beq.n	8001dba <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001db2:	f043 0202 	orr.w	r2, r3, #2
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001dba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001dbe:	f003 0302 	and.w	r3, r3, #2
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d00b      	beq.n	8001dde <HAL_UART_IRQHandler+0xf6>
 8001dc6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001dca:	f003 0301 	and.w	r3, r3, #1
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d005      	beq.n	8001dde <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dd6:	f043 0204 	orr.w	r2, r3, #4
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8001dde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001de2:	f003 0308 	and.w	r3, r3, #8
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d011      	beq.n	8001e0e <HAL_UART_IRQHandler+0x126>
 8001dea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001dee:	f003 0320 	and.w	r3, r3, #32
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d105      	bne.n	8001e02 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8001df6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001dfa:	f003 0301 	and.w	r3, r3, #1
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d005      	beq.n	8001e0e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e06:	f043 0208 	orr.w	r2, r3, #8
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	f000 81f2 	beq.w	80021fc <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001e18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001e1c:	f003 0320 	and.w	r3, r3, #32
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d008      	beq.n	8001e36 <HAL_UART_IRQHandler+0x14e>
 8001e24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001e28:	f003 0320 	and.w	r3, r3, #32
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d002      	beq.n	8001e36 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8001e30:	6878      	ldr	r0, [r7, #4]
 8001e32:	f000 fb24 	bl	800247e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	695b      	ldr	r3, [r3, #20]
 8001e3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e40:	2b40      	cmp	r3, #64	@ 0x40
 8001e42:	bf0c      	ite	eq
 8001e44:	2301      	moveq	r3, #1
 8001e46:	2300      	movne	r3, #0
 8001e48:	b2db      	uxtb	r3, r3
 8001e4a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e52:	f003 0308 	and.w	r3, r3, #8
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d103      	bne.n	8001e62 <HAL_UART_IRQHandler+0x17a>
 8001e5a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d04f      	beq.n	8001f02 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001e62:	6878      	ldr	r0, [r7, #4]
 8001e64:	f000 fa2c 	bl	80022c0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	695b      	ldr	r3, [r3, #20]
 8001e6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e72:	2b40      	cmp	r3, #64	@ 0x40
 8001e74:	d141      	bne.n	8001efa <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	3314      	adds	r3, #20
 8001e7c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001e80:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001e84:	e853 3f00 	ldrex	r3, [r3]
 8001e88:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8001e8c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001e90:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001e94:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	3314      	adds	r3, #20
 8001e9e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8001ea2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8001ea6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001eaa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8001eae:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8001eb2:	e841 2300 	strex	r3, r2, [r1]
 8001eb6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8001eba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d1d9      	bne.n	8001e76 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d013      	beq.n	8001ef2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ece:	4a7e      	ldr	r2, [pc, #504]	@ (80020c8 <HAL_UART_IRQHandler+0x3e0>)
 8001ed0:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f7fe ffe7 	bl	8000eaa <HAL_DMA_Abort_IT>
 8001edc:	4603      	mov	r3, r0
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d016      	beq.n	8001f10 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ee6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001ee8:	687a      	ldr	r2, [r7, #4]
 8001eea:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001eec:	4610      	mov	r0, r2
 8001eee:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001ef0:	e00e      	b.n	8001f10 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8001ef2:	6878      	ldr	r0, [r7, #4]
 8001ef4:	f000 f994 	bl	8002220 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001ef8:	e00a      	b.n	8001f10 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8001efa:	6878      	ldr	r0, [r7, #4]
 8001efc:	f000 f990 	bl	8002220 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001f00:	e006      	b.n	8001f10 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8001f02:	6878      	ldr	r0, [r7, #4]
 8001f04:	f000 f98c 	bl	8002220 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8001f0e:	e175      	b.n	80021fc <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001f10:	bf00      	nop
    return;
 8001f12:	e173      	b.n	80021fc <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f18:	2b01      	cmp	r3, #1
 8001f1a:	f040 814f 	bne.w	80021bc <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8001f1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001f22:	f003 0310 	and.w	r3, r3, #16
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	f000 8148 	beq.w	80021bc <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8001f2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001f30:	f003 0310 	and.w	r3, r3, #16
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	f000 8141 	beq.w	80021bc <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	60bb      	str	r3, [r7, #8]
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	60bb      	str	r3, [r7, #8]
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	60bb      	str	r3, [r7, #8]
 8001f4e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	695b      	ldr	r3, [r3, #20]
 8001f56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f5a:	2b40      	cmp	r3, #64	@ 0x40
 8001f5c:	f040 80b6 	bne.w	80020cc <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8001f6c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	f000 8145 	beq.w	8002200 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8001f7a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8001f7e:	429a      	cmp	r2, r3
 8001f80:	f080 813e 	bcs.w	8002200 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8001f8a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f90:	69db      	ldr	r3, [r3, #28]
 8001f92:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001f96:	f000 8088 	beq.w	80020aa <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	330c      	adds	r3, #12
 8001fa0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001fa4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001fa8:	e853 3f00 	ldrex	r3, [r3]
 8001fac:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8001fb0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001fb4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001fb8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	330c      	adds	r3, #12
 8001fc2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8001fc6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8001fca:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001fce:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8001fd2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8001fd6:	e841 2300 	strex	r3, r2, [r1]
 8001fda:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8001fde:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d1d9      	bne.n	8001f9a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	3314      	adds	r3, #20
 8001fec:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001fee:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001ff0:	e853 3f00 	ldrex	r3, [r3]
 8001ff4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8001ff6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001ff8:	f023 0301 	bic.w	r3, r3, #1
 8001ffc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	3314      	adds	r3, #20
 8002006:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800200a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800200e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002010:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002012:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002016:	e841 2300 	strex	r3, r2, [r1]
 800201a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800201c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800201e:	2b00      	cmp	r3, #0
 8002020:	d1e1      	bne.n	8001fe6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	3314      	adds	r3, #20
 8002028:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800202a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800202c:	e853 3f00 	ldrex	r3, [r3]
 8002030:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8002032:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002034:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002038:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	3314      	adds	r3, #20
 8002042:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8002046:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002048:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800204a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800204c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800204e:	e841 2300 	strex	r3, r2, [r1]
 8002052:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8002054:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002056:	2b00      	cmp	r3, #0
 8002058:	d1e3      	bne.n	8002022 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2220      	movs	r2, #32
 800205e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2200      	movs	r2, #0
 8002066:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	330c      	adds	r3, #12
 800206e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002070:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002072:	e853 3f00 	ldrex	r3, [r3]
 8002076:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002078:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800207a:	f023 0310 	bic.w	r3, r3, #16
 800207e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	330c      	adds	r3, #12
 8002088:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800208c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800208e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002090:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002092:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002094:	e841 2300 	strex	r3, r2, [r1]
 8002098:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800209a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800209c:	2b00      	cmp	r3, #0
 800209e:	d1e3      	bne.n	8002068 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80020a4:	4618      	mov	r0, r3
 80020a6:	f7fe fe90 	bl	8000dca <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2202      	movs	r2, #2
 80020ae:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80020b8:	b29b      	uxth	r3, r3
 80020ba:	1ad3      	subs	r3, r2, r3
 80020bc:	b29b      	uxth	r3, r3
 80020be:	4619      	mov	r1, r3
 80020c0:	6878      	ldr	r0, [r7, #4]
 80020c2:	f000 f8b7 	bl	8002234 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80020c6:	e09b      	b.n	8002200 <HAL_UART_IRQHandler+0x518>
 80020c8:	08002387 	.word	0x08002387
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80020d4:	b29b      	uxth	r3, r3
 80020d6:	1ad3      	subs	r3, r2, r3
 80020d8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80020e0:	b29b      	uxth	r3, r3
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	f000 808e 	beq.w	8002204 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80020e8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	f000 8089 	beq.w	8002204 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	330c      	adds	r3, #12
 80020f8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80020fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80020fc:	e853 3f00 	ldrex	r3, [r3]
 8002100:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002102:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002104:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002108:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	330c      	adds	r3, #12
 8002112:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8002116:	647a      	str	r2, [r7, #68]	@ 0x44
 8002118:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800211a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800211c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800211e:	e841 2300 	strex	r3, r2, [r1]
 8002122:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002124:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002126:	2b00      	cmp	r3, #0
 8002128:	d1e3      	bne.n	80020f2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	3314      	adds	r3, #20
 8002130:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002132:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002134:	e853 3f00 	ldrex	r3, [r3]
 8002138:	623b      	str	r3, [r7, #32]
   return(result);
 800213a:	6a3b      	ldr	r3, [r7, #32]
 800213c:	f023 0301 	bic.w	r3, r3, #1
 8002140:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	3314      	adds	r3, #20
 800214a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800214e:	633a      	str	r2, [r7, #48]	@ 0x30
 8002150:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002152:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002154:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002156:	e841 2300 	strex	r3, r2, [r1]
 800215a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800215c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800215e:	2b00      	cmp	r3, #0
 8002160:	d1e3      	bne.n	800212a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2220      	movs	r2, #32
 8002166:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	2200      	movs	r2, #0
 800216e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	330c      	adds	r3, #12
 8002176:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002178:	693b      	ldr	r3, [r7, #16]
 800217a:	e853 3f00 	ldrex	r3, [r3]
 800217e:	60fb      	str	r3, [r7, #12]
   return(result);
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	f023 0310 	bic.w	r3, r3, #16
 8002186:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	330c      	adds	r3, #12
 8002190:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8002194:	61fa      	str	r2, [r7, #28]
 8002196:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002198:	69b9      	ldr	r1, [r7, #24]
 800219a:	69fa      	ldr	r2, [r7, #28]
 800219c:	e841 2300 	strex	r3, r2, [r1]
 80021a0:	617b      	str	r3, [r7, #20]
   return(result);
 80021a2:	697b      	ldr	r3, [r7, #20]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d1e3      	bne.n	8002170 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2202      	movs	r2, #2
 80021ac:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80021ae:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80021b2:	4619      	mov	r1, r3
 80021b4:	6878      	ldr	r0, [r7, #4]
 80021b6:	f000 f83d 	bl	8002234 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80021ba:	e023      	b.n	8002204 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80021bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80021c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d009      	beq.n	80021dc <HAL_UART_IRQHandler+0x4f4>
 80021c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80021cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d003      	beq.n	80021dc <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80021d4:	6878      	ldr	r0, [r7, #4]
 80021d6:	f000 f8ea 	bl	80023ae <UART_Transmit_IT>
    return;
 80021da:	e014      	b.n	8002206 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80021dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80021e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d00e      	beq.n	8002206 <HAL_UART_IRQHandler+0x51e>
 80021e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80021ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d008      	beq.n	8002206 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80021f4:	6878      	ldr	r0, [r7, #4]
 80021f6:	f000 f92a 	bl	800244e <UART_EndTransmit_IT>
    return;
 80021fa:	e004      	b.n	8002206 <HAL_UART_IRQHandler+0x51e>
    return;
 80021fc:	bf00      	nop
 80021fe:	e002      	b.n	8002206 <HAL_UART_IRQHandler+0x51e>
      return;
 8002200:	bf00      	nop
 8002202:	e000      	b.n	8002206 <HAL_UART_IRQHandler+0x51e>
      return;
 8002204:	bf00      	nop
  }
}
 8002206:	37e8      	adds	r7, #232	@ 0xe8
 8002208:	46bd      	mov	sp, r7
 800220a:	bd80      	pop	{r7, pc}

0800220c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800220c:	b480      	push	{r7}
 800220e:	b083      	sub	sp, #12
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002214:	bf00      	nop
 8002216:	370c      	adds	r7, #12
 8002218:	46bd      	mov	sp, r7
 800221a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221e:	4770      	bx	lr

08002220 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002220:	b480      	push	{r7}
 8002222:	b083      	sub	sp, #12
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002228:	bf00      	nop
 800222a:	370c      	adds	r7, #12
 800222c:	46bd      	mov	sp, r7
 800222e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002232:	4770      	bx	lr

08002234 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002234:	b480      	push	{r7}
 8002236:	b083      	sub	sp, #12
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
 800223c:	460b      	mov	r3, r1
 800223e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002240:	bf00      	nop
 8002242:	370c      	adds	r7, #12
 8002244:	46bd      	mov	sp, r7
 8002246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224a:	4770      	bx	lr

0800224c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800224c:	b480      	push	{r7}
 800224e:	b085      	sub	sp, #20
 8002250:	af00      	add	r7, sp, #0
 8002252:	60f8      	str	r0, [r7, #12]
 8002254:	60b9      	str	r1, [r7, #8]
 8002256:	4613      	mov	r3, r2
 8002258:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	68ba      	ldr	r2, [r7, #8]
 800225e:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	88fa      	ldrh	r2, [r7, #6]
 8002264:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	88fa      	ldrh	r2, [r7, #6]
 800226a:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	2200      	movs	r2, #0
 8002270:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	2222      	movs	r2, #34	@ 0x22
 8002276:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	691b      	ldr	r3, [r3, #16]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d007      	beq.n	8002292 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	68da      	ldr	r2, [r3, #12]
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002290:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	695a      	ldr	r2, [r3, #20]
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f042 0201 	orr.w	r2, r2, #1
 80022a0:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	68da      	ldr	r2, [r3, #12]
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f042 0220 	orr.w	r2, r2, #32
 80022b0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80022b2:	2300      	movs	r3, #0
}
 80022b4:	4618      	mov	r0, r3
 80022b6:	3714      	adds	r7, #20
 80022b8:	46bd      	mov	sp, r7
 80022ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022be:	4770      	bx	lr

080022c0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80022c0:	b480      	push	{r7}
 80022c2:	b095      	sub	sp, #84	@ 0x54
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	330c      	adds	r3, #12
 80022ce:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80022d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80022d2:	e853 3f00 	ldrex	r3, [r3]
 80022d6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80022d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022da:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80022de:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	330c      	adds	r3, #12
 80022e6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80022e8:	643a      	str	r2, [r7, #64]	@ 0x40
 80022ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80022ec:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80022ee:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80022f0:	e841 2300 	strex	r3, r2, [r1]
 80022f4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80022f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d1e5      	bne.n	80022c8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	3314      	adds	r3, #20
 8002302:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002304:	6a3b      	ldr	r3, [r7, #32]
 8002306:	e853 3f00 	ldrex	r3, [r3]
 800230a:	61fb      	str	r3, [r7, #28]
   return(result);
 800230c:	69fb      	ldr	r3, [r7, #28]
 800230e:	f023 0301 	bic.w	r3, r3, #1
 8002312:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	3314      	adds	r3, #20
 800231a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800231c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800231e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002320:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002322:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002324:	e841 2300 	strex	r3, r2, [r1]
 8002328:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800232a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800232c:	2b00      	cmp	r3, #0
 800232e:	d1e5      	bne.n	80022fc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002334:	2b01      	cmp	r3, #1
 8002336:	d119      	bne.n	800236c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	330c      	adds	r3, #12
 800233e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	e853 3f00 	ldrex	r3, [r3]
 8002346:	60bb      	str	r3, [r7, #8]
   return(result);
 8002348:	68bb      	ldr	r3, [r7, #8]
 800234a:	f023 0310 	bic.w	r3, r3, #16
 800234e:	647b      	str	r3, [r7, #68]	@ 0x44
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	330c      	adds	r3, #12
 8002356:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002358:	61ba      	str	r2, [r7, #24]
 800235a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800235c:	6979      	ldr	r1, [r7, #20]
 800235e:	69ba      	ldr	r2, [r7, #24]
 8002360:	e841 2300 	strex	r3, r2, [r1]
 8002364:	613b      	str	r3, [r7, #16]
   return(result);
 8002366:	693b      	ldr	r3, [r7, #16]
 8002368:	2b00      	cmp	r3, #0
 800236a:	d1e5      	bne.n	8002338 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2220      	movs	r2, #32
 8002370:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2200      	movs	r2, #0
 8002378:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800237a:	bf00      	nop
 800237c:	3754      	adds	r7, #84	@ 0x54
 800237e:	46bd      	mov	sp, r7
 8002380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002384:	4770      	bx	lr

08002386 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002386:	b580      	push	{r7, lr}
 8002388:	b084      	sub	sp, #16
 800238a:	af00      	add	r7, sp, #0
 800238c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002392:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	2200      	movs	r2, #0
 8002398:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	2200      	movs	r2, #0
 800239e:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80023a0:	68f8      	ldr	r0, [r7, #12]
 80023a2:	f7ff ff3d 	bl	8002220 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80023a6:	bf00      	nop
 80023a8:	3710      	adds	r7, #16
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}

080023ae <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80023ae:	b480      	push	{r7}
 80023b0:	b085      	sub	sp, #20
 80023b2:	af00      	add	r7, sp, #0
 80023b4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80023bc:	b2db      	uxtb	r3, r3
 80023be:	2b21      	cmp	r3, #33	@ 0x21
 80023c0:	d13e      	bne.n	8002440 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	689b      	ldr	r3, [r3, #8]
 80023c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80023ca:	d114      	bne.n	80023f6 <UART_Transmit_IT+0x48>
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	691b      	ldr	r3, [r3, #16]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d110      	bne.n	80023f6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6a1b      	ldr	r3, [r3, #32]
 80023d8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	881b      	ldrh	r3, [r3, #0]
 80023de:	461a      	mov	r2, r3
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80023e8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6a1b      	ldr	r3, [r3, #32]
 80023ee:	1c9a      	adds	r2, r3, #2
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	621a      	str	r2, [r3, #32]
 80023f4:	e008      	b.n	8002408 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6a1b      	ldr	r3, [r3, #32]
 80023fa:	1c59      	adds	r1, r3, #1
 80023fc:	687a      	ldr	r2, [r7, #4]
 80023fe:	6211      	str	r1, [r2, #32]
 8002400:	781a      	ldrb	r2, [r3, #0]
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800240c:	b29b      	uxth	r3, r3
 800240e:	3b01      	subs	r3, #1
 8002410:	b29b      	uxth	r3, r3
 8002412:	687a      	ldr	r2, [r7, #4]
 8002414:	4619      	mov	r1, r3
 8002416:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8002418:	2b00      	cmp	r3, #0
 800241a:	d10f      	bne.n	800243c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	68da      	ldr	r2, [r3, #12]
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800242a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	68da      	ldr	r2, [r3, #12]
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800243a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800243c:	2300      	movs	r3, #0
 800243e:	e000      	b.n	8002442 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002440:	2302      	movs	r3, #2
  }
}
 8002442:	4618      	mov	r0, r3
 8002444:	3714      	adds	r7, #20
 8002446:	46bd      	mov	sp, r7
 8002448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244c:	4770      	bx	lr

0800244e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800244e:	b580      	push	{r7, lr}
 8002450:	b082      	sub	sp, #8
 8002452:	af00      	add	r7, sp, #0
 8002454:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	68da      	ldr	r2, [r3, #12]
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002464:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2220      	movs	r2, #32
 800246a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800246e:	6878      	ldr	r0, [r7, #4]
 8002470:	f7ff fecc 	bl	800220c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002474:	2300      	movs	r3, #0
}
 8002476:	4618      	mov	r0, r3
 8002478:	3708      	adds	r7, #8
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}

0800247e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800247e:	b580      	push	{r7, lr}
 8002480:	b08c      	sub	sp, #48	@ 0x30
 8002482:	af00      	add	r7, sp, #0
 8002484:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800248c:	b2db      	uxtb	r3, r3
 800248e:	2b22      	cmp	r3, #34	@ 0x22
 8002490:	f040 80ae 	bne.w	80025f0 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	689b      	ldr	r3, [r3, #8]
 8002498:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800249c:	d117      	bne.n	80024ce <UART_Receive_IT+0x50>
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	691b      	ldr	r3, [r3, #16]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d113      	bne.n	80024ce <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80024a6:	2300      	movs	r3, #0
 80024a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024ae:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	b29b      	uxth	r3, r3
 80024b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80024bc:	b29a      	uxth	r2, r3
 80024be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024c0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024c6:	1c9a      	adds	r2, r3, #2
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	629a      	str	r2, [r3, #40]	@ 0x28
 80024cc:	e026      	b.n	800251c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80024d4:	2300      	movs	r3, #0
 80024d6:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	689b      	ldr	r3, [r3, #8]
 80024dc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80024e0:	d007      	beq.n	80024f2 <UART_Receive_IT+0x74>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	689b      	ldr	r3, [r3, #8]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d10a      	bne.n	8002500 <UART_Receive_IT+0x82>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	691b      	ldr	r3, [r3, #16]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d106      	bne.n	8002500 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	b2da      	uxtb	r2, r3
 80024fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80024fc:	701a      	strb	r2, [r3, #0]
 80024fe:	e008      	b.n	8002512 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	b2db      	uxtb	r3, r3
 8002508:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800250c:	b2da      	uxtb	r2, r3
 800250e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002510:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002516:	1c5a      	adds	r2, r3, #1
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002520:	b29b      	uxth	r3, r3
 8002522:	3b01      	subs	r3, #1
 8002524:	b29b      	uxth	r3, r3
 8002526:	687a      	ldr	r2, [r7, #4]
 8002528:	4619      	mov	r1, r3
 800252a:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800252c:	2b00      	cmp	r3, #0
 800252e:	d15d      	bne.n	80025ec <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	68da      	ldr	r2, [r3, #12]
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f022 0220 	bic.w	r2, r2, #32
 800253e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	68da      	ldr	r2, [r3, #12]
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800254e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	695a      	ldr	r2, [r3, #20]
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f022 0201 	bic.w	r2, r2, #1
 800255e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2220      	movs	r2, #32
 8002564:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2200      	movs	r2, #0
 800256c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002572:	2b01      	cmp	r3, #1
 8002574:	d135      	bne.n	80025e2 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2200      	movs	r2, #0
 800257a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	330c      	adds	r3, #12
 8002582:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002584:	697b      	ldr	r3, [r7, #20]
 8002586:	e853 3f00 	ldrex	r3, [r3]
 800258a:	613b      	str	r3, [r7, #16]
   return(result);
 800258c:	693b      	ldr	r3, [r7, #16]
 800258e:	f023 0310 	bic.w	r3, r3, #16
 8002592:	627b      	str	r3, [r7, #36]	@ 0x24
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	330c      	adds	r3, #12
 800259a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800259c:	623a      	str	r2, [r7, #32]
 800259e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025a0:	69f9      	ldr	r1, [r7, #28]
 80025a2:	6a3a      	ldr	r2, [r7, #32]
 80025a4:	e841 2300 	strex	r3, r2, [r1]
 80025a8:	61bb      	str	r3, [r7, #24]
   return(result);
 80025aa:	69bb      	ldr	r3, [r7, #24]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d1e5      	bne.n	800257c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f003 0310 	and.w	r3, r3, #16
 80025ba:	2b10      	cmp	r3, #16
 80025bc:	d10a      	bne.n	80025d4 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80025be:	2300      	movs	r3, #0
 80025c0:	60fb      	str	r3, [r7, #12]
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	60fb      	str	r3, [r7, #12]
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	60fb      	str	r3, [r7, #12]
 80025d2:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80025d8:	4619      	mov	r1, r3
 80025da:	6878      	ldr	r0, [r7, #4]
 80025dc:	f7ff fe2a 	bl	8002234 <HAL_UARTEx_RxEventCallback>
 80025e0:	e002      	b.n	80025e8 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80025e2:	6878      	ldr	r0, [r7, #4]
 80025e4:	f7fe f912 	bl	800080c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80025e8:	2300      	movs	r3, #0
 80025ea:	e002      	b.n	80025f2 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80025ec:	2300      	movs	r3, #0
 80025ee:	e000      	b.n	80025f2 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80025f0:	2302      	movs	r3, #2
  }
}
 80025f2:	4618      	mov	r0, r3
 80025f4:	3730      	adds	r7, #48	@ 0x30
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bd80      	pop	{r7, pc}
	...

080025fc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80025fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002600:	b0c0      	sub	sp, #256	@ 0x100
 8002602:	af00      	add	r7, sp, #0
 8002604:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002608:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	691b      	ldr	r3, [r3, #16]
 8002610:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002614:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002618:	68d9      	ldr	r1, [r3, #12]
 800261a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800261e:	681a      	ldr	r2, [r3, #0]
 8002620:	ea40 0301 	orr.w	r3, r0, r1
 8002624:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002626:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800262a:	689a      	ldr	r2, [r3, #8]
 800262c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002630:	691b      	ldr	r3, [r3, #16]
 8002632:	431a      	orrs	r2, r3
 8002634:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002638:	695b      	ldr	r3, [r3, #20]
 800263a:	431a      	orrs	r2, r3
 800263c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002640:	69db      	ldr	r3, [r3, #28]
 8002642:	4313      	orrs	r3, r2
 8002644:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002648:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	68db      	ldr	r3, [r3, #12]
 8002650:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002654:	f021 010c 	bic.w	r1, r1, #12
 8002658:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800265c:	681a      	ldr	r2, [r3, #0]
 800265e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002662:	430b      	orrs	r3, r1
 8002664:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002666:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	695b      	ldr	r3, [r3, #20]
 800266e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002672:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002676:	6999      	ldr	r1, [r3, #24]
 8002678:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800267c:	681a      	ldr	r2, [r3, #0]
 800267e:	ea40 0301 	orr.w	r3, r0, r1
 8002682:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002684:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002688:	681a      	ldr	r2, [r3, #0]
 800268a:	4b8f      	ldr	r3, [pc, #572]	@ (80028c8 <UART_SetConfig+0x2cc>)
 800268c:	429a      	cmp	r2, r3
 800268e:	d005      	beq.n	800269c <UART_SetConfig+0xa0>
 8002690:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002694:	681a      	ldr	r2, [r3, #0]
 8002696:	4b8d      	ldr	r3, [pc, #564]	@ (80028cc <UART_SetConfig+0x2d0>)
 8002698:	429a      	cmp	r2, r3
 800269a:	d104      	bne.n	80026a6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800269c:	f7ff fa64 	bl	8001b68 <HAL_RCC_GetPCLK2Freq>
 80026a0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80026a4:	e003      	b.n	80026ae <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80026a6:	f7ff fa4b 	bl	8001b40 <HAL_RCC_GetPCLK1Freq>
 80026aa:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80026ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026b2:	69db      	ldr	r3, [r3, #28]
 80026b4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80026b8:	f040 810c 	bne.w	80028d4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80026bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80026c0:	2200      	movs	r2, #0
 80026c2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80026c6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80026ca:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80026ce:	4622      	mov	r2, r4
 80026d0:	462b      	mov	r3, r5
 80026d2:	1891      	adds	r1, r2, r2
 80026d4:	65b9      	str	r1, [r7, #88]	@ 0x58
 80026d6:	415b      	adcs	r3, r3
 80026d8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80026da:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80026de:	4621      	mov	r1, r4
 80026e0:	eb12 0801 	adds.w	r8, r2, r1
 80026e4:	4629      	mov	r1, r5
 80026e6:	eb43 0901 	adc.w	r9, r3, r1
 80026ea:	f04f 0200 	mov.w	r2, #0
 80026ee:	f04f 0300 	mov.w	r3, #0
 80026f2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80026f6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80026fa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80026fe:	4690      	mov	r8, r2
 8002700:	4699      	mov	r9, r3
 8002702:	4623      	mov	r3, r4
 8002704:	eb18 0303 	adds.w	r3, r8, r3
 8002708:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800270c:	462b      	mov	r3, r5
 800270e:	eb49 0303 	adc.w	r3, r9, r3
 8002712:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002716:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	2200      	movs	r2, #0
 800271e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002722:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002726:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800272a:	460b      	mov	r3, r1
 800272c:	18db      	adds	r3, r3, r3
 800272e:	653b      	str	r3, [r7, #80]	@ 0x50
 8002730:	4613      	mov	r3, r2
 8002732:	eb42 0303 	adc.w	r3, r2, r3
 8002736:	657b      	str	r3, [r7, #84]	@ 0x54
 8002738:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800273c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002740:	f7fd fd9e 	bl	8000280 <__aeabi_uldivmod>
 8002744:	4602      	mov	r2, r0
 8002746:	460b      	mov	r3, r1
 8002748:	4b61      	ldr	r3, [pc, #388]	@ (80028d0 <UART_SetConfig+0x2d4>)
 800274a:	fba3 2302 	umull	r2, r3, r3, r2
 800274e:	095b      	lsrs	r3, r3, #5
 8002750:	011c      	lsls	r4, r3, #4
 8002752:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002756:	2200      	movs	r2, #0
 8002758:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800275c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002760:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002764:	4642      	mov	r2, r8
 8002766:	464b      	mov	r3, r9
 8002768:	1891      	adds	r1, r2, r2
 800276a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800276c:	415b      	adcs	r3, r3
 800276e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002770:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002774:	4641      	mov	r1, r8
 8002776:	eb12 0a01 	adds.w	sl, r2, r1
 800277a:	4649      	mov	r1, r9
 800277c:	eb43 0b01 	adc.w	fp, r3, r1
 8002780:	f04f 0200 	mov.w	r2, #0
 8002784:	f04f 0300 	mov.w	r3, #0
 8002788:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800278c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002790:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002794:	4692      	mov	sl, r2
 8002796:	469b      	mov	fp, r3
 8002798:	4643      	mov	r3, r8
 800279a:	eb1a 0303 	adds.w	r3, sl, r3
 800279e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80027a2:	464b      	mov	r3, r9
 80027a4:	eb4b 0303 	adc.w	r3, fp, r3
 80027a8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80027ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	2200      	movs	r2, #0
 80027b4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80027b8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80027bc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80027c0:	460b      	mov	r3, r1
 80027c2:	18db      	adds	r3, r3, r3
 80027c4:	643b      	str	r3, [r7, #64]	@ 0x40
 80027c6:	4613      	mov	r3, r2
 80027c8:	eb42 0303 	adc.w	r3, r2, r3
 80027cc:	647b      	str	r3, [r7, #68]	@ 0x44
 80027ce:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80027d2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80027d6:	f7fd fd53 	bl	8000280 <__aeabi_uldivmod>
 80027da:	4602      	mov	r2, r0
 80027dc:	460b      	mov	r3, r1
 80027de:	4611      	mov	r1, r2
 80027e0:	4b3b      	ldr	r3, [pc, #236]	@ (80028d0 <UART_SetConfig+0x2d4>)
 80027e2:	fba3 2301 	umull	r2, r3, r3, r1
 80027e6:	095b      	lsrs	r3, r3, #5
 80027e8:	2264      	movs	r2, #100	@ 0x64
 80027ea:	fb02 f303 	mul.w	r3, r2, r3
 80027ee:	1acb      	subs	r3, r1, r3
 80027f0:	00db      	lsls	r3, r3, #3
 80027f2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80027f6:	4b36      	ldr	r3, [pc, #216]	@ (80028d0 <UART_SetConfig+0x2d4>)
 80027f8:	fba3 2302 	umull	r2, r3, r3, r2
 80027fc:	095b      	lsrs	r3, r3, #5
 80027fe:	005b      	lsls	r3, r3, #1
 8002800:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002804:	441c      	add	r4, r3
 8002806:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800280a:	2200      	movs	r2, #0
 800280c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002810:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002814:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002818:	4642      	mov	r2, r8
 800281a:	464b      	mov	r3, r9
 800281c:	1891      	adds	r1, r2, r2
 800281e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002820:	415b      	adcs	r3, r3
 8002822:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002824:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002828:	4641      	mov	r1, r8
 800282a:	1851      	adds	r1, r2, r1
 800282c:	6339      	str	r1, [r7, #48]	@ 0x30
 800282e:	4649      	mov	r1, r9
 8002830:	414b      	adcs	r3, r1
 8002832:	637b      	str	r3, [r7, #52]	@ 0x34
 8002834:	f04f 0200 	mov.w	r2, #0
 8002838:	f04f 0300 	mov.w	r3, #0
 800283c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002840:	4659      	mov	r1, fp
 8002842:	00cb      	lsls	r3, r1, #3
 8002844:	4651      	mov	r1, sl
 8002846:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800284a:	4651      	mov	r1, sl
 800284c:	00ca      	lsls	r2, r1, #3
 800284e:	4610      	mov	r0, r2
 8002850:	4619      	mov	r1, r3
 8002852:	4603      	mov	r3, r0
 8002854:	4642      	mov	r2, r8
 8002856:	189b      	adds	r3, r3, r2
 8002858:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800285c:	464b      	mov	r3, r9
 800285e:	460a      	mov	r2, r1
 8002860:	eb42 0303 	adc.w	r3, r2, r3
 8002864:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002868:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	2200      	movs	r2, #0
 8002870:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002874:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002878:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800287c:	460b      	mov	r3, r1
 800287e:	18db      	adds	r3, r3, r3
 8002880:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002882:	4613      	mov	r3, r2
 8002884:	eb42 0303 	adc.w	r3, r2, r3
 8002888:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800288a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800288e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002892:	f7fd fcf5 	bl	8000280 <__aeabi_uldivmod>
 8002896:	4602      	mov	r2, r0
 8002898:	460b      	mov	r3, r1
 800289a:	4b0d      	ldr	r3, [pc, #52]	@ (80028d0 <UART_SetConfig+0x2d4>)
 800289c:	fba3 1302 	umull	r1, r3, r3, r2
 80028a0:	095b      	lsrs	r3, r3, #5
 80028a2:	2164      	movs	r1, #100	@ 0x64
 80028a4:	fb01 f303 	mul.w	r3, r1, r3
 80028a8:	1ad3      	subs	r3, r2, r3
 80028aa:	00db      	lsls	r3, r3, #3
 80028ac:	3332      	adds	r3, #50	@ 0x32
 80028ae:	4a08      	ldr	r2, [pc, #32]	@ (80028d0 <UART_SetConfig+0x2d4>)
 80028b0:	fba2 2303 	umull	r2, r3, r2, r3
 80028b4:	095b      	lsrs	r3, r3, #5
 80028b6:	f003 0207 	and.w	r2, r3, #7
 80028ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4422      	add	r2, r4
 80028c2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80028c4:	e106      	b.n	8002ad4 <UART_SetConfig+0x4d8>
 80028c6:	bf00      	nop
 80028c8:	40011000 	.word	0x40011000
 80028cc:	40011400 	.word	0x40011400
 80028d0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80028d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80028d8:	2200      	movs	r2, #0
 80028da:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80028de:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80028e2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80028e6:	4642      	mov	r2, r8
 80028e8:	464b      	mov	r3, r9
 80028ea:	1891      	adds	r1, r2, r2
 80028ec:	6239      	str	r1, [r7, #32]
 80028ee:	415b      	adcs	r3, r3
 80028f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80028f2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80028f6:	4641      	mov	r1, r8
 80028f8:	1854      	adds	r4, r2, r1
 80028fa:	4649      	mov	r1, r9
 80028fc:	eb43 0501 	adc.w	r5, r3, r1
 8002900:	f04f 0200 	mov.w	r2, #0
 8002904:	f04f 0300 	mov.w	r3, #0
 8002908:	00eb      	lsls	r3, r5, #3
 800290a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800290e:	00e2      	lsls	r2, r4, #3
 8002910:	4614      	mov	r4, r2
 8002912:	461d      	mov	r5, r3
 8002914:	4643      	mov	r3, r8
 8002916:	18e3      	adds	r3, r4, r3
 8002918:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800291c:	464b      	mov	r3, r9
 800291e:	eb45 0303 	adc.w	r3, r5, r3
 8002922:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002926:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	2200      	movs	r2, #0
 800292e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002932:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002936:	f04f 0200 	mov.w	r2, #0
 800293a:	f04f 0300 	mov.w	r3, #0
 800293e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002942:	4629      	mov	r1, r5
 8002944:	008b      	lsls	r3, r1, #2
 8002946:	4621      	mov	r1, r4
 8002948:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800294c:	4621      	mov	r1, r4
 800294e:	008a      	lsls	r2, r1, #2
 8002950:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002954:	f7fd fc94 	bl	8000280 <__aeabi_uldivmod>
 8002958:	4602      	mov	r2, r0
 800295a:	460b      	mov	r3, r1
 800295c:	4b60      	ldr	r3, [pc, #384]	@ (8002ae0 <UART_SetConfig+0x4e4>)
 800295e:	fba3 2302 	umull	r2, r3, r3, r2
 8002962:	095b      	lsrs	r3, r3, #5
 8002964:	011c      	lsls	r4, r3, #4
 8002966:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800296a:	2200      	movs	r2, #0
 800296c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002970:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002974:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002978:	4642      	mov	r2, r8
 800297a:	464b      	mov	r3, r9
 800297c:	1891      	adds	r1, r2, r2
 800297e:	61b9      	str	r1, [r7, #24]
 8002980:	415b      	adcs	r3, r3
 8002982:	61fb      	str	r3, [r7, #28]
 8002984:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002988:	4641      	mov	r1, r8
 800298a:	1851      	adds	r1, r2, r1
 800298c:	6139      	str	r1, [r7, #16]
 800298e:	4649      	mov	r1, r9
 8002990:	414b      	adcs	r3, r1
 8002992:	617b      	str	r3, [r7, #20]
 8002994:	f04f 0200 	mov.w	r2, #0
 8002998:	f04f 0300 	mov.w	r3, #0
 800299c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80029a0:	4659      	mov	r1, fp
 80029a2:	00cb      	lsls	r3, r1, #3
 80029a4:	4651      	mov	r1, sl
 80029a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80029aa:	4651      	mov	r1, sl
 80029ac:	00ca      	lsls	r2, r1, #3
 80029ae:	4610      	mov	r0, r2
 80029b0:	4619      	mov	r1, r3
 80029b2:	4603      	mov	r3, r0
 80029b4:	4642      	mov	r2, r8
 80029b6:	189b      	adds	r3, r3, r2
 80029b8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80029bc:	464b      	mov	r3, r9
 80029be:	460a      	mov	r2, r1
 80029c0:	eb42 0303 	adc.w	r3, r2, r3
 80029c4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80029c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	2200      	movs	r2, #0
 80029d0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80029d2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80029d4:	f04f 0200 	mov.w	r2, #0
 80029d8:	f04f 0300 	mov.w	r3, #0
 80029dc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80029e0:	4649      	mov	r1, r9
 80029e2:	008b      	lsls	r3, r1, #2
 80029e4:	4641      	mov	r1, r8
 80029e6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80029ea:	4641      	mov	r1, r8
 80029ec:	008a      	lsls	r2, r1, #2
 80029ee:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80029f2:	f7fd fc45 	bl	8000280 <__aeabi_uldivmod>
 80029f6:	4602      	mov	r2, r0
 80029f8:	460b      	mov	r3, r1
 80029fa:	4611      	mov	r1, r2
 80029fc:	4b38      	ldr	r3, [pc, #224]	@ (8002ae0 <UART_SetConfig+0x4e4>)
 80029fe:	fba3 2301 	umull	r2, r3, r3, r1
 8002a02:	095b      	lsrs	r3, r3, #5
 8002a04:	2264      	movs	r2, #100	@ 0x64
 8002a06:	fb02 f303 	mul.w	r3, r2, r3
 8002a0a:	1acb      	subs	r3, r1, r3
 8002a0c:	011b      	lsls	r3, r3, #4
 8002a0e:	3332      	adds	r3, #50	@ 0x32
 8002a10:	4a33      	ldr	r2, [pc, #204]	@ (8002ae0 <UART_SetConfig+0x4e4>)
 8002a12:	fba2 2303 	umull	r2, r3, r2, r3
 8002a16:	095b      	lsrs	r3, r3, #5
 8002a18:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002a1c:	441c      	add	r4, r3
 8002a1e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002a22:	2200      	movs	r2, #0
 8002a24:	673b      	str	r3, [r7, #112]	@ 0x70
 8002a26:	677a      	str	r2, [r7, #116]	@ 0x74
 8002a28:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002a2c:	4642      	mov	r2, r8
 8002a2e:	464b      	mov	r3, r9
 8002a30:	1891      	adds	r1, r2, r2
 8002a32:	60b9      	str	r1, [r7, #8]
 8002a34:	415b      	adcs	r3, r3
 8002a36:	60fb      	str	r3, [r7, #12]
 8002a38:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002a3c:	4641      	mov	r1, r8
 8002a3e:	1851      	adds	r1, r2, r1
 8002a40:	6039      	str	r1, [r7, #0]
 8002a42:	4649      	mov	r1, r9
 8002a44:	414b      	adcs	r3, r1
 8002a46:	607b      	str	r3, [r7, #4]
 8002a48:	f04f 0200 	mov.w	r2, #0
 8002a4c:	f04f 0300 	mov.w	r3, #0
 8002a50:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002a54:	4659      	mov	r1, fp
 8002a56:	00cb      	lsls	r3, r1, #3
 8002a58:	4651      	mov	r1, sl
 8002a5a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002a5e:	4651      	mov	r1, sl
 8002a60:	00ca      	lsls	r2, r1, #3
 8002a62:	4610      	mov	r0, r2
 8002a64:	4619      	mov	r1, r3
 8002a66:	4603      	mov	r3, r0
 8002a68:	4642      	mov	r2, r8
 8002a6a:	189b      	adds	r3, r3, r2
 8002a6c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002a6e:	464b      	mov	r3, r9
 8002a70:	460a      	mov	r2, r1
 8002a72:	eb42 0303 	adc.w	r3, r2, r3
 8002a76:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002a78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	2200      	movs	r2, #0
 8002a80:	663b      	str	r3, [r7, #96]	@ 0x60
 8002a82:	667a      	str	r2, [r7, #100]	@ 0x64
 8002a84:	f04f 0200 	mov.w	r2, #0
 8002a88:	f04f 0300 	mov.w	r3, #0
 8002a8c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002a90:	4649      	mov	r1, r9
 8002a92:	008b      	lsls	r3, r1, #2
 8002a94:	4641      	mov	r1, r8
 8002a96:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002a9a:	4641      	mov	r1, r8
 8002a9c:	008a      	lsls	r2, r1, #2
 8002a9e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002aa2:	f7fd fbed 	bl	8000280 <__aeabi_uldivmod>
 8002aa6:	4602      	mov	r2, r0
 8002aa8:	460b      	mov	r3, r1
 8002aaa:	4b0d      	ldr	r3, [pc, #52]	@ (8002ae0 <UART_SetConfig+0x4e4>)
 8002aac:	fba3 1302 	umull	r1, r3, r3, r2
 8002ab0:	095b      	lsrs	r3, r3, #5
 8002ab2:	2164      	movs	r1, #100	@ 0x64
 8002ab4:	fb01 f303 	mul.w	r3, r1, r3
 8002ab8:	1ad3      	subs	r3, r2, r3
 8002aba:	011b      	lsls	r3, r3, #4
 8002abc:	3332      	adds	r3, #50	@ 0x32
 8002abe:	4a08      	ldr	r2, [pc, #32]	@ (8002ae0 <UART_SetConfig+0x4e4>)
 8002ac0:	fba2 2303 	umull	r2, r3, r2, r3
 8002ac4:	095b      	lsrs	r3, r3, #5
 8002ac6:	f003 020f 	and.w	r2, r3, #15
 8002aca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4422      	add	r2, r4
 8002ad2:	609a      	str	r2, [r3, #8]
}
 8002ad4:	bf00      	nop
 8002ad6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002ada:	46bd      	mov	sp, r7
 8002adc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002ae0:	51eb851f 	.word	0x51eb851f

08002ae4 <siprintf>:
 8002ae4:	b40e      	push	{r1, r2, r3}
 8002ae6:	b500      	push	{lr}
 8002ae8:	b09c      	sub	sp, #112	@ 0x70
 8002aea:	ab1d      	add	r3, sp, #116	@ 0x74
 8002aec:	9002      	str	r0, [sp, #8]
 8002aee:	9006      	str	r0, [sp, #24]
 8002af0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8002af4:	4809      	ldr	r0, [pc, #36]	@ (8002b1c <siprintf+0x38>)
 8002af6:	9107      	str	r1, [sp, #28]
 8002af8:	9104      	str	r1, [sp, #16]
 8002afa:	4909      	ldr	r1, [pc, #36]	@ (8002b20 <siprintf+0x3c>)
 8002afc:	f853 2b04 	ldr.w	r2, [r3], #4
 8002b00:	9105      	str	r1, [sp, #20]
 8002b02:	6800      	ldr	r0, [r0, #0]
 8002b04:	9301      	str	r3, [sp, #4]
 8002b06:	a902      	add	r1, sp, #8
 8002b08:	f000 f9aa 	bl	8002e60 <_svfiprintf_r>
 8002b0c:	9b02      	ldr	r3, [sp, #8]
 8002b0e:	2200      	movs	r2, #0
 8002b10:	701a      	strb	r2, [r3, #0]
 8002b12:	b01c      	add	sp, #112	@ 0x70
 8002b14:	f85d eb04 	ldr.w	lr, [sp], #4
 8002b18:	b003      	add	sp, #12
 8002b1a:	4770      	bx	lr
 8002b1c:	20000040 	.word	0x20000040
 8002b20:	ffff0208 	.word	0xffff0208

08002b24 <memset>:
 8002b24:	4402      	add	r2, r0
 8002b26:	4603      	mov	r3, r0
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	d100      	bne.n	8002b2e <memset+0xa>
 8002b2c:	4770      	bx	lr
 8002b2e:	f803 1b01 	strb.w	r1, [r3], #1
 8002b32:	e7f9      	b.n	8002b28 <memset+0x4>

08002b34 <strstr>:
 8002b34:	780a      	ldrb	r2, [r1, #0]
 8002b36:	b570      	push	{r4, r5, r6, lr}
 8002b38:	b96a      	cbnz	r2, 8002b56 <strstr+0x22>
 8002b3a:	bd70      	pop	{r4, r5, r6, pc}
 8002b3c:	429a      	cmp	r2, r3
 8002b3e:	d109      	bne.n	8002b54 <strstr+0x20>
 8002b40:	460c      	mov	r4, r1
 8002b42:	4605      	mov	r5, r0
 8002b44:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d0f6      	beq.n	8002b3a <strstr+0x6>
 8002b4c:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8002b50:	429e      	cmp	r6, r3
 8002b52:	d0f7      	beq.n	8002b44 <strstr+0x10>
 8002b54:	3001      	adds	r0, #1
 8002b56:	7803      	ldrb	r3, [r0, #0]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d1ef      	bne.n	8002b3c <strstr+0x8>
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	e7ec      	b.n	8002b3a <strstr+0x6>

08002b60 <__errno>:
 8002b60:	4b01      	ldr	r3, [pc, #4]	@ (8002b68 <__errno+0x8>)
 8002b62:	6818      	ldr	r0, [r3, #0]
 8002b64:	4770      	bx	lr
 8002b66:	bf00      	nop
 8002b68:	20000040 	.word	0x20000040

08002b6c <__libc_init_array>:
 8002b6c:	b570      	push	{r4, r5, r6, lr}
 8002b6e:	4d0d      	ldr	r5, [pc, #52]	@ (8002ba4 <__libc_init_array+0x38>)
 8002b70:	4c0d      	ldr	r4, [pc, #52]	@ (8002ba8 <__libc_init_array+0x3c>)
 8002b72:	1b64      	subs	r4, r4, r5
 8002b74:	10a4      	asrs	r4, r4, #2
 8002b76:	2600      	movs	r6, #0
 8002b78:	42a6      	cmp	r6, r4
 8002b7a:	d109      	bne.n	8002b90 <__libc_init_array+0x24>
 8002b7c:	4d0b      	ldr	r5, [pc, #44]	@ (8002bac <__libc_init_array+0x40>)
 8002b7e:	4c0c      	ldr	r4, [pc, #48]	@ (8002bb0 <__libc_init_array+0x44>)
 8002b80:	f000 fc66 	bl	8003450 <_init>
 8002b84:	1b64      	subs	r4, r4, r5
 8002b86:	10a4      	asrs	r4, r4, #2
 8002b88:	2600      	movs	r6, #0
 8002b8a:	42a6      	cmp	r6, r4
 8002b8c:	d105      	bne.n	8002b9a <__libc_init_array+0x2e>
 8002b8e:	bd70      	pop	{r4, r5, r6, pc}
 8002b90:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b94:	4798      	blx	r3
 8002b96:	3601      	adds	r6, #1
 8002b98:	e7ee      	b.n	8002b78 <__libc_init_array+0xc>
 8002b9a:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b9e:	4798      	blx	r3
 8002ba0:	3601      	adds	r6, #1
 8002ba2:	e7f2      	b.n	8002b8a <__libc_init_array+0x1e>
 8002ba4:	080034cc 	.word	0x080034cc
 8002ba8:	080034cc 	.word	0x080034cc
 8002bac:	080034cc 	.word	0x080034cc
 8002bb0:	080034d0 	.word	0x080034d0

08002bb4 <__retarget_lock_acquire_recursive>:
 8002bb4:	4770      	bx	lr

08002bb6 <__retarget_lock_release_recursive>:
 8002bb6:	4770      	bx	lr

08002bb8 <_free_r>:
 8002bb8:	b538      	push	{r3, r4, r5, lr}
 8002bba:	4605      	mov	r5, r0
 8002bbc:	2900      	cmp	r1, #0
 8002bbe:	d041      	beq.n	8002c44 <_free_r+0x8c>
 8002bc0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002bc4:	1f0c      	subs	r4, r1, #4
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	bfb8      	it	lt
 8002bca:	18e4      	addlt	r4, r4, r3
 8002bcc:	f000 f8e0 	bl	8002d90 <__malloc_lock>
 8002bd0:	4a1d      	ldr	r2, [pc, #116]	@ (8002c48 <_free_r+0x90>)
 8002bd2:	6813      	ldr	r3, [r2, #0]
 8002bd4:	b933      	cbnz	r3, 8002be4 <_free_r+0x2c>
 8002bd6:	6063      	str	r3, [r4, #4]
 8002bd8:	6014      	str	r4, [r2, #0]
 8002bda:	4628      	mov	r0, r5
 8002bdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002be0:	f000 b8dc 	b.w	8002d9c <__malloc_unlock>
 8002be4:	42a3      	cmp	r3, r4
 8002be6:	d908      	bls.n	8002bfa <_free_r+0x42>
 8002be8:	6820      	ldr	r0, [r4, #0]
 8002bea:	1821      	adds	r1, r4, r0
 8002bec:	428b      	cmp	r3, r1
 8002bee:	bf01      	itttt	eq
 8002bf0:	6819      	ldreq	r1, [r3, #0]
 8002bf2:	685b      	ldreq	r3, [r3, #4]
 8002bf4:	1809      	addeq	r1, r1, r0
 8002bf6:	6021      	streq	r1, [r4, #0]
 8002bf8:	e7ed      	b.n	8002bd6 <_free_r+0x1e>
 8002bfa:	461a      	mov	r2, r3
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	b10b      	cbz	r3, 8002c04 <_free_r+0x4c>
 8002c00:	42a3      	cmp	r3, r4
 8002c02:	d9fa      	bls.n	8002bfa <_free_r+0x42>
 8002c04:	6811      	ldr	r1, [r2, #0]
 8002c06:	1850      	adds	r0, r2, r1
 8002c08:	42a0      	cmp	r0, r4
 8002c0a:	d10b      	bne.n	8002c24 <_free_r+0x6c>
 8002c0c:	6820      	ldr	r0, [r4, #0]
 8002c0e:	4401      	add	r1, r0
 8002c10:	1850      	adds	r0, r2, r1
 8002c12:	4283      	cmp	r3, r0
 8002c14:	6011      	str	r1, [r2, #0]
 8002c16:	d1e0      	bne.n	8002bda <_free_r+0x22>
 8002c18:	6818      	ldr	r0, [r3, #0]
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	6053      	str	r3, [r2, #4]
 8002c1e:	4408      	add	r0, r1
 8002c20:	6010      	str	r0, [r2, #0]
 8002c22:	e7da      	b.n	8002bda <_free_r+0x22>
 8002c24:	d902      	bls.n	8002c2c <_free_r+0x74>
 8002c26:	230c      	movs	r3, #12
 8002c28:	602b      	str	r3, [r5, #0]
 8002c2a:	e7d6      	b.n	8002bda <_free_r+0x22>
 8002c2c:	6820      	ldr	r0, [r4, #0]
 8002c2e:	1821      	adds	r1, r4, r0
 8002c30:	428b      	cmp	r3, r1
 8002c32:	bf04      	itt	eq
 8002c34:	6819      	ldreq	r1, [r3, #0]
 8002c36:	685b      	ldreq	r3, [r3, #4]
 8002c38:	6063      	str	r3, [r4, #4]
 8002c3a:	bf04      	itt	eq
 8002c3c:	1809      	addeq	r1, r1, r0
 8002c3e:	6021      	streq	r1, [r4, #0]
 8002c40:	6054      	str	r4, [r2, #4]
 8002c42:	e7ca      	b.n	8002bda <_free_r+0x22>
 8002c44:	bd38      	pop	{r3, r4, r5, pc}
 8002c46:	bf00      	nop
 8002c48:	20000258 	.word	0x20000258

08002c4c <sbrk_aligned>:
 8002c4c:	b570      	push	{r4, r5, r6, lr}
 8002c4e:	4e0f      	ldr	r6, [pc, #60]	@ (8002c8c <sbrk_aligned+0x40>)
 8002c50:	460c      	mov	r4, r1
 8002c52:	6831      	ldr	r1, [r6, #0]
 8002c54:	4605      	mov	r5, r0
 8002c56:	b911      	cbnz	r1, 8002c5e <sbrk_aligned+0x12>
 8002c58:	f000 fba6 	bl	80033a8 <_sbrk_r>
 8002c5c:	6030      	str	r0, [r6, #0]
 8002c5e:	4621      	mov	r1, r4
 8002c60:	4628      	mov	r0, r5
 8002c62:	f000 fba1 	bl	80033a8 <_sbrk_r>
 8002c66:	1c43      	adds	r3, r0, #1
 8002c68:	d103      	bne.n	8002c72 <sbrk_aligned+0x26>
 8002c6a:	f04f 34ff 	mov.w	r4, #4294967295
 8002c6e:	4620      	mov	r0, r4
 8002c70:	bd70      	pop	{r4, r5, r6, pc}
 8002c72:	1cc4      	adds	r4, r0, #3
 8002c74:	f024 0403 	bic.w	r4, r4, #3
 8002c78:	42a0      	cmp	r0, r4
 8002c7a:	d0f8      	beq.n	8002c6e <sbrk_aligned+0x22>
 8002c7c:	1a21      	subs	r1, r4, r0
 8002c7e:	4628      	mov	r0, r5
 8002c80:	f000 fb92 	bl	80033a8 <_sbrk_r>
 8002c84:	3001      	adds	r0, #1
 8002c86:	d1f2      	bne.n	8002c6e <sbrk_aligned+0x22>
 8002c88:	e7ef      	b.n	8002c6a <sbrk_aligned+0x1e>
 8002c8a:	bf00      	nop
 8002c8c:	20000254 	.word	0x20000254

08002c90 <_malloc_r>:
 8002c90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002c94:	1ccd      	adds	r5, r1, #3
 8002c96:	f025 0503 	bic.w	r5, r5, #3
 8002c9a:	3508      	adds	r5, #8
 8002c9c:	2d0c      	cmp	r5, #12
 8002c9e:	bf38      	it	cc
 8002ca0:	250c      	movcc	r5, #12
 8002ca2:	2d00      	cmp	r5, #0
 8002ca4:	4606      	mov	r6, r0
 8002ca6:	db01      	blt.n	8002cac <_malloc_r+0x1c>
 8002ca8:	42a9      	cmp	r1, r5
 8002caa:	d904      	bls.n	8002cb6 <_malloc_r+0x26>
 8002cac:	230c      	movs	r3, #12
 8002cae:	6033      	str	r3, [r6, #0]
 8002cb0:	2000      	movs	r0, #0
 8002cb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002cb6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002d8c <_malloc_r+0xfc>
 8002cba:	f000 f869 	bl	8002d90 <__malloc_lock>
 8002cbe:	f8d8 3000 	ldr.w	r3, [r8]
 8002cc2:	461c      	mov	r4, r3
 8002cc4:	bb44      	cbnz	r4, 8002d18 <_malloc_r+0x88>
 8002cc6:	4629      	mov	r1, r5
 8002cc8:	4630      	mov	r0, r6
 8002cca:	f7ff ffbf 	bl	8002c4c <sbrk_aligned>
 8002cce:	1c43      	adds	r3, r0, #1
 8002cd0:	4604      	mov	r4, r0
 8002cd2:	d158      	bne.n	8002d86 <_malloc_r+0xf6>
 8002cd4:	f8d8 4000 	ldr.w	r4, [r8]
 8002cd8:	4627      	mov	r7, r4
 8002cda:	2f00      	cmp	r7, #0
 8002cdc:	d143      	bne.n	8002d66 <_malloc_r+0xd6>
 8002cde:	2c00      	cmp	r4, #0
 8002ce0:	d04b      	beq.n	8002d7a <_malloc_r+0xea>
 8002ce2:	6823      	ldr	r3, [r4, #0]
 8002ce4:	4639      	mov	r1, r7
 8002ce6:	4630      	mov	r0, r6
 8002ce8:	eb04 0903 	add.w	r9, r4, r3
 8002cec:	f000 fb5c 	bl	80033a8 <_sbrk_r>
 8002cf0:	4581      	cmp	r9, r0
 8002cf2:	d142      	bne.n	8002d7a <_malloc_r+0xea>
 8002cf4:	6821      	ldr	r1, [r4, #0]
 8002cf6:	1a6d      	subs	r5, r5, r1
 8002cf8:	4629      	mov	r1, r5
 8002cfa:	4630      	mov	r0, r6
 8002cfc:	f7ff ffa6 	bl	8002c4c <sbrk_aligned>
 8002d00:	3001      	adds	r0, #1
 8002d02:	d03a      	beq.n	8002d7a <_malloc_r+0xea>
 8002d04:	6823      	ldr	r3, [r4, #0]
 8002d06:	442b      	add	r3, r5
 8002d08:	6023      	str	r3, [r4, #0]
 8002d0a:	f8d8 3000 	ldr.w	r3, [r8]
 8002d0e:	685a      	ldr	r2, [r3, #4]
 8002d10:	bb62      	cbnz	r2, 8002d6c <_malloc_r+0xdc>
 8002d12:	f8c8 7000 	str.w	r7, [r8]
 8002d16:	e00f      	b.n	8002d38 <_malloc_r+0xa8>
 8002d18:	6822      	ldr	r2, [r4, #0]
 8002d1a:	1b52      	subs	r2, r2, r5
 8002d1c:	d420      	bmi.n	8002d60 <_malloc_r+0xd0>
 8002d1e:	2a0b      	cmp	r2, #11
 8002d20:	d917      	bls.n	8002d52 <_malloc_r+0xc2>
 8002d22:	1961      	adds	r1, r4, r5
 8002d24:	42a3      	cmp	r3, r4
 8002d26:	6025      	str	r5, [r4, #0]
 8002d28:	bf18      	it	ne
 8002d2a:	6059      	strne	r1, [r3, #4]
 8002d2c:	6863      	ldr	r3, [r4, #4]
 8002d2e:	bf08      	it	eq
 8002d30:	f8c8 1000 	streq.w	r1, [r8]
 8002d34:	5162      	str	r2, [r4, r5]
 8002d36:	604b      	str	r3, [r1, #4]
 8002d38:	4630      	mov	r0, r6
 8002d3a:	f000 f82f 	bl	8002d9c <__malloc_unlock>
 8002d3e:	f104 000b 	add.w	r0, r4, #11
 8002d42:	1d23      	adds	r3, r4, #4
 8002d44:	f020 0007 	bic.w	r0, r0, #7
 8002d48:	1ac2      	subs	r2, r0, r3
 8002d4a:	bf1c      	itt	ne
 8002d4c:	1a1b      	subne	r3, r3, r0
 8002d4e:	50a3      	strne	r3, [r4, r2]
 8002d50:	e7af      	b.n	8002cb2 <_malloc_r+0x22>
 8002d52:	6862      	ldr	r2, [r4, #4]
 8002d54:	42a3      	cmp	r3, r4
 8002d56:	bf0c      	ite	eq
 8002d58:	f8c8 2000 	streq.w	r2, [r8]
 8002d5c:	605a      	strne	r2, [r3, #4]
 8002d5e:	e7eb      	b.n	8002d38 <_malloc_r+0xa8>
 8002d60:	4623      	mov	r3, r4
 8002d62:	6864      	ldr	r4, [r4, #4]
 8002d64:	e7ae      	b.n	8002cc4 <_malloc_r+0x34>
 8002d66:	463c      	mov	r4, r7
 8002d68:	687f      	ldr	r7, [r7, #4]
 8002d6a:	e7b6      	b.n	8002cda <_malloc_r+0x4a>
 8002d6c:	461a      	mov	r2, r3
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	42a3      	cmp	r3, r4
 8002d72:	d1fb      	bne.n	8002d6c <_malloc_r+0xdc>
 8002d74:	2300      	movs	r3, #0
 8002d76:	6053      	str	r3, [r2, #4]
 8002d78:	e7de      	b.n	8002d38 <_malloc_r+0xa8>
 8002d7a:	230c      	movs	r3, #12
 8002d7c:	6033      	str	r3, [r6, #0]
 8002d7e:	4630      	mov	r0, r6
 8002d80:	f000 f80c 	bl	8002d9c <__malloc_unlock>
 8002d84:	e794      	b.n	8002cb0 <_malloc_r+0x20>
 8002d86:	6005      	str	r5, [r0, #0]
 8002d88:	e7d6      	b.n	8002d38 <_malloc_r+0xa8>
 8002d8a:	bf00      	nop
 8002d8c:	20000258 	.word	0x20000258

08002d90 <__malloc_lock>:
 8002d90:	4801      	ldr	r0, [pc, #4]	@ (8002d98 <__malloc_lock+0x8>)
 8002d92:	f7ff bf0f 	b.w	8002bb4 <__retarget_lock_acquire_recursive>
 8002d96:	bf00      	nop
 8002d98:	20000250 	.word	0x20000250

08002d9c <__malloc_unlock>:
 8002d9c:	4801      	ldr	r0, [pc, #4]	@ (8002da4 <__malloc_unlock+0x8>)
 8002d9e:	f7ff bf0a 	b.w	8002bb6 <__retarget_lock_release_recursive>
 8002da2:	bf00      	nop
 8002da4:	20000250 	.word	0x20000250

08002da8 <__ssputs_r>:
 8002da8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002dac:	688e      	ldr	r6, [r1, #8]
 8002dae:	461f      	mov	r7, r3
 8002db0:	42be      	cmp	r6, r7
 8002db2:	680b      	ldr	r3, [r1, #0]
 8002db4:	4682      	mov	sl, r0
 8002db6:	460c      	mov	r4, r1
 8002db8:	4690      	mov	r8, r2
 8002dba:	d82d      	bhi.n	8002e18 <__ssputs_r+0x70>
 8002dbc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002dc0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8002dc4:	d026      	beq.n	8002e14 <__ssputs_r+0x6c>
 8002dc6:	6965      	ldr	r5, [r4, #20]
 8002dc8:	6909      	ldr	r1, [r1, #16]
 8002dca:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002dce:	eba3 0901 	sub.w	r9, r3, r1
 8002dd2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002dd6:	1c7b      	adds	r3, r7, #1
 8002dd8:	444b      	add	r3, r9
 8002dda:	106d      	asrs	r5, r5, #1
 8002ddc:	429d      	cmp	r5, r3
 8002dde:	bf38      	it	cc
 8002de0:	461d      	movcc	r5, r3
 8002de2:	0553      	lsls	r3, r2, #21
 8002de4:	d527      	bpl.n	8002e36 <__ssputs_r+0x8e>
 8002de6:	4629      	mov	r1, r5
 8002de8:	f7ff ff52 	bl	8002c90 <_malloc_r>
 8002dec:	4606      	mov	r6, r0
 8002dee:	b360      	cbz	r0, 8002e4a <__ssputs_r+0xa2>
 8002df0:	6921      	ldr	r1, [r4, #16]
 8002df2:	464a      	mov	r2, r9
 8002df4:	f000 fae8 	bl	80033c8 <memcpy>
 8002df8:	89a3      	ldrh	r3, [r4, #12]
 8002dfa:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8002dfe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002e02:	81a3      	strh	r3, [r4, #12]
 8002e04:	6126      	str	r6, [r4, #16]
 8002e06:	6165      	str	r5, [r4, #20]
 8002e08:	444e      	add	r6, r9
 8002e0a:	eba5 0509 	sub.w	r5, r5, r9
 8002e0e:	6026      	str	r6, [r4, #0]
 8002e10:	60a5      	str	r5, [r4, #8]
 8002e12:	463e      	mov	r6, r7
 8002e14:	42be      	cmp	r6, r7
 8002e16:	d900      	bls.n	8002e1a <__ssputs_r+0x72>
 8002e18:	463e      	mov	r6, r7
 8002e1a:	6820      	ldr	r0, [r4, #0]
 8002e1c:	4632      	mov	r2, r6
 8002e1e:	4641      	mov	r1, r8
 8002e20:	f000 faa8 	bl	8003374 <memmove>
 8002e24:	68a3      	ldr	r3, [r4, #8]
 8002e26:	1b9b      	subs	r3, r3, r6
 8002e28:	60a3      	str	r3, [r4, #8]
 8002e2a:	6823      	ldr	r3, [r4, #0]
 8002e2c:	4433      	add	r3, r6
 8002e2e:	6023      	str	r3, [r4, #0]
 8002e30:	2000      	movs	r0, #0
 8002e32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002e36:	462a      	mov	r2, r5
 8002e38:	f000 fad4 	bl	80033e4 <_realloc_r>
 8002e3c:	4606      	mov	r6, r0
 8002e3e:	2800      	cmp	r0, #0
 8002e40:	d1e0      	bne.n	8002e04 <__ssputs_r+0x5c>
 8002e42:	6921      	ldr	r1, [r4, #16]
 8002e44:	4650      	mov	r0, sl
 8002e46:	f7ff feb7 	bl	8002bb8 <_free_r>
 8002e4a:	230c      	movs	r3, #12
 8002e4c:	f8ca 3000 	str.w	r3, [sl]
 8002e50:	89a3      	ldrh	r3, [r4, #12]
 8002e52:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002e56:	81a3      	strh	r3, [r4, #12]
 8002e58:	f04f 30ff 	mov.w	r0, #4294967295
 8002e5c:	e7e9      	b.n	8002e32 <__ssputs_r+0x8a>
	...

08002e60 <_svfiprintf_r>:
 8002e60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e64:	4698      	mov	r8, r3
 8002e66:	898b      	ldrh	r3, [r1, #12]
 8002e68:	061b      	lsls	r3, r3, #24
 8002e6a:	b09d      	sub	sp, #116	@ 0x74
 8002e6c:	4607      	mov	r7, r0
 8002e6e:	460d      	mov	r5, r1
 8002e70:	4614      	mov	r4, r2
 8002e72:	d510      	bpl.n	8002e96 <_svfiprintf_r+0x36>
 8002e74:	690b      	ldr	r3, [r1, #16]
 8002e76:	b973      	cbnz	r3, 8002e96 <_svfiprintf_r+0x36>
 8002e78:	2140      	movs	r1, #64	@ 0x40
 8002e7a:	f7ff ff09 	bl	8002c90 <_malloc_r>
 8002e7e:	6028      	str	r0, [r5, #0]
 8002e80:	6128      	str	r0, [r5, #16]
 8002e82:	b930      	cbnz	r0, 8002e92 <_svfiprintf_r+0x32>
 8002e84:	230c      	movs	r3, #12
 8002e86:	603b      	str	r3, [r7, #0]
 8002e88:	f04f 30ff 	mov.w	r0, #4294967295
 8002e8c:	b01d      	add	sp, #116	@ 0x74
 8002e8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002e92:	2340      	movs	r3, #64	@ 0x40
 8002e94:	616b      	str	r3, [r5, #20]
 8002e96:	2300      	movs	r3, #0
 8002e98:	9309      	str	r3, [sp, #36]	@ 0x24
 8002e9a:	2320      	movs	r3, #32
 8002e9c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8002ea0:	f8cd 800c 	str.w	r8, [sp, #12]
 8002ea4:	2330      	movs	r3, #48	@ 0x30
 8002ea6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8003044 <_svfiprintf_r+0x1e4>
 8002eaa:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8002eae:	f04f 0901 	mov.w	r9, #1
 8002eb2:	4623      	mov	r3, r4
 8002eb4:	469a      	mov	sl, r3
 8002eb6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002eba:	b10a      	cbz	r2, 8002ec0 <_svfiprintf_r+0x60>
 8002ebc:	2a25      	cmp	r2, #37	@ 0x25
 8002ebe:	d1f9      	bne.n	8002eb4 <_svfiprintf_r+0x54>
 8002ec0:	ebba 0b04 	subs.w	fp, sl, r4
 8002ec4:	d00b      	beq.n	8002ede <_svfiprintf_r+0x7e>
 8002ec6:	465b      	mov	r3, fp
 8002ec8:	4622      	mov	r2, r4
 8002eca:	4629      	mov	r1, r5
 8002ecc:	4638      	mov	r0, r7
 8002ece:	f7ff ff6b 	bl	8002da8 <__ssputs_r>
 8002ed2:	3001      	adds	r0, #1
 8002ed4:	f000 80a7 	beq.w	8003026 <_svfiprintf_r+0x1c6>
 8002ed8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8002eda:	445a      	add	r2, fp
 8002edc:	9209      	str	r2, [sp, #36]	@ 0x24
 8002ede:	f89a 3000 	ldrb.w	r3, [sl]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	f000 809f 	beq.w	8003026 <_svfiprintf_r+0x1c6>
 8002ee8:	2300      	movs	r3, #0
 8002eea:	f04f 32ff 	mov.w	r2, #4294967295
 8002eee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002ef2:	f10a 0a01 	add.w	sl, sl, #1
 8002ef6:	9304      	str	r3, [sp, #16]
 8002ef8:	9307      	str	r3, [sp, #28]
 8002efa:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8002efe:	931a      	str	r3, [sp, #104]	@ 0x68
 8002f00:	4654      	mov	r4, sl
 8002f02:	2205      	movs	r2, #5
 8002f04:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002f08:	484e      	ldr	r0, [pc, #312]	@ (8003044 <_svfiprintf_r+0x1e4>)
 8002f0a:	f7fd f969 	bl	80001e0 <memchr>
 8002f0e:	9a04      	ldr	r2, [sp, #16]
 8002f10:	b9d8      	cbnz	r0, 8002f4a <_svfiprintf_r+0xea>
 8002f12:	06d0      	lsls	r0, r2, #27
 8002f14:	bf44      	itt	mi
 8002f16:	2320      	movmi	r3, #32
 8002f18:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002f1c:	0711      	lsls	r1, r2, #28
 8002f1e:	bf44      	itt	mi
 8002f20:	232b      	movmi	r3, #43	@ 0x2b
 8002f22:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002f26:	f89a 3000 	ldrb.w	r3, [sl]
 8002f2a:	2b2a      	cmp	r3, #42	@ 0x2a
 8002f2c:	d015      	beq.n	8002f5a <_svfiprintf_r+0xfa>
 8002f2e:	9a07      	ldr	r2, [sp, #28]
 8002f30:	4654      	mov	r4, sl
 8002f32:	2000      	movs	r0, #0
 8002f34:	f04f 0c0a 	mov.w	ip, #10
 8002f38:	4621      	mov	r1, r4
 8002f3a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002f3e:	3b30      	subs	r3, #48	@ 0x30
 8002f40:	2b09      	cmp	r3, #9
 8002f42:	d94b      	bls.n	8002fdc <_svfiprintf_r+0x17c>
 8002f44:	b1b0      	cbz	r0, 8002f74 <_svfiprintf_r+0x114>
 8002f46:	9207      	str	r2, [sp, #28]
 8002f48:	e014      	b.n	8002f74 <_svfiprintf_r+0x114>
 8002f4a:	eba0 0308 	sub.w	r3, r0, r8
 8002f4e:	fa09 f303 	lsl.w	r3, r9, r3
 8002f52:	4313      	orrs	r3, r2
 8002f54:	9304      	str	r3, [sp, #16]
 8002f56:	46a2      	mov	sl, r4
 8002f58:	e7d2      	b.n	8002f00 <_svfiprintf_r+0xa0>
 8002f5a:	9b03      	ldr	r3, [sp, #12]
 8002f5c:	1d19      	adds	r1, r3, #4
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	9103      	str	r1, [sp, #12]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	bfbb      	ittet	lt
 8002f66:	425b      	neglt	r3, r3
 8002f68:	f042 0202 	orrlt.w	r2, r2, #2
 8002f6c:	9307      	strge	r3, [sp, #28]
 8002f6e:	9307      	strlt	r3, [sp, #28]
 8002f70:	bfb8      	it	lt
 8002f72:	9204      	strlt	r2, [sp, #16]
 8002f74:	7823      	ldrb	r3, [r4, #0]
 8002f76:	2b2e      	cmp	r3, #46	@ 0x2e
 8002f78:	d10a      	bne.n	8002f90 <_svfiprintf_r+0x130>
 8002f7a:	7863      	ldrb	r3, [r4, #1]
 8002f7c:	2b2a      	cmp	r3, #42	@ 0x2a
 8002f7e:	d132      	bne.n	8002fe6 <_svfiprintf_r+0x186>
 8002f80:	9b03      	ldr	r3, [sp, #12]
 8002f82:	1d1a      	adds	r2, r3, #4
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	9203      	str	r2, [sp, #12]
 8002f88:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8002f8c:	3402      	adds	r4, #2
 8002f8e:	9305      	str	r3, [sp, #20]
 8002f90:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8003054 <_svfiprintf_r+0x1f4>
 8002f94:	7821      	ldrb	r1, [r4, #0]
 8002f96:	2203      	movs	r2, #3
 8002f98:	4650      	mov	r0, sl
 8002f9a:	f7fd f921 	bl	80001e0 <memchr>
 8002f9e:	b138      	cbz	r0, 8002fb0 <_svfiprintf_r+0x150>
 8002fa0:	9b04      	ldr	r3, [sp, #16]
 8002fa2:	eba0 000a 	sub.w	r0, r0, sl
 8002fa6:	2240      	movs	r2, #64	@ 0x40
 8002fa8:	4082      	lsls	r2, r0
 8002faa:	4313      	orrs	r3, r2
 8002fac:	3401      	adds	r4, #1
 8002fae:	9304      	str	r3, [sp, #16]
 8002fb0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002fb4:	4824      	ldr	r0, [pc, #144]	@ (8003048 <_svfiprintf_r+0x1e8>)
 8002fb6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8002fba:	2206      	movs	r2, #6
 8002fbc:	f7fd f910 	bl	80001e0 <memchr>
 8002fc0:	2800      	cmp	r0, #0
 8002fc2:	d036      	beq.n	8003032 <_svfiprintf_r+0x1d2>
 8002fc4:	4b21      	ldr	r3, [pc, #132]	@ (800304c <_svfiprintf_r+0x1ec>)
 8002fc6:	bb1b      	cbnz	r3, 8003010 <_svfiprintf_r+0x1b0>
 8002fc8:	9b03      	ldr	r3, [sp, #12]
 8002fca:	3307      	adds	r3, #7
 8002fcc:	f023 0307 	bic.w	r3, r3, #7
 8002fd0:	3308      	adds	r3, #8
 8002fd2:	9303      	str	r3, [sp, #12]
 8002fd4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002fd6:	4433      	add	r3, r6
 8002fd8:	9309      	str	r3, [sp, #36]	@ 0x24
 8002fda:	e76a      	b.n	8002eb2 <_svfiprintf_r+0x52>
 8002fdc:	fb0c 3202 	mla	r2, ip, r2, r3
 8002fe0:	460c      	mov	r4, r1
 8002fe2:	2001      	movs	r0, #1
 8002fe4:	e7a8      	b.n	8002f38 <_svfiprintf_r+0xd8>
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	3401      	adds	r4, #1
 8002fea:	9305      	str	r3, [sp, #20]
 8002fec:	4619      	mov	r1, r3
 8002fee:	f04f 0c0a 	mov.w	ip, #10
 8002ff2:	4620      	mov	r0, r4
 8002ff4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002ff8:	3a30      	subs	r2, #48	@ 0x30
 8002ffa:	2a09      	cmp	r2, #9
 8002ffc:	d903      	bls.n	8003006 <_svfiprintf_r+0x1a6>
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d0c6      	beq.n	8002f90 <_svfiprintf_r+0x130>
 8003002:	9105      	str	r1, [sp, #20]
 8003004:	e7c4      	b.n	8002f90 <_svfiprintf_r+0x130>
 8003006:	fb0c 2101 	mla	r1, ip, r1, r2
 800300a:	4604      	mov	r4, r0
 800300c:	2301      	movs	r3, #1
 800300e:	e7f0      	b.n	8002ff2 <_svfiprintf_r+0x192>
 8003010:	ab03      	add	r3, sp, #12
 8003012:	9300      	str	r3, [sp, #0]
 8003014:	462a      	mov	r2, r5
 8003016:	4b0e      	ldr	r3, [pc, #56]	@ (8003050 <_svfiprintf_r+0x1f0>)
 8003018:	a904      	add	r1, sp, #16
 800301a:	4638      	mov	r0, r7
 800301c:	f3af 8000 	nop.w
 8003020:	1c42      	adds	r2, r0, #1
 8003022:	4606      	mov	r6, r0
 8003024:	d1d6      	bne.n	8002fd4 <_svfiprintf_r+0x174>
 8003026:	89ab      	ldrh	r3, [r5, #12]
 8003028:	065b      	lsls	r3, r3, #25
 800302a:	f53f af2d 	bmi.w	8002e88 <_svfiprintf_r+0x28>
 800302e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003030:	e72c      	b.n	8002e8c <_svfiprintf_r+0x2c>
 8003032:	ab03      	add	r3, sp, #12
 8003034:	9300      	str	r3, [sp, #0]
 8003036:	462a      	mov	r2, r5
 8003038:	4b05      	ldr	r3, [pc, #20]	@ (8003050 <_svfiprintf_r+0x1f0>)
 800303a:	a904      	add	r1, sp, #16
 800303c:	4638      	mov	r0, r7
 800303e:	f000 f879 	bl	8003134 <_printf_i>
 8003042:	e7ed      	b.n	8003020 <_svfiprintf_r+0x1c0>
 8003044:	08003490 	.word	0x08003490
 8003048:	0800349a 	.word	0x0800349a
 800304c:	00000000 	.word	0x00000000
 8003050:	08002da9 	.word	0x08002da9
 8003054:	08003496 	.word	0x08003496

08003058 <_printf_common>:
 8003058:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800305c:	4616      	mov	r6, r2
 800305e:	4698      	mov	r8, r3
 8003060:	688a      	ldr	r2, [r1, #8]
 8003062:	690b      	ldr	r3, [r1, #16]
 8003064:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003068:	4293      	cmp	r3, r2
 800306a:	bfb8      	it	lt
 800306c:	4613      	movlt	r3, r2
 800306e:	6033      	str	r3, [r6, #0]
 8003070:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003074:	4607      	mov	r7, r0
 8003076:	460c      	mov	r4, r1
 8003078:	b10a      	cbz	r2, 800307e <_printf_common+0x26>
 800307a:	3301      	adds	r3, #1
 800307c:	6033      	str	r3, [r6, #0]
 800307e:	6823      	ldr	r3, [r4, #0]
 8003080:	0699      	lsls	r1, r3, #26
 8003082:	bf42      	ittt	mi
 8003084:	6833      	ldrmi	r3, [r6, #0]
 8003086:	3302      	addmi	r3, #2
 8003088:	6033      	strmi	r3, [r6, #0]
 800308a:	6825      	ldr	r5, [r4, #0]
 800308c:	f015 0506 	ands.w	r5, r5, #6
 8003090:	d106      	bne.n	80030a0 <_printf_common+0x48>
 8003092:	f104 0a19 	add.w	sl, r4, #25
 8003096:	68e3      	ldr	r3, [r4, #12]
 8003098:	6832      	ldr	r2, [r6, #0]
 800309a:	1a9b      	subs	r3, r3, r2
 800309c:	42ab      	cmp	r3, r5
 800309e:	dc26      	bgt.n	80030ee <_printf_common+0x96>
 80030a0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80030a4:	6822      	ldr	r2, [r4, #0]
 80030a6:	3b00      	subs	r3, #0
 80030a8:	bf18      	it	ne
 80030aa:	2301      	movne	r3, #1
 80030ac:	0692      	lsls	r2, r2, #26
 80030ae:	d42b      	bmi.n	8003108 <_printf_common+0xb0>
 80030b0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80030b4:	4641      	mov	r1, r8
 80030b6:	4638      	mov	r0, r7
 80030b8:	47c8      	blx	r9
 80030ba:	3001      	adds	r0, #1
 80030bc:	d01e      	beq.n	80030fc <_printf_common+0xa4>
 80030be:	6823      	ldr	r3, [r4, #0]
 80030c0:	6922      	ldr	r2, [r4, #16]
 80030c2:	f003 0306 	and.w	r3, r3, #6
 80030c6:	2b04      	cmp	r3, #4
 80030c8:	bf02      	ittt	eq
 80030ca:	68e5      	ldreq	r5, [r4, #12]
 80030cc:	6833      	ldreq	r3, [r6, #0]
 80030ce:	1aed      	subeq	r5, r5, r3
 80030d0:	68a3      	ldr	r3, [r4, #8]
 80030d2:	bf0c      	ite	eq
 80030d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80030d8:	2500      	movne	r5, #0
 80030da:	4293      	cmp	r3, r2
 80030dc:	bfc4      	itt	gt
 80030de:	1a9b      	subgt	r3, r3, r2
 80030e0:	18ed      	addgt	r5, r5, r3
 80030e2:	2600      	movs	r6, #0
 80030e4:	341a      	adds	r4, #26
 80030e6:	42b5      	cmp	r5, r6
 80030e8:	d11a      	bne.n	8003120 <_printf_common+0xc8>
 80030ea:	2000      	movs	r0, #0
 80030ec:	e008      	b.n	8003100 <_printf_common+0xa8>
 80030ee:	2301      	movs	r3, #1
 80030f0:	4652      	mov	r2, sl
 80030f2:	4641      	mov	r1, r8
 80030f4:	4638      	mov	r0, r7
 80030f6:	47c8      	blx	r9
 80030f8:	3001      	adds	r0, #1
 80030fa:	d103      	bne.n	8003104 <_printf_common+0xac>
 80030fc:	f04f 30ff 	mov.w	r0, #4294967295
 8003100:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003104:	3501      	adds	r5, #1
 8003106:	e7c6      	b.n	8003096 <_printf_common+0x3e>
 8003108:	18e1      	adds	r1, r4, r3
 800310a:	1c5a      	adds	r2, r3, #1
 800310c:	2030      	movs	r0, #48	@ 0x30
 800310e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003112:	4422      	add	r2, r4
 8003114:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003118:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800311c:	3302      	adds	r3, #2
 800311e:	e7c7      	b.n	80030b0 <_printf_common+0x58>
 8003120:	2301      	movs	r3, #1
 8003122:	4622      	mov	r2, r4
 8003124:	4641      	mov	r1, r8
 8003126:	4638      	mov	r0, r7
 8003128:	47c8      	blx	r9
 800312a:	3001      	adds	r0, #1
 800312c:	d0e6      	beq.n	80030fc <_printf_common+0xa4>
 800312e:	3601      	adds	r6, #1
 8003130:	e7d9      	b.n	80030e6 <_printf_common+0x8e>
	...

08003134 <_printf_i>:
 8003134:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003138:	7e0f      	ldrb	r7, [r1, #24]
 800313a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800313c:	2f78      	cmp	r7, #120	@ 0x78
 800313e:	4691      	mov	r9, r2
 8003140:	4680      	mov	r8, r0
 8003142:	460c      	mov	r4, r1
 8003144:	469a      	mov	sl, r3
 8003146:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800314a:	d807      	bhi.n	800315c <_printf_i+0x28>
 800314c:	2f62      	cmp	r7, #98	@ 0x62
 800314e:	d80a      	bhi.n	8003166 <_printf_i+0x32>
 8003150:	2f00      	cmp	r7, #0
 8003152:	f000 80d2 	beq.w	80032fa <_printf_i+0x1c6>
 8003156:	2f58      	cmp	r7, #88	@ 0x58
 8003158:	f000 80b9 	beq.w	80032ce <_printf_i+0x19a>
 800315c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003160:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003164:	e03a      	b.n	80031dc <_printf_i+0xa8>
 8003166:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800316a:	2b15      	cmp	r3, #21
 800316c:	d8f6      	bhi.n	800315c <_printf_i+0x28>
 800316e:	a101      	add	r1, pc, #4	@ (adr r1, 8003174 <_printf_i+0x40>)
 8003170:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003174:	080031cd 	.word	0x080031cd
 8003178:	080031e1 	.word	0x080031e1
 800317c:	0800315d 	.word	0x0800315d
 8003180:	0800315d 	.word	0x0800315d
 8003184:	0800315d 	.word	0x0800315d
 8003188:	0800315d 	.word	0x0800315d
 800318c:	080031e1 	.word	0x080031e1
 8003190:	0800315d 	.word	0x0800315d
 8003194:	0800315d 	.word	0x0800315d
 8003198:	0800315d 	.word	0x0800315d
 800319c:	0800315d 	.word	0x0800315d
 80031a0:	080032e1 	.word	0x080032e1
 80031a4:	0800320b 	.word	0x0800320b
 80031a8:	0800329b 	.word	0x0800329b
 80031ac:	0800315d 	.word	0x0800315d
 80031b0:	0800315d 	.word	0x0800315d
 80031b4:	08003303 	.word	0x08003303
 80031b8:	0800315d 	.word	0x0800315d
 80031bc:	0800320b 	.word	0x0800320b
 80031c0:	0800315d 	.word	0x0800315d
 80031c4:	0800315d 	.word	0x0800315d
 80031c8:	080032a3 	.word	0x080032a3
 80031cc:	6833      	ldr	r3, [r6, #0]
 80031ce:	1d1a      	adds	r2, r3, #4
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	6032      	str	r2, [r6, #0]
 80031d4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80031d8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80031dc:	2301      	movs	r3, #1
 80031de:	e09d      	b.n	800331c <_printf_i+0x1e8>
 80031e0:	6833      	ldr	r3, [r6, #0]
 80031e2:	6820      	ldr	r0, [r4, #0]
 80031e4:	1d19      	adds	r1, r3, #4
 80031e6:	6031      	str	r1, [r6, #0]
 80031e8:	0606      	lsls	r6, r0, #24
 80031ea:	d501      	bpl.n	80031f0 <_printf_i+0xbc>
 80031ec:	681d      	ldr	r5, [r3, #0]
 80031ee:	e003      	b.n	80031f8 <_printf_i+0xc4>
 80031f0:	0645      	lsls	r5, r0, #25
 80031f2:	d5fb      	bpl.n	80031ec <_printf_i+0xb8>
 80031f4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80031f8:	2d00      	cmp	r5, #0
 80031fa:	da03      	bge.n	8003204 <_printf_i+0xd0>
 80031fc:	232d      	movs	r3, #45	@ 0x2d
 80031fe:	426d      	negs	r5, r5
 8003200:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003204:	4859      	ldr	r0, [pc, #356]	@ (800336c <_printf_i+0x238>)
 8003206:	230a      	movs	r3, #10
 8003208:	e011      	b.n	800322e <_printf_i+0xfa>
 800320a:	6821      	ldr	r1, [r4, #0]
 800320c:	6833      	ldr	r3, [r6, #0]
 800320e:	0608      	lsls	r0, r1, #24
 8003210:	f853 5b04 	ldr.w	r5, [r3], #4
 8003214:	d402      	bmi.n	800321c <_printf_i+0xe8>
 8003216:	0649      	lsls	r1, r1, #25
 8003218:	bf48      	it	mi
 800321a:	b2ad      	uxthmi	r5, r5
 800321c:	2f6f      	cmp	r7, #111	@ 0x6f
 800321e:	4853      	ldr	r0, [pc, #332]	@ (800336c <_printf_i+0x238>)
 8003220:	6033      	str	r3, [r6, #0]
 8003222:	bf14      	ite	ne
 8003224:	230a      	movne	r3, #10
 8003226:	2308      	moveq	r3, #8
 8003228:	2100      	movs	r1, #0
 800322a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800322e:	6866      	ldr	r6, [r4, #4]
 8003230:	60a6      	str	r6, [r4, #8]
 8003232:	2e00      	cmp	r6, #0
 8003234:	bfa2      	ittt	ge
 8003236:	6821      	ldrge	r1, [r4, #0]
 8003238:	f021 0104 	bicge.w	r1, r1, #4
 800323c:	6021      	strge	r1, [r4, #0]
 800323e:	b90d      	cbnz	r5, 8003244 <_printf_i+0x110>
 8003240:	2e00      	cmp	r6, #0
 8003242:	d04b      	beq.n	80032dc <_printf_i+0x1a8>
 8003244:	4616      	mov	r6, r2
 8003246:	fbb5 f1f3 	udiv	r1, r5, r3
 800324a:	fb03 5711 	mls	r7, r3, r1, r5
 800324e:	5dc7      	ldrb	r7, [r0, r7]
 8003250:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003254:	462f      	mov	r7, r5
 8003256:	42bb      	cmp	r3, r7
 8003258:	460d      	mov	r5, r1
 800325a:	d9f4      	bls.n	8003246 <_printf_i+0x112>
 800325c:	2b08      	cmp	r3, #8
 800325e:	d10b      	bne.n	8003278 <_printf_i+0x144>
 8003260:	6823      	ldr	r3, [r4, #0]
 8003262:	07df      	lsls	r7, r3, #31
 8003264:	d508      	bpl.n	8003278 <_printf_i+0x144>
 8003266:	6923      	ldr	r3, [r4, #16]
 8003268:	6861      	ldr	r1, [r4, #4]
 800326a:	4299      	cmp	r1, r3
 800326c:	bfde      	ittt	le
 800326e:	2330      	movle	r3, #48	@ 0x30
 8003270:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003274:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003278:	1b92      	subs	r2, r2, r6
 800327a:	6122      	str	r2, [r4, #16]
 800327c:	f8cd a000 	str.w	sl, [sp]
 8003280:	464b      	mov	r3, r9
 8003282:	aa03      	add	r2, sp, #12
 8003284:	4621      	mov	r1, r4
 8003286:	4640      	mov	r0, r8
 8003288:	f7ff fee6 	bl	8003058 <_printf_common>
 800328c:	3001      	adds	r0, #1
 800328e:	d14a      	bne.n	8003326 <_printf_i+0x1f2>
 8003290:	f04f 30ff 	mov.w	r0, #4294967295
 8003294:	b004      	add	sp, #16
 8003296:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800329a:	6823      	ldr	r3, [r4, #0]
 800329c:	f043 0320 	orr.w	r3, r3, #32
 80032a0:	6023      	str	r3, [r4, #0]
 80032a2:	4833      	ldr	r0, [pc, #204]	@ (8003370 <_printf_i+0x23c>)
 80032a4:	2778      	movs	r7, #120	@ 0x78
 80032a6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80032aa:	6823      	ldr	r3, [r4, #0]
 80032ac:	6831      	ldr	r1, [r6, #0]
 80032ae:	061f      	lsls	r7, r3, #24
 80032b0:	f851 5b04 	ldr.w	r5, [r1], #4
 80032b4:	d402      	bmi.n	80032bc <_printf_i+0x188>
 80032b6:	065f      	lsls	r7, r3, #25
 80032b8:	bf48      	it	mi
 80032ba:	b2ad      	uxthmi	r5, r5
 80032bc:	6031      	str	r1, [r6, #0]
 80032be:	07d9      	lsls	r1, r3, #31
 80032c0:	bf44      	itt	mi
 80032c2:	f043 0320 	orrmi.w	r3, r3, #32
 80032c6:	6023      	strmi	r3, [r4, #0]
 80032c8:	b11d      	cbz	r5, 80032d2 <_printf_i+0x19e>
 80032ca:	2310      	movs	r3, #16
 80032cc:	e7ac      	b.n	8003228 <_printf_i+0xf4>
 80032ce:	4827      	ldr	r0, [pc, #156]	@ (800336c <_printf_i+0x238>)
 80032d0:	e7e9      	b.n	80032a6 <_printf_i+0x172>
 80032d2:	6823      	ldr	r3, [r4, #0]
 80032d4:	f023 0320 	bic.w	r3, r3, #32
 80032d8:	6023      	str	r3, [r4, #0]
 80032da:	e7f6      	b.n	80032ca <_printf_i+0x196>
 80032dc:	4616      	mov	r6, r2
 80032de:	e7bd      	b.n	800325c <_printf_i+0x128>
 80032e0:	6833      	ldr	r3, [r6, #0]
 80032e2:	6825      	ldr	r5, [r4, #0]
 80032e4:	6961      	ldr	r1, [r4, #20]
 80032e6:	1d18      	adds	r0, r3, #4
 80032e8:	6030      	str	r0, [r6, #0]
 80032ea:	062e      	lsls	r6, r5, #24
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	d501      	bpl.n	80032f4 <_printf_i+0x1c0>
 80032f0:	6019      	str	r1, [r3, #0]
 80032f2:	e002      	b.n	80032fa <_printf_i+0x1c6>
 80032f4:	0668      	lsls	r0, r5, #25
 80032f6:	d5fb      	bpl.n	80032f0 <_printf_i+0x1bc>
 80032f8:	8019      	strh	r1, [r3, #0]
 80032fa:	2300      	movs	r3, #0
 80032fc:	6123      	str	r3, [r4, #16]
 80032fe:	4616      	mov	r6, r2
 8003300:	e7bc      	b.n	800327c <_printf_i+0x148>
 8003302:	6833      	ldr	r3, [r6, #0]
 8003304:	1d1a      	adds	r2, r3, #4
 8003306:	6032      	str	r2, [r6, #0]
 8003308:	681e      	ldr	r6, [r3, #0]
 800330a:	6862      	ldr	r2, [r4, #4]
 800330c:	2100      	movs	r1, #0
 800330e:	4630      	mov	r0, r6
 8003310:	f7fc ff66 	bl	80001e0 <memchr>
 8003314:	b108      	cbz	r0, 800331a <_printf_i+0x1e6>
 8003316:	1b80      	subs	r0, r0, r6
 8003318:	6060      	str	r0, [r4, #4]
 800331a:	6863      	ldr	r3, [r4, #4]
 800331c:	6123      	str	r3, [r4, #16]
 800331e:	2300      	movs	r3, #0
 8003320:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003324:	e7aa      	b.n	800327c <_printf_i+0x148>
 8003326:	6923      	ldr	r3, [r4, #16]
 8003328:	4632      	mov	r2, r6
 800332a:	4649      	mov	r1, r9
 800332c:	4640      	mov	r0, r8
 800332e:	47d0      	blx	sl
 8003330:	3001      	adds	r0, #1
 8003332:	d0ad      	beq.n	8003290 <_printf_i+0x15c>
 8003334:	6823      	ldr	r3, [r4, #0]
 8003336:	079b      	lsls	r3, r3, #30
 8003338:	d413      	bmi.n	8003362 <_printf_i+0x22e>
 800333a:	68e0      	ldr	r0, [r4, #12]
 800333c:	9b03      	ldr	r3, [sp, #12]
 800333e:	4298      	cmp	r0, r3
 8003340:	bfb8      	it	lt
 8003342:	4618      	movlt	r0, r3
 8003344:	e7a6      	b.n	8003294 <_printf_i+0x160>
 8003346:	2301      	movs	r3, #1
 8003348:	4632      	mov	r2, r6
 800334a:	4649      	mov	r1, r9
 800334c:	4640      	mov	r0, r8
 800334e:	47d0      	blx	sl
 8003350:	3001      	adds	r0, #1
 8003352:	d09d      	beq.n	8003290 <_printf_i+0x15c>
 8003354:	3501      	adds	r5, #1
 8003356:	68e3      	ldr	r3, [r4, #12]
 8003358:	9903      	ldr	r1, [sp, #12]
 800335a:	1a5b      	subs	r3, r3, r1
 800335c:	42ab      	cmp	r3, r5
 800335e:	dcf2      	bgt.n	8003346 <_printf_i+0x212>
 8003360:	e7eb      	b.n	800333a <_printf_i+0x206>
 8003362:	2500      	movs	r5, #0
 8003364:	f104 0619 	add.w	r6, r4, #25
 8003368:	e7f5      	b.n	8003356 <_printf_i+0x222>
 800336a:	bf00      	nop
 800336c:	080034a1 	.word	0x080034a1
 8003370:	080034b2 	.word	0x080034b2

08003374 <memmove>:
 8003374:	4288      	cmp	r0, r1
 8003376:	b510      	push	{r4, lr}
 8003378:	eb01 0402 	add.w	r4, r1, r2
 800337c:	d902      	bls.n	8003384 <memmove+0x10>
 800337e:	4284      	cmp	r4, r0
 8003380:	4623      	mov	r3, r4
 8003382:	d807      	bhi.n	8003394 <memmove+0x20>
 8003384:	1e43      	subs	r3, r0, #1
 8003386:	42a1      	cmp	r1, r4
 8003388:	d008      	beq.n	800339c <memmove+0x28>
 800338a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800338e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003392:	e7f8      	b.n	8003386 <memmove+0x12>
 8003394:	4402      	add	r2, r0
 8003396:	4601      	mov	r1, r0
 8003398:	428a      	cmp	r2, r1
 800339a:	d100      	bne.n	800339e <memmove+0x2a>
 800339c:	bd10      	pop	{r4, pc}
 800339e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80033a2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80033a6:	e7f7      	b.n	8003398 <memmove+0x24>

080033a8 <_sbrk_r>:
 80033a8:	b538      	push	{r3, r4, r5, lr}
 80033aa:	4d06      	ldr	r5, [pc, #24]	@ (80033c4 <_sbrk_r+0x1c>)
 80033ac:	2300      	movs	r3, #0
 80033ae:	4604      	mov	r4, r0
 80033b0:	4608      	mov	r0, r1
 80033b2:	602b      	str	r3, [r5, #0]
 80033b4:	f7fd fb14 	bl	80009e0 <_sbrk>
 80033b8:	1c43      	adds	r3, r0, #1
 80033ba:	d102      	bne.n	80033c2 <_sbrk_r+0x1a>
 80033bc:	682b      	ldr	r3, [r5, #0]
 80033be:	b103      	cbz	r3, 80033c2 <_sbrk_r+0x1a>
 80033c0:	6023      	str	r3, [r4, #0]
 80033c2:	bd38      	pop	{r3, r4, r5, pc}
 80033c4:	2000024c 	.word	0x2000024c

080033c8 <memcpy>:
 80033c8:	440a      	add	r2, r1
 80033ca:	4291      	cmp	r1, r2
 80033cc:	f100 33ff 	add.w	r3, r0, #4294967295
 80033d0:	d100      	bne.n	80033d4 <memcpy+0xc>
 80033d2:	4770      	bx	lr
 80033d4:	b510      	push	{r4, lr}
 80033d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80033da:	f803 4f01 	strb.w	r4, [r3, #1]!
 80033de:	4291      	cmp	r1, r2
 80033e0:	d1f9      	bne.n	80033d6 <memcpy+0xe>
 80033e2:	bd10      	pop	{r4, pc}

080033e4 <_realloc_r>:
 80033e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80033e8:	4680      	mov	r8, r0
 80033ea:	4615      	mov	r5, r2
 80033ec:	460c      	mov	r4, r1
 80033ee:	b921      	cbnz	r1, 80033fa <_realloc_r+0x16>
 80033f0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80033f4:	4611      	mov	r1, r2
 80033f6:	f7ff bc4b 	b.w	8002c90 <_malloc_r>
 80033fa:	b92a      	cbnz	r2, 8003408 <_realloc_r+0x24>
 80033fc:	f7ff fbdc 	bl	8002bb8 <_free_r>
 8003400:	2400      	movs	r4, #0
 8003402:	4620      	mov	r0, r4
 8003404:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003408:	f000 f81a 	bl	8003440 <_malloc_usable_size_r>
 800340c:	4285      	cmp	r5, r0
 800340e:	4606      	mov	r6, r0
 8003410:	d802      	bhi.n	8003418 <_realloc_r+0x34>
 8003412:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8003416:	d8f4      	bhi.n	8003402 <_realloc_r+0x1e>
 8003418:	4629      	mov	r1, r5
 800341a:	4640      	mov	r0, r8
 800341c:	f7ff fc38 	bl	8002c90 <_malloc_r>
 8003420:	4607      	mov	r7, r0
 8003422:	2800      	cmp	r0, #0
 8003424:	d0ec      	beq.n	8003400 <_realloc_r+0x1c>
 8003426:	42b5      	cmp	r5, r6
 8003428:	462a      	mov	r2, r5
 800342a:	4621      	mov	r1, r4
 800342c:	bf28      	it	cs
 800342e:	4632      	movcs	r2, r6
 8003430:	f7ff ffca 	bl	80033c8 <memcpy>
 8003434:	4621      	mov	r1, r4
 8003436:	4640      	mov	r0, r8
 8003438:	f7ff fbbe 	bl	8002bb8 <_free_r>
 800343c:	463c      	mov	r4, r7
 800343e:	e7e0      	b.n	8003402 <_realloc_r+0x1e>

08003440 <_malloc_usable_size_r>:
 8003440:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003444:	1f18      	subs	r0, r3, #4
 8003446:	2b00      	cmp	r3, #0
 8003448:	bfbc      	itt	lt
 800344a:	580b      	ldrlt	r3, [r1, r0]
 800344c:	18c0      	addlt	r0, r0, r3
 800344e:	4770      	bx	lr

08003450 <_init>:
 8003450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003452:	bf00      	nop
 8003454:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003456:	bc08      	pop	{r3}
 8003458:	469e      	mov	lr, r3
 800345a:	4770      	bx	lr

0800345c <_fini>:
 800345c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800345e:	bf00      	nop
 8003460:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003462:	bc08      	pop	{r3}
 8003464:	469e      	mov	lr, r3
 8003466:	4770      	bx	lr
