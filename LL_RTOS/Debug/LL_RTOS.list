
LL_RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000057e0  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  08005980  08005980  00006980  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005a58  08005a58  00007060  2**0
                  CONTENTS
  4 .ARM          00000008  08005a58  08005a58  00006a58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005a60  08005a60  00007060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005a60  08005a60  00006a60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005a64  08005a64  00006a64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08005a68  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004ba0  20000060  08005ac8  00007060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004c00  08005ac8  00007c00  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007060  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015b40  00000000  00000000  00007090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000034bb  00000000  00000000  0001cbd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014f0  00000000  00000000  00020090  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001006  00000000  00000000  00021580  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004046  00000000  00000000  00022586  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001520e  00000000  00000000  000265cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a2c6a  00000000  00000000  0003b7da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000de444  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005ab8  00000000  00000000  000de488  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  000e3f40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000060 	.word	0x20000060
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005968 	.word	0x08005968

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000064 	.word	0x20000064
 80001dc:	08005968 	.word	0x08005968

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b96a 	b.w	80004cc <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	460c      	mov	r4, r1
 8000218:	2b00      	cmp	r3, #0
 800021a:	d14e      	bne.n	80002ba <__udivmoddi4+0xaa>
 800021c:	4694      	mov	ip, r2
 800021e:	458c      	cmp	ip, r1
 8000220:	4686      	mov	lr, r0
 8000222:	fab2 f282 	clz	r2, r2
 8000226:	d962      	bls.n	80002ee <__udivmoddi4+0xde>
 8000228:	b14a      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022a:	f1c2 0320 	rsb	r3, r2, #32
 800022e:	4091      	lsls	r1, r2
 8000230:	fa20 f303 	lsr.w	r3, r0, r3
 8000234:	fa0c fc02 	lsl.w	ip, ip, r2
 8000238:	4319      	orrs	r1, r3
 800023a:	fa00 fe02 	lsl.w	lr, r0, r2
 800023e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000242:	fa1f f68c 	uxth.w	r6, ip
 8000246:	fbb1 f4f7 	udiv	r4, r1, r7
 800024a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800024e:	fb07 1114 	mls	r1, r7, r4, r1
 8000252:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000256:	fb04 f106 	mul.w	r1, r4, r6
 800025a:	4299      	cmp	r1, r3
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x64>
 800025e:	eb1c 0303 	adds.w	r3, ip, r3
 8000262:	f104 30ff 	add.w	r0, r4, #4294967295
 8000266:	f080 8112 	bcs.w	800048e <__udivmoddi4+0x27e>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 810f 	bls.w	800048e <__udivmoddi4+0x27e>
 8000270:	3c02      	subs	r4, #2
 8000272:	4463      	add	r3, ip
 8000274:	1a59      	subs	r1, r3, r1
 8000276:	fa1f f38e 	uxth.w	r3, lr
 800027a:	fbb1 f0f7 	udiv	r0, r1, r7
 800027e:	fb07 1110 	mls	r1, r7, r0, r1
 8000282:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000286:	fb00 f606 	mul.w	r6, r0, r6
 800028a:	429e      	cmp	r6, r3
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x94>
 800028e:	eb1c 0303 	adds.w	r3, ip, r3
 8000292:	f100 31ff 	add.w	r1, r0, #4294967295
 8000296:	f080 80fc 	bcs.w	8000492 <__udivmoddi4+0x282>
 800029a:	429e      	cmp	r6, r3
 800029c:	f240 80f9 	bls.w	8000492 <__udivmoddi4+0x282>
 80002a0:	4463      	add	r3, ip
 80002a2:	3802      	subs	r0, #2
 80002a4:	1b9b      	subs	r3, r3, r6
 80002a6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002aa:	2100      	movs	r1, #0
 80002ac:	b11d      	cbz	r5, 80002b6 <__udivmoddi4+0xa6>
 80002ae:	40d3      	lsrs	r3, r2
 80002b0:	2200      	movs	r2, #0
 80002b2:	e9c5 3200 	strd	r3, r2, [r5]
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d905      	bls.n	80002ca <__udivmoddi4+0xba>
 80002be:	b10d      	cbz	r5, 80002c4 <__udivmoddi4+0xb4>
 80002c0:	e9c5 0100 	strd	r0, r1, [r5]
 80002c4:	2100      	movs	r1, #0
 80002c6:	4608      	mov	r0, r1
 80002c8:	e7f5      	b.n	80002b6 <__udivmoddi4+0xa6>
 80002ca:	fab3 f183 	clz	r1, r3
 80002ce:	2900      	cmp	r1, #0
 80002d0:	d146      	bne.n	8000360 <__udivmoddi4+0x150>
 80002d2:	42a3      	cmp	r3, r4
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xcc>
 80002d6:	4290      	cmp	r0, r2
 80002d8:	f0c0 80f0 	bcc.w	80004bc <__udivmoddi4+0x2ac>
 80002dc:	1a86      	subs	r6, r0, r2
 80002de:	eb64 0303 	sbc.w	r3, r4, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	2d00      	cmp	r5, #0
 80002e6:	d0e6      	beq.n	80002b6 <__udivmoddi4+0xa6>
 80002e8:	e9c5 6300 	strd	r6, r3, [r5]
 80002ec:	e7e3      	b.n	80002b6 <__udivmoddi4+0xa6>
 80002ee:	2a00      	cmp	r2, #0
 80002f0:	f040 8090 	bne.w	8000414 <__udivmoddi4+0x204>
 80002f4:	eba1 040c 	sub.w	r4, r1, ip
 80002f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002fc:	fa1f f78c 	uxth.w	r7, ip
 8000300:	2101      	movs	r1, #1
 8000302:	fbb4 f6f8 	udiv	r6, r4, r8
 8000306:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030a:	fb08 4416 	mls	r4, r8, r6, r4
 800030e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000312:	fb07 f006 	mul.w	r0, r7, r6
 8000316:	4298      	cmp	r0, r3
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x11c>
 800031a:	eb1c 0303 	adds.w	r3, ip, r3
 800031e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x11a>
 8000324:	4298      	cmp	r0, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2b4>
 800032a:	4626      	mov	r6, r4
 800032c:	1a1c      	subs	r4, r3, r0
 800032e:	fa1f f38e 	uxth.w	r3, lr
 8000332:	fbb4 f0f8 	udiv	r0, r4, r8
 8000336:	fb08 4410 	mls	r4, r8, r0, r4
 800033a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800033e:	fb00 f707 	mul.w	r7, r0, r7
 8000342:	429f      	cmp	r7, r3
 8000344:	d908      	bls.n	8000358 <__udivmoddi4+0x148>
 8000346:	eb1c 0303 	adds.w	r3, ip, r3
 800034a:	f100 34ff 	add.w	r4, r0, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x146>
 8000350:	429f      	cmp	r7, r3
 8000352:	f200 80b0 	bhi.w	80004b6 <__udivmoddi4+0x2a6>
 8000356:	4620      	mov	r0, r4
 8000358:	1bdb      	subs	r3, r3, r7
 800035a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800035e:	e7a5      	b.n	80002ac <__udivmoddi4+0x9c>
 8000360:	f1c1 0620 	rsb	r6, r1, #32
 8000364:	408b      	lsls	r3, r1
 8000366:	fa22 f706 	lsr.w	r7, r2, r6
 800036a:	431f      	orrs	r7, r3
 800036c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000370:	fa04 f301 	lsl.w	r3, r4, r1
 8000374:	ea43 030c 	orr.w	r3, r3, ip
 8000378:	40f4      	lsrs	r4, r6
 800037a:	fa00 f801 	lsl.w	r8, r0, r1
 800037e:	0c38      	lsrs	r0, r7, #16
 8000380:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000384:	fbb4 fef0 	udiv	lr, r4, r0
 8000388:	fa1f fc87 	uxth.w	ip, r7
 800038c:	fb00 441e 	mls	r4, r0, lr, r4
 8000390:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000394:	fb0e f90c 	mul.w	r9, lr, ip
 8000398:	45a1      	cmp	r9, r4
 800039a:	fa02 f201 	lsl.w	r2, r2, r1
 800039e:	d90a      	bls.n	80003b6 <__udivmoddi4+0x1a6>
 80003a0:	193c      	adds	r4, r7, r4
 80003a2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003a6:	f080 8084 	bcs.w	80004b2 <__udivmoddi4+0x2a2>
 80003aa:	45a1      	cmp	r9, r4
 80003ac:	f240 8081 	bls.w	80004b2 <__udivmoddi4+0x2a2>
 80003b0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003b4:	443c      	add	r4, r7
 80003b6:	eba4 0409 	sub.w	r4, r4, r9
 80003ba:	fa1f f983 	uxth.w	r9, r3
 80003be:	fbb4 f3f0 	udiv	r3, r4, r0
 80003c2:	fb00 4413 	mls	r4, r0, r3, r4
 80003c6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ca:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d907      	bls.n	80003e2 <__udivmoddi4+0x1d2>
 80003d2:	193c      	adds	r4, r7, r4
 80003d4:	f103 30ff 	add.w	r0, r3, #4294967295
 80003d8:	d267      	bcs.n	80004aa <__udivmoddi4+0x29a>
 80003da:	45a4      	cmp	ip, r4
 80003dc:	d965      	bls.n	80004aa <__udivmoddi4+0x29a>
 80003de:	3b02      	subs	r3, #2
 80003e0:	443c      	add	r4, r7
 80003e2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003e6:	fba0 9302 	umull	r9, r3, r0, r2
 80003ea:	eba4 040c 	sub.w	r4, r4, ip
 80003ee:	429c      	cmp	r4, r3
 80003f0:	46ce      	mov	lr, r9
 80003f2:	469c      	mov	ip, r3
 80003f4:	d351      	bcc.n	800049a <__udivmoddi4+0x28a>
 80003f6:	d04e      	beq.n	8000496 <__udivmoddi4+0x286>
 80003f8:	b155      	cbz	r5, 8000410 <__udivmoddi4+0x200>
 80003fa:	ebb8 030e 	subs.w	r3, r8, lr
 80003fe:	eb64 040c 	sbc.w	r4, r4, ip
 8000402:	fa04 f606 	lsl.w	r6, r4, r6
 8000406:	40cb      	lsrs	r3, r1
 8000408:	431e      	orrs	r6, r3
 800040a:	40cc      	lsrs	r4, r1
 800040c:	e9c5 6400 	strd	r6, r4, [r5]
 8000410:	2100      	movs	r1, #0
 8000412:	e750      	b.n	80002b6 <__udivmoddi4+0xa6>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f103 	lsr.w	r1, r0, r3
 800041c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000420:	fa24 f303 	lsr.w	r3, r4, r3
 8000424:	4094      	lsls	r4, r2
 8000426:	430c      	orrs	r4, r1
 8000428:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800042c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000430:	fa1f f78c 	uxth.w	r7, ip
 8000434:	fbb3 f0f8 	udiv	r0, r3, r8
 8000438:	fb08 3110 	mls	r1, r8, r0, r3
 800043c:	0c23      	lsrs	r3, r4, #16
 800043e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000442:	fb00 f107 	mul.w	r1, r0, r7
 8000446:	4299      	cmp	r1, r3
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x24c>
 800044a:	eb1c 0303 	adds.w	r3, ip, r3
 800044e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000452:	d22c      	bcs.n	80004ae <__udivmoddi4+0x29e>
 8000454:	4299      	cmp	r1, r3
 8000456:	d92a      	bls.n	80004ae <__udivmoddi4+0x29e>
 8000458:	3802      	subs	r0, #2
 800045a:	4463      	add	r3, ip
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b2a4      	uxth	r4, r4
 8000460:	fbb3 f1f8 	udiv	r1, r3, r8
 8000464:	fb08 3311 	mls	r3, r8, r1, r3
 8000468:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800046c:	fb01 f307 	mul.w	r3, r1, r7
 8000470:	42a3      	cmp	r3, r4
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x276>
 8000474:	eb1c 0404 	adds.w	r4, ip, r4
 8000478:	f101 36ff 	add.w	r6, r1, #4294967295
 800047c:	d213      	bcs.n	80004a6 <__udivmoddi4+0x296>
 800047e:	42a3      	cmp	r3, r4
 8000480:	d911      	bls.n	80004a6 <__udivmoddi4+0x296>
 8000482:	3902      	subs	r1, #2
 8000484:	4464      	add	r4, ip
 8000486:	1ae4      	subs	r4, r4, r3
 8000488:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800048c:	e739      	b.n	8000302 <__udivmoddi4+0xf2>
 800048e:	4604      	mov	r4, r0
 8000490:	e6f0      	b.n	8000274 <__udivmoddi4+0x64>
 8000492:	4608      	mov	r0, r1
 8000494:	e706      	b.n	80002a4 <__udivmoddi4+0x94>
 8000496:	45c8      	cmp	r8, r9
 8000498:	d2ae      	bcs.n	80003f8 <__udivmoddi4+0x1e8>
 800049a:	ebb9 0e02 	subs.w	lr, r9, r2
 800049e:	eb63 0c07 	sbc.w	ip, r3, r7
 80004a2:	3801      	subs	r0, #1
 80004a4:	e7a8      	b.n	80003f8 <__udivmoddi4+0x1e8>
 80004a6:	4631      	mov	r1, r6
 80004a8:	e7ed      	b.n	8000486 <__udivmoddi4+0x276>
 80004aa:	4603      	mov	r3, r0
 80004ac:	e799      	b.n	80003e2 <__udivmoddi4+0x1d2>
 80004ae:	4630      	mov	r0, r6
 80004b0:	e7d4      	b.n	800045c <__udivmoddi4+0x24c>
 80004b2:	46d6      	mov	lr, sl
 80004b4:	e77f      	b.n	80003b6 <__udivmoddi4+0x1a6>
 80004b6:	4463      	add	r3, ip
 80004b8:	3802      	subs	r0, #2
 80004ba:	e74d      	b.n	8000358 <__udivmoddi4+0x148>
 80004bc:	4606      	mov	r6, r0
 80004be:	4623      	mov	r3, r4
 80004c0:	4608      	mov	r0, r1
 80004c2:	e70f      	b.n	80002e4 <__udivmoddi4+0xd4>
 80004c4:	3e02      	subs	r6, #2
 80004c6:	4463      	add	r3, ip
 80004c8:	e730      	b.n	800032c <__udivmoddi4+0x11c>
 80004ca:	bf00      	nop

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 80004d0:	b480      	push	{r7}
 80004d2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80004d4:	4b05      	ldr	r3, [pc, #20]	@ (80004ec <LL_RCC_HSI_Enable+0x1c>)
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	4a04      	ldr	r2, [pc, #16]	@ (80004ec <LL_RCC_HSI_Enable+0x1c>)
 80004da:	f043 0301 	orr.w	r3, r3, #1
 80004de:	6013      	str	r3, [r2, #0]
}
 80004e0:	bf00      	nop
 80004e2:	46bd      	mov	sp, r7
 80004e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop
 80004ec:	40023800 	.word	0x40023800

080004f0 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 80004f0:	b480      	push	{r7}
 80004f2:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 80004f4:	4b06      	ldr	r3, [pc, #24]	@ (8000510 <LL_RCC_HSI_IsReady+0x20>)
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	f003 0302 	and.w	r3, r3, #2
 80004fc:	2b02      	cmp	r3, #2
 80004fe:	bf0c      	ite	eq
 8000500:	2301      	moveq	r3, #1
 8000502:	2300      	movne	r3, #0
 8000504:	b2db      	uxtb	r3, r3
}
 8000506:	4618      	mov	r0, r3
 8000508:	46bd      	mov	sp, r7
 800050a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050e:	4770      	bx	lr
 8000510:	40023800 	.word	0x40023800

08000514 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 31
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8000514:	b480      	push	{r7}
 8000516:	b083      	sub	sp, #12
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 800051c:	4b07      	ldr	r3, [pc, #28]	@ (800053c <LL_RCC_HSI_SetCalibTrimming+0x28>)
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	00db      	lsls	r3, r3, #3
 8000528:	4904      	ldr	r1, [pc, #16]	@ (800053c <LL_RCC_HSI_SetCalibTrimming+0x28>)
 800052a:	4313      	orrs	r3, r2
 800052c:	600b      	str	r3, [r1, #0]
}
 800052e:	bf00      	nop
 8000530:	370c      	adds	r7, #12
 8000532:	46bd      	mov	sp, r7
 8000534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000538:	4770      	bx	lr
 800053a:	bf00      	nop
 800053c:	40023800 	.word	0x40023800

08000540 <LL_RCC_SetSysClkSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8000540:	b480      	push	{r7}
 8000542:	b083      	sub	sp, #12
 8000544:	af00      	add	r7, sp, #0
 8000546:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000548:	4b06      	ldr	r3, [pc, #24]	@ (8000564 <LL_RCC_SetSysClkSource+0x24>)
 800054a:	689b      	ldr	r3, [r3, #8]
 800054c:	f023 0203 	bic.w	r2, r3, #3
 8000550:	4904      	ldr	r1, [pc, #16]	@ (8000564 <LL_RCC_SetSysClkSource+0x24>)
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	4313      	orrs	r3, r2
 8000556:	608b      	str	r3, [r1, #8]
}
 8000558:	bf00      	nop
 800055a:	370c      	adds	r7, #12
 800055c:	46bd      	mov	sp, r7
 800055e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000562:	4770      	bx	lr
 8000564:	40023800 	.word	0x40023800

08000568 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000568:	b480      	push	{r7}
 800056a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800056c:	4b04      	ldr	r3, [pc, #16]	@ (8000580 <LL_RCC_GetSysClkSource+0x18>)
 800056e:	689b      	ldr	r3, [r3, #8]
 8000570:	f003 030c 	and.w	r3, r3, #12
}
 8000574:	4618      	mov	r0, r3
 8000576:	46bd      	mov	sp, r7
 8000578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop
 8000580:	40023800 	.word	0x40023800

08000584 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000584:	b480      	push	{r7}
 8000586:	b083      	sub	sp, #12
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800058c:	4b06      	ldr	r3, [pc, #24]	@ (80005a8 <LL_RCC_SetAHBPrescaler+0x24>)
 800058e:	689b      	ldr	r3, [r3, #8]
 8000590:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000594:	4904      	ldr	r1, [pc, #16]	@ (80005a8 <LL_RCC_SetAHBPrescaler+0x24>)
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	4313      	orrs	r3, r2
 800059a:	608b      	str	r3, [r1, #8]
}
 800059c:	bf00      	nop
 800059e:	370c      	adds	r7, #12
 80005a0:	46bd      	mov	sp, r7
 80005a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a6:	4770      	bx	lr
 80005a8:	40023800 	.word	0x40023800

080005ac <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80005ac:	b480      	push	{r7}
 80005ae:	b083      	sub	sp, #12
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80005b4:	4b06      	ldr	r3, [pc, #24]	@ (80005d0 <LL_RCC_SetAPB1Prescaler+0x24>)
 80005b6:	689b      	ldr	r3, [r3, #8]
 80005b8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80005bc:	4904      	ldr	r1, [pc, #16]	@ (80005d0 <LL_RCC_SetAPB1Prescaler+0x24>)
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	4313      	orrs	r3, r2
 80005c2:	608b      	str	r3, [r1, #8]
}
 80005c4:	bf00      	nop
 80005c6:	370c      	adds	r7, #12
 80005c8:	46bd      	mov	sp, r7
 80005ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ce:	4770      	bx	lr
 80005d0:	40023800 	.word	0x40023800

080005d4 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80005d4:	b480      	push	{r7}
 80005d6:	b083      	sub	sp, #12
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80005dc:	4b06      	ldr	r3, [pc, #24]	@ (80005f8 <LL_RCC_SetAPB2Prescaler+0x24>)
 80005de:	689b      	ldr	r3, [r3, #8]
 80005e0:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80005e4:	4904      	ldr	r1, [pc, #16]	@ (80005f8 <LL_RCC_SetAPB2Prescaler+0x24>)
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	4313      	orrs	r3, r2
 80005ea:	608b      	str	r3, [r1, #8]
}
 80005ec:	bf00      	nop
 80005ee:	370c      	adds	r7, #12
 80005f0:	46bd      	mov	sp, r7
 80005f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f6:	4770      	bx	lr
 80005f8:	40023800 	.word	0x40023800

080005fc <LL_RCC_SetTIMPrescaler>:
  *         @arg @ref LL_RCC_TIM_PRESCALER_TWICE
  *         @arg @ref LL_RCC_TIM_PRESCALER_FOUR_TIMES
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetTIMPrescaler(uint32_t Prescaler)
{
 80005fc:	b480      	push	{r7}
 80005fe:	b083      	sub	sp, #12
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->DCKCFGR, RCC_DCKCFGR_TIMPRE, Prescaler);
 8000604:	4b07      	ldr	r3, [pc, #28]	@ (8000624 <LL_RCC_SetTIMPrescaler+0x28>)
 8000606:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800060a:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800060e:	4905      	ldr	r1, [pc, #20]	@ (8000624 <LL_RCC_SetTIMPrescaler+0x28>)
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	4313      	orrs	r3, r2
 8000614:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
}
 8000618:	bf00      	nop
 800061a:	370c      	adds	r7, #12
 800061c:	46bd      	mov	sp, r7
 800061e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000622:	4770      	bx	lr
 8000624:	40023800 	.word	0x40023800

08000628 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8000628:	b480      	push	{r7}
 800062a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800062c:	4b05      	ldr	r3, [pc, #20]	@ (8000644 <LL_RCC_PLL_Enable+0x1c>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	4a04      	ldr	r2, [pc, #16]	@ (8000644 <LL_RCC_PLL_Enable+0x1c>)
 8000632:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000636:	6013      	str	r3, [r2, #0]
}
 8000638:	bf00      	nop
 800063a:	46bd      	mov	sp, r7
 800063c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000640:	4770      	bx	lr
 8000642:	bf00      	nop
 8000644:	40023800 	.word	0x40023800

08000648 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8000648:	b480      	push	{r7}
 800064a:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 800064c:	4b07      	ldr	r3, [pc, #28]	@ (800066c <LL_RCC_PLL_IsReady+0x24>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000654:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8000658:	bf0c      	ite	eq
 800065a:	2301      	moveq	r3, #1
 800065c:	2300      	movne	r3, #0
 800065e:	b2db      	uxtb	r3, r3
}
 8000660:	4618      	mov	r0, r3
 8000662:	46bd      	mov	sp, r7
 8000664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000668:	4770      	bx	lr
 800066a:	bf00      	nop
 800066c:	40023800 	.word	0x40023800

08000670 <LL_RCC_PLL_ConfigDomain_SYS>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP_R)
{
 8000670:	b480      	push	{r7}
 8000672:	b085      	sub	sp, #20
 8000674:	af00      	add	r7, sp, #0
 8000676:	60f8      	str	r0, [r7, #12]
 8000678:	60b9      	str	r1, [r7, #8]
 800067a:	607a      	str	r2, [r7, #4]
 800067c:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN,
 800067e:	4b0d      	ldr	r3, [pc, #52]	@ (80006b4 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8000680:	685a      	ldr	r2, [r3, #4]
 8000682:	4b0d      	ldr	r3, [pc, #52]	@ (80006b8 <LL_RCC_PLL_ConfigDomain_SYS+0x48>)
 8000684:	4013      	ands	r3, r2
 8000686:	68f9      	ldr	r1, [r7, #12]
 8000688:	68ba      	ldr	r2, [r7, #8]
 800068a:	4311      	orrs	r1, r2
 800068c:	687a      	ldr	r2, [r7, #4]
 800068e:	0192      	lsls	r2, r2, #6
 8000690:	430a      	orrs	r2, r1
 8000692:	4908      	ldr	r1, [pc, #32]	@ (80006b4 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8000694:	4313      	orrs	r3, r2
 8000696:	604b      	str	r3, [r1, #4]
             Source | PLLM | PLLN << RCC_PLLCFGR_PLLN_Pos);
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLP, PLLP_R);
 8000698:	4b06      	ldr	r3, [pc, #24]	@ (80006b4 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 800069a:	685b      	ldr	r3, [r3, #4]
 800069c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80006a0:	4904      	ldr	r1, [pc, #16]	@ (80006b4 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 80006a2:	683b      	ldr	r3, [r7, #0]
 80006a4:	4313      	orrs	r3, r2
 80006a6:	604b      	str	r3, [r1, #4]
#if defined(RCC_PLLR_SYSCLK_SUPPORT)
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLR, PLLP_R);
#endif /* RCC_PLLR_SYSCLK_SUPPORT */
}
 80006a8:	bf00      	nop
 80006aa:	3714      	adds	r7, #20
 80006ac:	46bd      	mov	sp, r7
 80006ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b2:	4770      	bx	lr
 80006b4:	40023800 	.word	0x40023800
 80006b8:	ffbf8000 	.word	0xffbf8000

080006bc <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80006bc:	b480      	push	{r7}
 80006be:	b085      	sub	sp, #20
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 80006c4:	4b08      	ldr	r3, [pc, #32]	@ (80006e8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80006c6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80006c8:	4907      	ldr	r1, [pc, #28]	@ (80006e8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	4313      	orrs	r3, r2
 80006ce:	630b      	str	r3, [r1, #48]	@ 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80006d0:	4b05      	ldr	r3, [pc, #20]	@ (80006e8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80006d2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	4013      	ands	r3, r2
 80006d8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80006da:	68fb      	ldr	r3, [r7, #12]
}
 80006dc:	bf00      	nop
 80006de:	3714      	adds	r7, #20
 80006e0:	46bd      	mov	sp, r7
 80006e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e6:	4770      	bx	lr
 80006e8:	40023800 	.word	0x40023800

080006ec <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80006ec:	b480      	push	{r7}
 80006ee:	b085      	sub	sp, #20
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 80006f4:	4b08      	ldr	r3, [pc, #32]	@ (8000718 <LL_APB1_GRP1_EnableClock+0x2c>)
 80006f6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80006f8:	4907      	ldr	r1, [pc, #28]	@ (8000718 <LL_APB1_GRP1_EnableClock+0x2c>)
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	4313      	orrs	r3, r2
 80006fe:	640b      	str	r3, [r1, #64]	@ 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000700:	4b05      	ldr	r3, [pc, #20]	@ (8000718 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000702:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	4013      	ands	r3, r2
 8000708:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800070a:	68fb      	ldr	r3, [r7, #12]
}
 800070c:	bf00      	nop
 800070e:	3714      	adds	r7, #20
 8000710:	46bd      	mov	sp, r7
 8000712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000716:	4770      	bx	lr
 8000718:	40023800 	.word	0x40023800

0800071c <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 800071c:	b480      	push	{r7}
 800071e:	b083      	sub	sp, #12
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000724:	4b06      	ldr	r3, [pc, #24]	@ (8000740 <LL_FLASH_SetLatency+0x24>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	f023 0207 	bic.w	r2, r3, #7
 800072c:	4904      	ldr	r1, [pc, #16]	@ (8000740 <LL_FLASH_SetLatency+0x24>)
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	4313      	orrs	r3, r2
 8000732:	600b      	str	r3, [r1, #0]
}
 8000734:	bf00      	nop
 8000736:	370c      	adds	r7, #12
 8000738:	46bd      	mov	sp, r7
 800073a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073e:	4770      	bx	lr
 8000740:	40023c00 	.word	0x40023c00

08000744 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_13
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8000744:	b480      	push	{r7}
 8000746:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8000748:	4b04      	ldr	r3, [pc, #16]	@ (800075c <LL_FLASH_GetLatency+0x18>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	f003 0307 	and.w	r3, r3, #7
}
 8000750:	4618      	mov	r0, r3
 8000752:	46bd      	mov	sp, r7
 8000754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000758:	4770      	bx	lr
 800075a:	bf00      	nop
 800075c:	40023c00 	.word	0x40023c00

08000760 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  *         (*) LL_PWR_REGU_VOLTAGE_SCALE1 is not available for STM32F401xx devices
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 8000760:	b480      	push	{r7}
 8000762:	b083      	sub	sp, #12
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 8000768:	4b06      	ldr	r3, [pc, #24]	@ (8000784 <LL_PWR_SetRegulVoltageScaling+0x24>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8000770:	4904      	ldr	r1, [pc, #16]	@ (8000784 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	4313      	orrs	r3, r2
 8000776:	600b      	str	r3, [r1, #0]
}
 8000778:	bf00      	nop
 800077a:	370c      	adds	r7, #12
 800077c:	46bd      	mov	sp, r7
 800077e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000782:	4770      	bx	lr
 8000784:	40007000 	.word	0x40007000

08000788 <LL_PWR_IsActiveFlag_VOS>:
  * @brief  Indicate whether the Regulator is ready in the selected voltage range or if its output voltage is still changing to the required voltage level
  * @rmtoll CSR   VOS       LL_PWR_IsActiveFlag_VOS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_VOS(void)
{
 8000788:	b480      	push	{r7}
 800078a:	af00      	add	r7, sp, #0
  return (READ_BIT(PWR->CSR, LL_PWR_CSR_VOS) == (LL_PWR_CSR_VOS));
 800078c:	4b07      	ldr	r3, [pc, #28]	@ (80007ac <LL_PWR_IsActiveFlag_VOS+0x24>)
 800078e:	685b      	ldr	r3, [r3, #4]
 8000790:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000794:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8000798:	bf0c      	ite	eq
 800079a:	2301      	moveq	r3, #1
 800079c:	2300      	movne	r3, #0
 800079e:	b2db      	uxtb	r3, r3
}
 80007a0:	4618      	mov	r0, r3
 80007a2:	46bd      	mov	sp, r7
 80007a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a8:	4770      	bx	lr
 80007aa:	bf00      	nop
 80007ac:	40007000 	.word	0x40007000

080007b0 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 80007b0:	b480      	push	{r7}
 80007b2:	b083      	sub	sp, #12
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	68db      	ldr	r3, [r3, #12]
 80007bc:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	60da      	str	r2, [r3, #12]
}
 80007c4:	bf00      	nop
 80007c6:	370c      	adds	r7, #12
 80007c8:	46bd      	mov	sp, r7
 80007ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ce:	4770      	bx	lr

080007d0 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 80007d0:	b480      	push	{r7}
 80007d2:	b083      	sub	sp, #12
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	691b      	ldr	r3, [r3, #16]
 80007dc:	f423 4290 	bic.w	r2, r3, #18432	@ 0x4800
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	695b      	ldr	r3, [r3, #20]
 80007e8:	f023 022a 	bic.w	r2, r3, #42	@ 0x2a
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	615a      	str	r2, [r3, #20]
}
 80007f0:	bf00      	nop
 80007f2:	370c      	adds	r7, #12
 80007f4:	46bd      	mov	sp, r7
 80007f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fa:	4770      	bx	lr

080007fc <LL_GPIO_IsInputPinSet>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_GPIO_IsInputPinSet(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80007fc:	b480      	push	{r7}
 80007fe:	b083      	sub	sp, #12
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
 8000804:	6039      	str	r1, [r7, #0]
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	691a      	ldr	r2, [r3, #16]
 800080a:	683b      	ldr	r3, [r7, #0]
 800080c:	4013      	ands	r3, r2
 800080e:	683a      	ldr	r2, [r7, #0]
 8000810:	429a      	cmp	r2, r3
 8000812:	bf0c      	ite	eq
 8000814:	2301      	moveq	r3, #1
 8000816:	2300      	movne	r3, #0
 8000818:	b2db      	uxtb	r3, r3
}
 800081a:	4618      	mov	r0, r3
 800081c:	370c      	adds	r7, #12
 800081e:	46bd      	mov	sp, r7
 8000820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000824:	4770      	bx	lr

08000826 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000826:	b480      	push	{r7}
 8000828:	b083      	sub	sp, #12
 800082a:	af00      	add	r7, sp, #0
 800082c:	6078      	str	r0, [r7, #4]
 800082e:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8000830:	683b      	ldr	r3, [r7, #0]
 8000832:	041a      	lsls	r2, r3, #16
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	619a      	str	r2, [r3, #24]
}
 8000838:	bf00      	nop
 800083a:	370c      	adds	r7, #12
 800083c:	46bd      	mov	sp, r7
 800083e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000842:	4770      	bx	lr

08000844 <LL_GPIO_TogglePin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000844:	b480      	push	{r7}
 8000846:	b085      	sub	sp, #20
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
 800084c:	6039      	str	r1, [r7, #0]
  uint32_t odr = READ_REG(GPIOx->ODR);
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	695b      	ldr	r3, [r3, #20]
 8000852:	60fb      	str	r3, [r7, #12]
  WRITE_REG(GPIOx->BSRR, ((odr & PinMask) << 16u) | (~odr & PinMask));
 8000854:	68fa      	ldr	r2, [r7, #12]
 8000856:	683b      	ldr	r3, [r7, #0]
 8000858:	4013      	ands	r3, r2
 800085a:	041a      	lsls	r2, r3, #16
 800085c:	68fb      	ldr	r3, [r7, #12]
 800085e:	43d9      	mvns	r1, r3
 8000860:	683b      	ldr	r3, [r7, #0]
 8000862:	400b      	ands	r3, r1
 8000864:	431a      	orrs	r2, r3
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	619a      	str	r2, [r3, #24]
}
 800086a:	bf00      	nop
 800086c:	3714      	adds	r7, #20
 800086e:	46bd      	mov	sp, r7
 8000870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000874:	4770      	bx	lr
	...

08000878 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800087c:	f000 fa86 	bl	8000d8c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000880:	f000 f840 	bl	8000904 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000884:	f000 f8e4 	bl	8000a50 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000888:	f000 f892 	bl	80009b0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800088c:	f001 fc82 	bl	8002194 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of go_sema */
  go_semaHandle = osSemaphoreNew(1, 0, &go_sema_attributes);
 8000890:	4a11      	ldr	r2, [pc, #68]	@ (80008d8 <main+0x60>)
 8000892:	2100      	movs	r1, #0
 8000894:	2001      	movs	r0, #1
 8000896:	f001 fd74 	bl	8002382 <osSemaphoreNew>
 800089a:	4603      	mov	r3, r0
 800089c:	4a0f      	ldr	r2, [pc, #60]	@ (80008dc <main+0x64>)
 800089e:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80008a0:	4a0f      	ldr	r2, [pc, #60]	@ (80008e0 <main+0x68>)
 80008a2:	2100      	movs	r1, #0
 80008a4:	480f      	ldr	r0, [pc, #60]	@ (80008e4 <main+0x6c>)
 80008a6:	f001 fcbf 	bl	8002228 <osThreadNew>
 80008aa:	4603      	mov	r3, r0
 80008ac:	4a0e      	ldr	r2, [pc, #56]	@ (80008e8 <main+0x70>)
 80008ae:	6013      	str	r3, [r2, #0]

  /* creation of led_task */
  led_taskHandle = osThreadNew(StartTask02, NULL, &led_task_attributes);
 80008b0:	4a0e      	ldr	r2, [pc, #56]	@ (80008ec <main+0x74>)
 80008b2:	2100      	movs	r1, #0
 80008b4:	480e      	ldr	r0, [pc, #56]	@ (80008f0 <main+0x78>)
 80008b6:	f001 fcb7 	bl	8002228 <osThreadNew>
 80008ba:	4603      	mov	r3, r0
 80008bc:	4a0d      	ldr	r2, [pc, #52]	@ (80008f4 <main+0x7c>)
 80008be:	6013      	str	r3, [r2, #0]

  /* creation of button_task */
  button_taskHandle = osThreadNew(StartTask03, NULL, &button_task_attributes);
 80008c0:	4a0d      	ldr	r2, [pc, #52]	@ (80008f8 <main+0x80>)
 80008c2:	2100      	movs	r1, #0
 80008c4:	480d      	ldr	r0, [pc, #52]	@ (80008fc <main+0x84>)
 80008c6:	f001 fcaf 	bl	8002228 <osThreadNew>
 80008ca:	4603      	mov	r3, r0
 80008cc:	4a0c      	ldr	r2, [pc, #48]	@ (8000900 <main+0x88>)
 80008ce:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80008d0:	f001 fc84 	bl	80021dc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80008d4:	bf00      	nop
 80008d6:	e7fd      	b.n	80008d4 <main+0x5c>
 80008d8:	08005a30 	.word	0x08005a30
 80008dc:	20000088 	.word	0x20000088
 80008e0:	080059c4 	.word	0x080059c4
 80008e4:	08000acd 	.word	0x08000acd
 80008e8:	2000007c 	.word	0x2000007c
 80008ec:	080059e8 	.word	0x080059e8
 80008f0:	08000add 	.word	0x08000add
 80008f4:	20000080 	.word	0x20000080
 80008f8:	08005a0c 	.word	0x08005a0c
 80008fc:	08000b15 	.word	0x08000b15
 8000900:	20000084 	.word	0x20000084

08000904 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_2);
 8000908:	2002      	movs	r0, #2
 800090a:	f7ff ff07 	bl	800071c <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_2)
 800090e:	bf00      	nop
 8000910:	f7ff ff18 	bl	8000744 <LL_FLASH_GetLatency>
 8000914:	4603      	mov	r3, r0
 8000916:	2b02      	cmp	r3, #2
 8000918:	d1fa      	bne.n	8000910 <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 800091a:	f44f 4040 	mov.w	r0, #49152	@ 0xc000
 800091e:	f7ff ff1f 	bl	8000760 <LL_PWR_SetRegulVoltageScaling>
  LL_RCC_HSI_SetCalibTrimming(16);
 8000922:	2010      	movs	r0, #16
 8000924:	f7ff fdf6 	bl	8000514 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_HSI_Enable();
 8000928:	f7ff fdd2 	bl	80004d0 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 800092c:	bf00      	nop
 800092e:	f7ff fddf 	bl	80004f0 <LL_RCC_HSI_IsReady>
 8000932:	4603      	mov	r3, r0
 8000934:	2b01      	cmp	r3, #1
 8000936:	d1fa      	bne.n	800092e <SystemClock_Config+0x2a>
  {

  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSI, LL_RCC_PLLM_DIV_16, 336, LL_RCC_PLLP_DIV_4);
 8000938:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800093c:	f44f 72a8 	mov.w	r2, #336	@ 0x150
 8000940:	2110      	movs	r1, #16
 8000942:	2000      	movs	r0, #0
 8000944:	f7ff fe94 	bl	8000670 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 8000948:	f7ff fe6e 	bl	8000628 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 800094c:	bf00      	nop
 800094e:	f7ff fe7b 	bl	8000648 <LL_RCC_PLL_IsReady>
 8000952:	4603      	mov	r3, r0
 8000954:	2b01      	cmp	r3, #1
 8000956:	d1fa      	bne.n	800094e <SystemClock_Config+0x4a>
  {

  }
  while (LL_PWR_IsActiveFlag_VOS() == 0)
 8000958:	bf00      	nop
 800095a:	f7ff ff15 	bl	8000788 <LL_PWR_IsActiveFlag_VOS>
 800095e:	4603      	mov	r3, r0
 8000960:	2b00      	cmp	r3, #0
 8000962:	d0fa      	beq.n	800095a <SystemClock_Config+0x56>
  {
  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8000964:	2000      	movs	r0, #0
 8000966:	f7ff fe0d 	bl	8000584 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_2);
 800096a:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800096e:	f7ff fe1d 	bl	80005ac <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8000972:	2000      	movs	r0, #0
 8000974:	f7ff fe2e 	bl	80005d4 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8000978:	2002      	movs	r0, #2
 800097a:	f7ff fde1 	bl	8000540 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 800097e:	bf00      	nop
 8000980:	f7ff fdf2 	bl	8000568 <LL_RCC_GetSysClkSource>
 8000984:	4603      	mov	r3, r0
 8000986:	2b08      	cmp	r3, #8
 8000988:	d1fa      	bne.n	8000980 <SystemClock_Config+0x7c>
  {

  }
  LL_SetSystemCoreClock(84000000);
 800098a:	4808      	ldr	r0, [pc, #32]	@ (80009ac <SystemClock_Config+0xa8>)
 800098c:	f001 fbae 	bl	80020ec <LL_SetSystemCoreClock>

   /* Update the time base */
  if (HAL_InitTick (TICK_INT_PRIORITY) != HAL_OK)
 8000990:	200f      	movs	r0, #15
 8000992:	f000 f91d 	bl	8000bd0 <HAL_InitTick>
 8000996:	4603      	mov	r3, r0
 8000998:	2b00      	cmp	r3, #0
 800099a:	d001      	beq.n	80009a0 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 800099c:	f000 f8e6 	bl	8000b6c <Error_Handler>
  }
  LL_RCC_SetTIMPrescaler(LL_RCC_TIM_PRESCALER_TWICE);
 80009a0:	2000      	movs	r0, #0
 80009a2:	f7ff fe2b 	bl	80005fc <LL_RCC_SetTIMPrescaler>
}
 80009a6:	bf00      	nop
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	0501bd00 	.word	0x0501bd00

080009b0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b08e      	sub	sp, #56	@ 0x38
 80009b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 80009b6:	f107 031c 	add.w	r3, r7, #28
 80009ba:	2200      	movs	r2, #0
 80009bc:	601a      	str	r2, [r3, #0]
 80009be:	605a      	str	r2, [r3, #4]
 80009c0:	609a      	str	r2, [r3, #8]
 80009c2:	60da      	str	r2, [r3, #12]
 80009c4:	611a      	str	r2, [r3, #16]
 80009c6:	615a      	str	r2, [r3, #20]
 80009c8:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ca:	1d3b      	adds	r3, r7, #4
 80009cc:	2200      	movs	r2, #0
 80009ce:	601a      	str	r2, [r3, #0]
 80009d0:	605a      	str	r2, [r3, #4]
 80009d2:	609a      	str	r2, [r3, #8]
 80009d4:	60da      	str	r2, [r3, #12]
 80009d6:	611a      	str	r2, [r3, #16]
 80009d8:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 80009da:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 80009de:	f7ff fe85 	bl	80006ec <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80009e2:	2001      	movs	r0, #1
 80009e4:	f7ff fe6a 	bl	80006bc <LL_AHB1_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80009e8:	230c      	movs	r3, #12
 80009ea:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80009ec:	2302      	movs	r3, #2
 80009ee:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80009f0:	2303      	movs	r3, #3
 80009f2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80009f4:	2300      	movs	r3, #0
 80009f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80009f8:	2300      	movs	r3, #0
 80009fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 80009fc:	2307      	movs	r3, #7
 80009fe:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a00:	1d3b      	adds	r3, r7, #4
 8000a02:	4619      	mov	r1, r3
 8000a04:	4810      	ldr	r0, [pc, #64]	@ (8000a48 <MX_USART2_UART_Init+0x98>)
 8000a06:	f000 feea 	bl	80017de <LL_GPIO_Init>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8000a0a:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8000a0e:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8000a10:	2300      	movs	r3, #0
 8000a12:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8000a14:	2300      	movs	r3, #0
 8000a16:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8000a1c:	230c      	movs	r3, #12
 8000a1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8000a20:	2300      	movs	r3, #0
 8000a22:	633b      	str	r3, [r7, #48]	@ 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8000a24:	2300      	movs	r3, #0
 8000a26:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_USART_Init(USART2, &USART_InitStruct);
 8000a28:	f107 031c 	add.w	r3, r7, #28
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	4807      	ldr	r0, [pc, #28]	@ (8000a4c <MX_USART2_UART_Init+0x9c>)
 8000a30:	f001 faf8 	bl	8002024 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 8000a34:	4805      	ldr	r0, [pc, #20]	@ (8000a4c <MX_USART2_UART_Init+0x9c>)
 8000a36:	f7ff fecb 	bl	80007d0 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 8000a3a:	4804      	ldr	r0, [pc, #16]	@ (8000a4c <MX_USART2_UART_Init+0x9c>)
 8000a3c:	f7ff feb8 	bl	80007b0 <LL_USART_Enable>
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a40:	bf00      	nop
 8000a42:	3738      	adds	r7, #56	@ 0x38
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bd80      	pop	{r7, pc}
 8000a48:	40020000 	.word	0x40020000
 8000a4c:	40004400 	.word	0x40004400

08000a50 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b086      	sub	sp, #24
 8000a54:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a56:	463b      	mov	r3, r7
 8000a58:	2200      	movs	r2, #0
 8000a5a:	601a      	str	r2, [r3, #0]
 8000a5c:	605a      	str	r2, [r3, #4]
 8000a5e:	609a      	str	r2, [r3, #8]
 8000a60:	60da      	str	r2, [r3, #12]
 8000a62:	611a      	str	r2, [r3, #16]
 8000a64:	615a      	str	r2, [r3, #20]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8000a66:	2004      	movs	r0, #4
 8000a68:	f7ff fe28 	bl	80006bc <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 8000a6c:	2080      	movs	r0, #128	@ 0x80
 8000a6e:	f7ff fe25 	bl	80006bc <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8000a72:	2001      	movs	r0, #1
 8000a74:	f7ff fe22 	bl	80006bc <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8000a78:	2002      	movs	r0, #2
 8000a7a:	f7ff fe1f 	bl	80006bc <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(LD2_GPIO_Port, LD2_Pin);
 8000a7e:	2120      	movs	r1, #32
 8000a80:	4810      	ldr	r0, [pc, #64]	@ (8000ac4 <MX_GPIO_Init+0x74>)
 8000a82:	f7ff fed0 	bl	8000826 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_13;
 8000a86:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a8a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000a90:	2301      	movs	r3, #1
 8000a92:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a94:	463b      	mov	r3, r7
 8000a96:	4619      	mov	r1, r3
 8000a98:	480b      	ldr	r0, [pc, #44]	@ (8000ac8 <MX_GPIO_Init+0x78>)
 8000a9a:	f000 fea0 	bl	80017de <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LD2_Pin;
 8000a9e:	2320      	movs	r3, #32
 8000aa0:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000aa2:	2301      	movs	r3, #1
 8000aa4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000ab2:	463b      	mov	r3, r7
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	4803      	ldr	r0, [pc, #12]	@ (8000ac4 <MX_GPIO_Init+0x74>)
 8000ab8:	f000 fe91 	bl	80017de <LL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000abc:	bf00      	nop
 8000abe:	3718      	adds	r7, #24
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	40020000 	.word	0x40020000
 8000ac8:	40020800 	.word	0x40020800

08000acc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b082      	sub	sp, #8
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000ad4:	2001      	movs	r0, #1
 8000ad6:	f001 fc39 	bl	800234c <osDelay>
 8000ada:	e7fb      	b.n	8000ad4 <StartDefaultTask+0x8>

08000adc <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b082      	sub	sp, #8
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
   	   With num (uncomment all the section where there is num), when
   	   the button is pressed, the LED blink 11 times and then stop,
   	   indipendently from the status button.
  */
  //uint32_t num = 0;
  osDelay(1);
 8000ae4:	2001      	movs	r0, #1
 8000ae6:	f001 fc31 	bl	800234c <osDelay>
  /* Infinite loop */
  for(;;)
  {
	/*if(num == 0)*/ osSemaphoreAcquire(go_semaHandle, osWaitForever);
 8000aea:	4b08      	ldr	r3, [pc, #32]	@ (8000b0c <StartTask02+0x30>)
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	f04f 31ff 	mov.w	r1, #4294967295
 8000af2:	4618      	mov	r0, r3
 8000af4:	f001 fcce 	bl	8002494 <osSemaphoreAcquire>
	LL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000af8:	2120      	movs	r1, #32
 8000afa:	4805      	ldr	r0, [pc, #20]	@ (8000b10 <StartTask02+0x34>)
 8000afc:	f7ff fea2 	bl	8000844 <LL_GPIO_TogglePin>
	//num++;
	osDelay(1000);
 8000b00:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000b04:	f001 fc22 	bl	800234c <osDelay>
	/*if(num == 0)*/ osSemaphoreAcquire(go_semaHandle, osWaitForever);
 8000b08:	bf00      	nop
 8000b0a:	e7ee      	b.n	8000aea <StartTask02+0xe>
 8000b0c:	20000088 	.word	0x20000088
 8000b10:	40020000 	.word	0x40020000

08000b14 <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void *argument)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b082      	sub	sp, #8
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
  /* Infinite loop */
  for(;;)
  {
	if (!LL_GPIO_IsInputPinSet(GPIOC, LL_GPIO_PIN_13)) osSemaphoreRelease(go_semaHandle);
 8000b1c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000b20:	4807      	ldr	r0, [pc, #28]	@ (8000b40 <StartTask03+0x2c>)
 8000b22:	f7ff fe6b 	bl	80007fc <LL_GPIO_IsInputPinSet>
 8000b26:	4603      	mov	r3, r0
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d104      	bne.n	8000b36 <StartTask03+0x22>
 8000b2c:	4b05      	ldr	r3, [pc, #20]	@ (8000b44 <StartTask03+0x30>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	4618      	mov	r0, r3
 8000b32:	f001 fd01 	bl	8002538 <osSemaphoreRelease>
	osDelay(250);	// Debouncing
 8000b36:	20fa      	movs	r0, #250	@ 0xfa
 8000b38:	f001 fc08 	bl	800234c <osDelay>
	if (!LL_GPIO_IsInputPinSet(GPIOC, LL_GPIO_PIN_13)) osSemaphoreRelease(go_semaHandle);
 8000b3c:	e7ee      	b.n	8000b1c <StartTask03+0x8>
 8000b3e:	bf00      	nop
 8000b40:	40020800 	.word	0x40020800
 8000b44:	20000088 	.word	0x20000088

08000b48 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b082      	sub	sp, #8
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	4a04      	ldr	r2, [pc, #16]	@ (8000b68 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b56:	4293      	cmp	r3, r2
 8000b58:	d101      	bne.n	8000b5e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000b5a:	f000 f939 	bl	8000dd0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b5e:	bf00      	nop
 8000b60:	3708      	adds	r7, #8
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	40000c00 	.word	0x40000c00

08000b6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b70:	b672      	cpsid	i
}
 8000b72:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b74:	bf00      	nop
 8000b76:	e7fd      	b.n	8000b74 <Error_Handler+0x8>

08000b78 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b082      	sub	sp, #8
 8000b7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b7e:	2300      	movs	r3, #0
 8000b80:	607b      	str	r3, [r7, #4]
 8000b82:	4b12      	ldr	r3, [pc, #72]	@ (8000bcc <HAL_MspInit+0x54>)
 8000b84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b86:	4a11      	ldr	r2, [pc, #68]	@ (8000bcc <HAL_MspInit+0x54>)
 8000b88:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b8c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b8e:	4b0f      	ldr	r3, [pc, #60]	@ (8000bcc <HAL_MspInit+0x54>)
 8000b90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b92:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b96:	607b      	str	r3, [r7, #4]
 8000b98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	603b      	str	r3, [r7, #0]
 8000b9e:	4b0b      	ldr	r3, [pc, #44]	@ (8000bcc <HAL_MspInit+0x54>)
 8000ba0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ba2:	4a0a      	ldr	r2, [pc, #40]	@ (8000bcc <HAL_MspInit+0x54>)
 8000ba4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ba8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000baa:	4b08      	ldr	r3, [pc, #32]	@ (8000bcc <HAL_MspInit+0x54>)
 8000bac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000bb2:	603b      	str	r3, [r7, #0]
 8000bb4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	210f      	movs	r1, #15
 8000bba:	f06f 0001 	mvn.w	r0, #1
 8000bbe:	f000 f9d3 	bl	8000f68 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bc2:	bf00      	nop
 8000bc4:	3708      	adds	r7, #8
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	40023800 	.word	0x40023800

08000bd0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b08e      	sub	sp, #56	@ 0x38
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8000be0:	2300      	movs	r3, #0
 8000be2:	60fb      	str	r3, [r7, #12]
 8000be4:	4b33      	ldr	r3, [pc, #204]	@ (8000cb4 <HAL_InitTick+0xe4>)
 8000be6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000be8:	4a32      	ldr	r2, [pc, #200]	@ (8000cb4 <HAL_InitTick+0xe4>)
 8000bea:	f043 0308 	orr.w	r3, r3, #8
 8000bee:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bf0:	4b30      	ldr	r3, [pc, #192]	@ (8000cb4 <HAL_InitTick+0xe4>)
 8000bf2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bf4:	f003 0308 	and.w	r3, r3, #8
 8000bf8:	60fb      	str	r3, [r7, #12]
 8000bfa:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000bfc:	f107 0210 	add.w	r2, r7, #16
 8000c00:	f107 0314 	add.w	r3, r7, #20
 8000c04:	4611      	mov	r1, r2
 8000c06:	4618      	mov	r0, r3
 8000c08:	f000 f9f8 	bl	8000ffc <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000c0c:	6a3b      	ldr	r3, [r7, #32]
 8000c0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM5 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000c10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d103      	bne.n	8000c1e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000c16:	f000 f9dd 	bl	8000fd4 <HAL_RCC_GetPCLK1Freq>
 8000c1a:	6378      	str	r0, [r7, #52]	@ 0x34
 8000c1c:	e004      	b.n	8000c28 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000c1e:	f000 f9d9 	bl	8000fd4 <HAL_RCC_GetPCLK1Freq>
 8000c22:	4603      	mov	r3, r0
 8000c24:	005b      	lsls	r3, r3, #1
 8000c26:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000c28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000c2a:	4a23      	ldr	r2, [pc, #140]	@ (8000cb8 <HAL_InitTick+0xe8>)
 8000c2c:	fba2 2303 	umull	r2, r3, r2, r3
 8000c30:	0c9b      	lsrs	r3, r3, #18
 8000c32:	3b01      	subs	r3, #1
 8000c34:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 8000c36:	4b21      	ldr	r3, [pc, #132]	@ (8000cbc <HAL_InitTick+0xec>)
 8000c38:	4a21      	ldr	r2, [pc, #132]	@ (8000cc0 <HAL_InitTick+0xf0>)
 8000c3a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 8000c3c:	4b1f      	ldr	r3, [pc, #124]	@ (8000cbc <HAL_InitTick+0xec>)
 8000c3e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000c42:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 8000c44:	4a1d      	ldr	r2, [pc, #116]	@ (8000cbc <HAL_InitTick+0xec>)
 8000c46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000c48:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 8000c4a:	4b1c      	ldr	r3, [pc, #112]	@ (8000cbc <HAL_InitTick+0xec>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c50:	4b1a      	ldr	r3, [pc, #104]	@ (8000cbc <HAL_InitTick+0xec>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	609a      	str	r2, [r3, #8]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c56:	4b19      	ldr	r3, [pc, #100]	@ (8000cbc <HAL_InitTick+0xec>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim5);
 8000c5c:	4817      	ldr	r0, [pc, #92]	@ (8000cbc <HAL_InitTick+0xec>)
 8000c5e:	f000 f9ff 	bl	8001060 <HAL_TIM_Base_Init>
 8000c62:	4603      	mov	r3, r0
 8000c64:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000c68:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d11b      	bne.n	8000ca8 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim5);
 8000c70:	4812      	ldr	r0, [pc, #72]	@ (8000cbc <HAL_InitTick+0xec>)
 8000c72:	f000 fa4f 	bl	8001114 <HAL_TIM_Base_Start_IT>
 8000c76:	4603      	mov	r3, r0
 8000c78:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000c7c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d111      	bne.n	8000ca8 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM5 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8000c84:	2032      	movs	r0, #50	@ 0x32
 8000c86:	f000 f98b 	bl	8000fa0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	2b0f      	cmp	r3, #15
 8000c8e:	d808      	bhi.n	8000ca2 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority, 0U);
 8000c90:	2200      	movs	r2, #0
 8000c92:	6879      	ldr	r1, [r7, #4]
 8000c94:	2032      	movs	r0, #50	@ 0x32
 8000c96:	f000 f967 	bl	8000f68 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c9a:	4a0a      	ldr	r2, [pc, #40]	@ (8000cc4 <HAL_InitTick+0xf4>)
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	6013      	str	r3, [r2, #0]
 8000ca0:	e002      	b.n	8000ca8 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000ca2:	2301      	movs	r3, #1
 8000ca4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000ca8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000cac:	4618      	mov	r0, r3
 8000cae:	3738      	adds	r7, #56	@ 0x38
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd80      	pop	{r7, pc}
 8000cb4:	40023800 	.word	0x40023800
 8000cb8:	431bde83 	.word	0x431bde83
 8000cbc:	2000008c 	.word	0x2000008c
 8000cc0:	40000c00 	.word	0x40000c00
 8000cc4:	20000004 	.word	0x20000004

08000cc8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ccc:	bf00      	nop
 8000cce:	e7fd      	b.n	8000ccc <NMI_Handler+0x4>

08000cd0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cd4:	bf00      	nop
 8000cd6:	e7fd      	b.n	8000cd4 <HardFault_Handler+0x4>

08000cd8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cdc:	bf00      	nop
 8000cde:	e7fd      	b.n	8000cdc <MemManage_Handler+0x4>

08000ce0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ce4:	bf00      	nop
 8000ce6:	e7fd      	b.n	8000ce4 <BusFault_Handler+0x4>

08000ce8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cec:	bf00      	nop
 8000cee:	e7fd      	b.n	8000cec <UsageFault_Handler+0x4>

08000cf0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cf4:	bf00      	nop
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfc:	4770      	bx	lr
	...

08000d00 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8000d04:	4802      	ldr	r0, [pc, #8]	@ (8000d10 <TIM5_IRQHandler+0x10>)
 8000d06:	f000 fa67 	bl	80011d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8000d0a:	bf00      	nop
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	2000008c 	.word	0x2000008c

08000d14 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d18:	4b06      	ldr	r3, [pc, #24]	@ (8000d34 <SystemInit+0x20>)
 8000d1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d1e:	4a05      	ldr	r2, [pc, #20]	@ (8000d34 <SystemInit+0x20>)
 8000d20:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d24:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d28:	bf00      	nop
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d30:	4770      	bx	lr
 8000d32:	bf00      	nop
 8000d34:	e000ed00 	.word	0xe000ed00

08000d38 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000d38:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000d70 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d3c:	f7ff ffea 	bl	8000d14 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d40:	480c      	ldr	r0, [pc, #48]	@ (8000d74 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d42:	490d      	ldr	r1, [pc, #52]	@ (8000d78 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d44:	4a0d      	ldr	r2, [pc, #52]	@ (8000d7c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d48:	e002      	b.n	8000d50 <LoopCopyDataInit>

08000d4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d4e:	3304      	adds	r3, #4

08000d50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d54:	d3f9      	bcc.n	8000d4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d56:	4a0a      	ldr	r2, [pc, #40]	@ (8000d80 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d58:	4c0a      	ldr	r4, [pc, #40]	@ (8000d84 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d5c:	e001      	b.n	8000d62 <LoopFillZerobss>

08000d5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d60:	3204      	adds	r2, #4

08000d62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d64:	d3fb      	bcc.n	8000d5e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d66:	f004 fd75 	bl	8005854 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d6a:	f7ff fd85 	bl	8000878 <main>
  bx  lr    
 8000d6e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000d70:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d78:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000d7c:	08005a68 	.word	0x08005a68
  ldr r2, =_sbss
 8000d80:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000d84:	20004c00 	.word	0x20004c00

08000d88 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d88:	e7fe      	b.n	8000d88 <ADC_IRQHandler>
	...

08000d8c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d90:	4b0e      	ldr	r3, [pc, #56]	@ (8000dcc <HAL_Init+0x40>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	4a0d      	ldr	r2, [pc, #52]	@ (8000dcc <HAL_Init+0x40>)
 8000d96:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000d9a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d9c:	4b0b      	ldr	r3, [pc, #44]	@ (8000dcc <HAL_Init+0x40>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	4a0a      	ldr	r2, [pc, #40]	@ (8000dcc <HAL_Init+0x40>)
 8000da2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000da6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000da8:	4b08      	ldr	r3, [pc, #32]	@ (8000dcc <HAL_Init+0x40>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	4a07      	ldr	r2, [pc, #28]	@ (8000dcc <HAL_Init+0x40>)
 8000dae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000db2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000db4:	2003      	movs	r0, #3
 8000db6:	f000 f8cc 	bl	8000f52 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dba:	200f      	movs	r0, #15
 8000dbc:	f7ff ff08 	bl	8000bd0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000dc0:	f7ff feda 	bl	8000b78 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000dc4:	2300      	movs	r3, #0
}
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	40023c00 	.word	0x40023c00

08000dd0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000dd4:	4b06      	ldr	r3, [pc, #24]	@ (8000df0 <HAL_IncTick+0x20>)
 8000dd6:	781b      	ldrb	r3, [r3, #0]
 8000dd8:	461a      	mov	r2, r3
 8000dda:	4b06      	ldr	r3, [pc, #24]	@ (8000df4 <HAL_IncTick+0x24>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	4413      	add	r3, r2
 8000de0:	4a04      	ldr	r2, [pc, #16]	@ (8000df4 <HAL_IncTick+0x24>)
 8000de2:	6013      	str	r3, [r2, #0]
}
 8000de4:	bf00      	nop
 8000de6:	46bd      	mov	sp, r7
 8000de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dec:	4770      	bx	lr
 8000dee:	bf00      	nop
 8000df0:	20000008 	.word	0x20000008
 8000df4:	200000d4 	.word	0x200000d4

08000df8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	b085      	sub	sp, #20
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	f003 0307 	and.w	r3, r3, #7
 8000e06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e08:	4b0c      	ldr	r3, [pc, #48]	@ (8000e3c <__NVIC_SetPriorityGrouping+0x44>)
 8000e0a:	68db      	ldr	r3, [r3, #12]
 8000e0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e0e:	68ba      	ldr	r2, [r7, #8]
 8000e10:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000e14:	4013      	ands	r3, r2
 8000e16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e1c:	68bb      	ldr	r3, [r7, #8]
 8000e1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e20:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000e24:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e2a:	4a04      	ldr	r2, [pc, #16]	@ (8000e3c <__NVIC_SetPriorityGrouping+0x44>)
 8000e2c:	68bb      	ldr	r3, [r7, #8]
 8000e2e:	60d3      	str	r3, [r2, #12]
}
 8000e30:	bf00      	nop
 8000e32:	3714      	adds	r7, #20
 8000e34:	46bd      	mov	sp, r7
 8000e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3a:	4770      	bx	lr
 8000e3c:	e000ed00 	.word	0xe000ed00

08000e40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e44:	4b04      	ldr	r3, [pc, #16]	@ (8000e58 <__NVIC_GetPriorityGrouping+0x18>)
 8000e46:	68db      	ldr	r3, [r3, #12]
 8000e48:	0a1b      	lsrs	r3, r3, #8
 8000e4a:	f003 0307 	and.w	r3, r3, #7
}
 8000e4e:	4618      	mov	r0, r3
 8000e50:	46bd      	mov	sp, r7
 8000e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e56:	4770      	bx	lr
 8000e58:	e000ed00 	.word	0xe000ed00

08000e5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	b083      	sub	sp, #12
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	4603      	mov	r3, r0
 8000e64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	db0b      	blt.n	8000e86 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e6e:	79fb      	ldrb	r3, [r7, #7]
 8000e70:	f003 021f 	and.w	r2, r3, #31
 8000e74:	4907      	ldr	r1, [pc, #28]	@ (8000e94 <__NVIC_EnableIRQ+0x38>)
 8000e76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e7a:	095b      	lsrs	r3, r3, #5
 8000e7c:	2001      	movs	r0, #1
 8000e7e:	fa00 f202 	lsl.w	r2, r0, r2
 8000e82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000e86:	bf00      	nop
 8000e88:	370c      	adds	r7, #12
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e90:	4770      	bx	lr
 8000e92:	bf00      	nop
 8000e94:	e000e100 	.word	0xe000e100

08000e98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b083      	sub	sp, #12
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	6039      	str	r1, [r7, #0]
 8000ea2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ea4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	db0a      	blt.n	8000ec2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eac:	683b      	ldr	r3, [r7, #0]
 8000eae:	b2da      	uxtb	r2, r3
 8000eb0:	490c      	ldr	r1, [pc, #48]	@ (8000ee4 <__NVIC_SetPriority+0x4c>)
 8000eb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eb6:	0112      	lsls	r2, r2, #4
 8000eb8:	b2d2      	uxtb	r2, r2
 8000eba:	440b      	add	r3, r1
 8000ebc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ec0:	e00a      	b.n	8000ed8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	b2da      	uxtb	r2, r3
 8000ec6:	4908      	ldr	r1, [pc, #32]	@ (8000ee8 <__NVIC_SetPriority+0x50>)
 8000ec8:	79fb      	ldrb	r3, [r7, #7]
 8000eca:	f003 030f 	and.w	r3, r3, #15
 8000ece:	3b04      	subs	r3, #4
 8000ed0:	0112      	lsls	r2, r2, #4
 8000ed2:	b2d2      	uxtb	r2, r2
 8000ed4:	440b      	add	r3, r1
 8000ed6:	761a      	strb	r2, [r3, #24]
}
 8000ed8:	bf00      	nop
 8000eda:	370c      	adds	r7, #12
 8000edc:	46bd      	mov	sp, r7
 8000ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee2:	4770      	bx	lr
 8000ee4:	e000e100 	.word	0xe000e100
 8000ee8:	e000ed00 	.word	0xe000ed00

08000eec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000eec:	b480      	push	{r7}
 8000eee:	b089      	sub	sp, #36	@ 0x24
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	60f8      	str	r0, [r7, #12]
 8000ef4:	60b9      	str	r1, [r7, #8]
 8000ef6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	f003 0307 	and.w	r3, r3, #7
 8000efe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f00:	69fb      	ldr	r3, [r7, #28]
 8000f02:	f1c3 0307 	rsb	r3, r3, #7
 8000f06:	2b04      	cmp	r3, #4
 8000f08:	bf28      	it	cs
 8000f0a:	2304      	movcs	r3, #4
 8000f0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f0e:	69fb      	ldr	r3, [r7, #28]
 8000f10:	3304      	adds	r3, #4
 8000f12:	2b06      	cmp	r3, #6
 8000f14:	d902      	bls.n	8000f1c <NVIC_EncodePriority+0x30>
 8000f16:	69fb      	ldr	r3, [r7, #28]
 8000f18:	3b03      	subs	r3, #3
 8000f1a:	e000      	b.n	8000f1e <NVIC_EncodePriority+0x32>
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f20:	f04f 32ff 	mov.w	r2, #4294967295
 8000f24:	69bb      	ldr	r3, [r7, #24]
 8000f26:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2a:	43da      	mvns	r2, r3
 8000f2c:	68bb      	ldr	r3, [r7, #8]
 8000f2e:	401a      	ands	r2, r3
 8000f30:	697b      	ldr	r3, [r7, #20]
 8000f32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f34:	f04f 31ff 	mov.w	r1, #4294967295
 8000f38:	697b      	ldr	r3, [r7, #20]
 8000f3a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f3e:	43d9      	mvns	r1, r3
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f44:	4313      	orrs	r3, r2
         );
}
 8000f46:	4618      	mov	r0, r3
 8000f48:	3724      	adds	r7, #36	@ 0x24
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr

08000f52 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f52:	b580      	push	{r7, lr}
 8000f54:	b082      	sub	sp, #8
 8000f56:	af00      	add	r7, sp, #0
 8000f58:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f5a:	6878      	ldr	r0, [r7, #4]
 8000f5c:	f7ff ff4c 	bl	8000df8 <__NVIC_SetPriorityGrouping>
}
 8000f60:	bf00      	nop
 8000f62:	3708      	adds	r7, #8
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}

08000f68 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b086      	sub	sp, #24
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	4603      	mov	r3, r0
 8000f70:	60b9      	str	r1, [r7, #8]
 8000f72:	607a      	str	r2, [r7, #4]
 8000f74:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f76:	2300      	movs	r3, #0
 8000f78:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f7a:	f7ff ff61 	bl	8000e40 <__NVIC_GetPriorityGrouping>
 8000f7e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f80:	687a      	ldr	r2, [r7, #4]
 8000f82:	68b9      	ldr	r1, [r7, #8]
 8000f84:	6978      	ldr	r0, [r7, #20]
 8000f86:	f7ff ffb1 	bl	8000eec <NVIC_EncodePriority>
 8000f8a:	4602      	mov	r2, r0
 8000f8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f90:	4611      	mov	r1, r2
 8000f92:	4618      	mov	r0, r3
 8000f94:	f7ff ff80 	bl	8000e98 <__NVIC_SetPriority>
}
 8000f98:	bf00      	nop
 8000f9a:	3718      	adds	r7, #24
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}

08000fa0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b082      	sub	sp, #8
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000faa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f7ff ff54 	bl	8000e5c <__NVIC_EnableIRQ>
}
 8000fb4:	bf00      	nop
 8000fb6:	3708      	adds	r7, #8
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}

08000fbc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8000fc0:	4b03      	ldr	r3, [pc, #12]	@ (8000fd0 <HAL_RCC_GetHCLKFreq+0x14>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
}
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fcc:	4770      	bx	lr
 8000fce:	bf00      	nop
 8000fd0:	20000000 	.word	0x20000000

08000fd4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8000fd8:	f7ff fff0 	bl	8000fbc <HAL_RCC_GetHCLKFreq>
 8000fdc:	4602      	mov	r2, r0
 8000fde:	4b05      	ldr	r3, [pc, #20]	@ (8000ff4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8000fe0:	689b      	ldr	r3, [r3, #8]
 8000fe2:	0a9b      	lsrs	r3, r3, #10
 8000fe4:	f003 0307 	and.w	r3, r3, #7
 8000fe8:	4903      	ldr	r1, [pc, #12]	@ (8000ff8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8000fea:	5ccb      	ldrb	r3, [r1, r3]
 8000fec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	bd80      	pop	{r7, pc}
 8000ff4:	40023800 	.word	0x40023800
 8000ff8:	08005a50 	.word	0x08005a50

08000ffc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b083      	sub	sp, #12
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
 8001004:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	220f      	movs	r2, #15
 800100a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800100c:	4b12      	ldr	r3, [pc, #72]	@ (8001058 <HAL_RCC_GetClockConfig+0x5c>)
 800100e:	689b      	ldr	r3, [r3, #8]
 8001010:	f003 0203 	and.w	r2, r3, #3
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001018:	4b0f      	ldr	r3, [pc, #60]	@ (8001058 <HAL_RCC_GetClockConfig+0x5c>)
 800101a:	689b      	ldr	r3, [r3, #8]
 800101c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001024:	4b0c      	ldr	r3, [pc, #48]	@ (8001058 <HAL_RCC_GetClockConfig+0x5c>)
 8001026:	689b      	ldr	r3, [r3, #8]
 8001028:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001030:	4b09      	ldr	r3, [pc, #36]	@ (8001058 <HAL_RCC_GetClockConfig+0x5c>)
 8001032:	689b      	ldr	r3, [r3, #8]
 8001034:	08db      	lsrs	r3, r3, #3
 8001036:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800103e:	4b07      	ldr	r3, [pc, #28]	@ (800105c <HAL_RCC_GetClockConfig+0x60>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	f003 0207 	and.w	r2, r3, #7
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	601a      	str	r2, [r3, #0]
}
 800104a:	bf00      	nop
 800104c:	370c      	adds	r7, #12
 800104e:	46bd      	mov	sp, r7
 8001050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001054:	4770      	bx	lr
 8001056:	bf00      	nop
 8001058:	40023800 	.word	0x40023800
 800105c:	40023c00 	.word	0x40023c00

08001060 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b082      	sub	sp, #8
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	2b00      	cmp	r3, #0
 800106c:	d101      	bne.n	8001072 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800106e:	2301      	movs	r3, #1
 8001070:	e041      	b.n	80010f6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001078:	b2db      	uxtb	r3, r3
 800107a:	2b00      	cmp	r3, #0
 800107c:	d106      	bne.n	800108c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	2200      	movs	r2, #0
 8001082:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001086:	6878      	ldr	r0, [r7, #4]
 8001088:	f000 f839 	bl	80010fe <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	2202      	movs	r2, #2
 8001090:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681a      	ldr	r2, [r3, #0]
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	3304      	adds	r3, #4
 800109c:	4619      	mov	r1, r3
 800109e:	4610      	mov	r0, r2
 80010a0:	f000 f9b2 	bl	8001408 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	2201      	movs	r2, #1
 80010a8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	2201      	movs	r2, #1
 80010b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	2201      	movs	r2, #1
 80010b8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	2201      	movs	r2, #1
 80010c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	2201      	movs	r2, #1
 80010c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	2201      	movs	r2, #1
 80010d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	2201      	movs	r2, #1
 80010d8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	2201      	movs	r2, #1
 80010e0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	2201      	movs	r2, #1
 80010e8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	2201      	movs	r2, #1
 80010f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80010f4:	2300      	movs	r3, #0
}
 80010f6:	4618      	mov	r0, r3
 80010f8:	3708      	adds	r7, #8
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}

080010fe <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80010fe:	b480      	push	{r7}
 8001100:	b083      	sub	sp, #12
 8001102:	af00      	add	r7, sp, #0
 8001104:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001106:	bf00      	nop
 8001108:	370c      	adds	r7, #12
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr
	...

08001114 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001114:	b480      	push	{r7}
 8001116:	b085      	sub	sp, #20
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001122:	b2db      	uxtb	r3, r3
 8001124:	2b01      	cmp	r3, #1
 8001126:	d001      	beq.n	800112c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001128:	2301      	movs	r3, #1
 800112a:	e044      	b.n	80011b6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	2202      	movs	r2, #2
 8001130:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	68da      	ldr	r2, [r3, #12]
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	f042 0201 	orr.w	r2, r2, #1
 8001142:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	4a1e      	ldr	r2, [pc, #120]	@ (80011c4 <HAL_TIM_Base_Start_IT+0xb0>)
 800114a:	4293      	cmp	r3, r2
 800114c:	d018      	beq.n	8001180 <HAL_TIM_Base_Start_IT+0x6c>
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001156:	d013      	beq.n	8001180 <HAL_TIM_Base_Start_IT+0x6c>
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	4a1a      	ldr	r2, [pc, #104]	@ (80011c8 <HAL_TIM_Base_Start_IT+0xb4>)
 800115e:	4293      	cmp	r3, r2
 8001160:	d00e      	beq.n	8001180 <HAL_TIM_Base_Start_IT+0x6c>
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	4a19      	ldr	r2, [pc, #100]	@ (80011cc <HAL_TIM_Base_Start_IT+0xb8>)
 8001168:	4293      	cmp	r3, r2
 800116a:	d009      	beq.n	8001180 <HAL_TIM_Base_Start_IT+0x6c>
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	4a17      	ldr	r2, [pc, #92]	@ (80011d0 <HAL_TIM_Base_Start_IT+0xbc>)
 8001172:	4293      	cmp	r3, r2
 8001174:	d004      	beq.n	8001180 <HAL_TIM_Base_Start_IT+0x6c>
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	4a16      	ldr	r2, [pc, #88]	@ (80011d4 <HAL_TIM_Base_Start_IT+0xc0>)
 800117c:	4293      	cmp	r3, r2
 800117e:	d111      	bne.n	80011a4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	689b      	ldr	r3, [r3, #8]
 8001186:	f003 0307 	and.w	r3, r3, #7
 800118a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	2b06      	cmp	r3, #6
 8001190:	d010      	beq.n	80011b4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	681a      	ldr	r2, [r3, #0]
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	f042 0201 	orr.w	r2, r2, #1
 80011a0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80011a2:	e007      	b.n	80011b4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	681a      	ldr	r2, [r3, #0]
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	f042 0201 	orr.w	r2, r2, #1
 80011b2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80011b4:	2300      	movs	r3, #0
}
 80011b6:	4618      	mov	r0, r3
 80011b8:	3714      	adds	r7, #20
 80011ba:	46bd      	mov	sp, r7
 80011bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c0:	4770      	bx	lr
 80011c2:	bf00      	nop
 80011c4:	40010000 	.word	0x40010000
 80011c8:	40000400 	.word	0x40000400
 80011cc:	40000800 	.word	0x40000800
 80011d0:	40000c00 	.word	0x40000c00
 80011d4:	40014000 	.word	0x40014000

080011d8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b084      	sub	sp, #16
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	68db      	ldr	r3, [r3, #12]
 80011e6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	691b      	ldr	r3, [r3, #16]
 80011ee:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80011f0:	68bb      	ldr	r3, [r7, #8]
 80011f2:	f003 0302 	and.w	r3, r3, #2
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d020      	beq.n	800123c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	f003 0302 	and.w	r3, r3, #2
 8001200:	2b00      	cmp	r3, #0
 8001202:	d01b      	beq.n	800123c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	f06f 0202 	mvn.w	r2, #2
 800120c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	2201      	movs	r2, #1
 8001212:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	699b      	ldr	r3, [r3, #24]
 800121a:	f003 0303 	and.w	r3, r3, #3
 800121e:	2b00      	cmp	r3, #0
 8001220:	d003      	beq.n	800122a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001222:	6878      	ldr	r0, [r7, #4]
 8001224:	f000 f8d2 	bl	80013cc <HAL_TIM_IC_CaptureCallback>
 8001228:	e005      	b.n	8001236 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800122a:	6878      	ldr	r0, [r7, #4]
 800122c:	f000 f8c4 	bl	80013b8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001230:	6878      	ldr	r0, [r7, #4]
 8001232:	f000 f8d5 	bl	80013e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	2200      	movs	r2, #0
 800123a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800123c:	68bb      	ldr	r3, [r7, #8]
 800123e:	f003 0304 	and.w	r3, r3, #4
 8001242:	2b00      	cmp	r3, #0
 8001244:	d020      	beq.n	8001288 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	f003 0304 	and.w	r3, r3, #4
 800124c:	2b00      	cmp	r3, #0
 800124e:	d01b      	beq.n	8001288 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f06f 0204 	mvn.w	r2, #4
 8001258:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	2202      	movs	r2, #2
 800125e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	699b      	ldr	r3, [r3, #24]
 8001266:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800126a:	2b00      	cmp	r3, #0
 800126c:	d003      	beq.n	8001276 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800126e:	6878      	ldr	r0, [r7, #4]
 8001270:	f000 f8ac 	bl	80013cc <HAL_TIM_IC_CaptureCallback>
 8001274:	e005      	b.n	8001282 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001276:	6878      	ldr	r0, [r7, #4]
 8001278:	f000 f89e 	bl	80013b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800127c:	6878      	ldr	r0, [r7, #4]
 800127e:	f000 f8af 	bl	80013e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	2200      	movs	r2, #0
 8001286:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001288:	68bb      	ldr	r3, [r7, #8]
 800128a:	f003 0308 	and.w	r3, r3, #8
 800128e:	2b00      	cmp	r3, #0
 8001290:	d020      	beq.n	80012d4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	f003 0308 	and.w	r3, r3, #8
 8001298:	2b00      	cmp	r3, #0
 800129a:	d01b      	beq.n	80012d4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	f06f 0208 	mvn.w	r2, #8
 80012a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	2204      	movs	r2, #4
 80012aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	69db      	ldr	r3, [r3, #28]
 80012b2:	f003 0303 	and.w	r3, r3, #3
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d003      	beq.n	80012c2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80012ba:	6878      	ldr	r0, [r7, #4]
 80012bc:	f000 f886 	bl	80013cc <HAL_TIM_IC_CaptureCallback>
 80012c0:	e005      	b.n	80012ce <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80012c2:	6878      	ldr	r0, [r7, #4]
 80012c4:	f000 f878 	bl	80013b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80012c8:	6878      	ldr	r0, [r7, #4]
 80012ca:	f000 f889 	bl	80013e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	2200      	movs	r2, #0
 80012d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80012d4:	68bb      	ldr	r3, [r7, #8]
 80012d6:	f003 0310 	and.w	r3, r3, #16
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d020      	beq.n	8001320 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	f003 0310 	and.w	r3, r3, #16
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d01b      	beq.n	8001320 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f06f 0210 	mvn.w	r2, #16
 80012f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	2208      	movs	r2, #8
 80012f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	69db      	ldr	r3, [r3, #28]
 80012fe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001302:	2b00      	cmp	r3, #0
 8001304:	d003      	beq.n	800130e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001306:	6878      	ldr	r0, [r7, #4]
 8001308:	f000 f860 	bl	80013cc <HAL_TIM_IC_CaptureCallback>
 800130c:	e005      	b.n	800131a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800130e:	6878      	ldr	r0, [r7, #4]
 8001310:	f000 f852 	bl	80013b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001314:	6878      	ldr	r0, [r7, #4]
 8001316:	f000 f863 	bl	80013e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	2200      	movs	r2, #0
 800131e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001320:	68bb      	ldr	r3, [r7, #8]
 8001322:	f003 0301 	and.w	r3, r3, #1
 8001326:	2b00      	cmp	r3, #0
 8001328:	d00c      	beq.n	8001344 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	f003 0301 	and.w	r3, r3, #1
 8001330:	2b00      	cmp	r3, #0
 8001332:	d007      	beq.n	8001344 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f06f 0201 	mvn.w	r2, #1
 800133c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800133e:	6878      	ldr	r0, [r7, #4]
 8001340:	f7ff fc02 	bl	8000b48 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001344:	68bb      	ldr	r3, [r7, #8]
 8001346:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800134a:	2b00      	cmp	r3, #0
 800134c:	d00c      	beq.n	8001368 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001354:	2b00      	cmp	r3, #0
 8001356:	d007      	beq.n	8001368 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001360:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001362:	6878      	ldr	r0, [r7, #4]
 8001364:	f000 f8e6 	bl	8001534 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001368:	68bb      	ldr	r3, [r7, #8]
 800136a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800136e:	2b00      	cmp	r3, #0
 8001370:	d00c      	beq.n	800138c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001378:	2b00      	cmp	r3, #0
 800137a:	d007      	beq.n	800138c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001384:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001386:	6878      	ldr	r0, [r7, #4]
 8001388:	f000 f834 	bl	80013f4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800138c:	68bb      	ldr	r3, [r7, #8]
 800138e:	f003 0320 	and.w	r3, r3, #32
 8001392:	2b00      	cmp	r3, #0
 8001394:	d00c      	beq.n	80013b0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	f003 0320 	and.w	r3, r3, #32
 800139c:	2b00      	cmp	r3, #0
 800139e:	d007      	beq.n	80013b0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f06f 0220 	mvn.w	r2, #32
 80013a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80013aa:	6878      	ldr	r0, [r7, #4]
 80013ac:	f000 f8b8 	bl	8001520 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80013b0:	bf00      	nop
 80013b2:	3710      	adds	r7, #16
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}

080013b8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80013b8:	b480      	push	{r7}
 80013ba:	b083      	sub	sp, #12
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80013c0:	bf00      	nop
 80013c2:	370c      	adds	r7, #12
 80013c4:	46bd      	mov	sp, r7
 80013c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ca:	4770      	bx	lr

080013cc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80013cc:	b480      	push	{r7}
 80013ce:	b083      	sub	sp, #12
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80013d4:	bf00      	nop
 80013d6:	370c      	adds	r7, #12
 80013d8:	46bd      	mov	sp, r7
 80013da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013de:	4770      	bx	lr

080013e0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80013e0:	b480      	push	{r7}
 80013e2:	b083      	sub	sp, #12
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80013e8:	bf00      	nop
 80013ea:	370c      	adds	r7, #12
 80013ec:	46bd      	mov	sp, r7
 80013ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f2:	4770      	bx	lr

080013f4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80013f4:	b480      	push	{r7}
 80013f6:	b083      	sub	sp, #12
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80013fc:	bf00      	nop
 80013fe:	370c      	adds	r7, #12
 8001400:	46bd      	mov	sp, r7
 8001402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001406:	4770      	bx	lr

08001408 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001408:	b480      	push	{r7}
 800140a:	b085      	sub	sp, #20
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
 8001410:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	4a3a      	ldr	r2, [pc, #232]	@ (8001504 <TIM_Base_SetConfig+0xfc>)
 800141c:	4293      	cmp	r3, r2
 800141e:	d00f      	beq.n	8001440 <TIM_Base_SetConfig+0x38>
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001426:	d00b      	beq.n	8001440 <TIM_Base_SetConfig+0x38>
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	4a37      	ldr	r2, [pc, #220]	@ (8001508 <TIM_Base_SetConfig+0x100>)
 800142c:	4293      	cmp	r3, r2
 800142e:	d007      	beq.n	8001440 <TIM_Base_SetConfig+0x38>
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	4a36      	ldr	r2, [pc, #216]	@ (800150c <TIM_Base_SetConfig+0x104>)
 8001434:	4293      	cmp	r3, r2
 8001436:	d003      	beq.n	8001440 <TIM_Base_SetConfig+0x38>
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	4a35      	ldr	r2, [pc, #212]	@ (8001510 <TIM_Base_SetConfig+0x108>)
 800143c:	4293      	cmp	r3, r2
 800143e:	d108      	bne.n	8001452 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001446:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	68fa      	ldr	r2, [r7, #12]
 800144e:	4313      	orrs	r3, r2
 8001450:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	4a2b      	ldr	r2, [pc, #172]	@ (8001504 <TIM_Base_SetConfig+0xfc>)
 8001456:	4293      	cmp	r3, r2
 8001458:	d01b      	beq.n	8001492 <TIM_Base_SetConfig+0x8a>
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001460:	d017      	beq.n	8001492 <TIM_Base_SetConfig+0x8a>
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	4a28      	ldr	r2, [pc, #160]	@ (8001508 <TIM_Base_SetConfig+0x100>)
 8001466:	4293      	cmp	r3, r2
 8001468:	d013      	beq.n	8001492 <TIM_Base_SetConfig+0x8a>
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	4a27      	ldr	r2, [pc, #156]	@ (800150c <TIM_Base_SetConfig+0x104>)
 800146e:	4293      	cmp	r3, r2
 8001470:	d00f      	beq.n	8001492 <TIM_Base_SetConfig+0x8a>
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	4a26      	ldr	r2, [pc, #152]	@ (8001510 <TIM_Base_SetConfig+0x108>)
 8001476:	4293      	cmp	r3, r2
 8001478:	d00b      	beq.n	8001492 <TIM_Base_SetConfig+0x8a>
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	4a25      	ldr	r2, [pc, #148]	@ (8001514 <TIM_Base_SetConfig+0x10c>)
 800147e:	4293      	cmp	r3, r2
 8001480:	d007      	beq.n	8001492 <TIM_Base_SetConfig+0x8a>
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	4a24      	ldr	r2, [pc, #144]	@ (8001518 <TIM_Base_SetConfig+0x110>)
 8001486:	4293      	cmp	r3, r2
 8001488:	d003      	beq.n	8001492 <TIM_Base_SetConfig+0x8a>
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	4a23      	ldr	r2, [pc, #140]	@ (800151c <TIM_Base_SetConfig+0x114>)
 800148e:	4293      	cmp	r3, r2
 8001490:	d108      	bne.n	80014a4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001498:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	68db      	ldr	r3, [r3, #12]
 800149e:	68fa      	ldr	r2, [r7, #12]
 80014a0:	4313      	orrs	r3, r2
 80014a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	695b      	ldr	r3, [r3, #20]
 80014ae:	4313      	orrs	r3, r2
 80014b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	68fa      	ldr	r2, [r7, #12]
 80014b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	689a      	ldr	r2, [r3, #8]
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	681a      	ldr	r2, [r3, #0]
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	4a0e      	ldr	r2, [pc, #56]	@ (8001504 <TIM_Base_SetConfig+0xfc>)
 80014cc:	4293      	cmp	r3, r2
 80014ce:	d103      	bne.n	80014d8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	691a      	ldr	r2, [r3, #16]
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	2201      	movs	r2, #1
 80014dc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	691b      	ldr	r3, [r3, #16]
 80014e2:	f003 0301 	and.w	r3, r3, #1
 80014e6:	2b01      	cmp	r3, #1
 80014e8:	d105      	bne.n	80014f6 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	691b      	ldr	r3, [r3, #16]
 80014ee:	f023 0201 	bic.w	r2, r3, #1
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	611a      	str	r2, [r3, #16]
  }
}
 80014f6:	bf00      	nop
 80014f8:	3714      	adds	r7, #20
 80014fa:	46bd      	mov	sp, r7
 80014fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001500:	4770      	bx	lr
 8001502:	bf00      	nop
 8001504:	40010000 	.word	0x40010000
 8001508:	40000400 	.word	0x40000400
 800150c:	40000800 	.word	0x40000800
 8001510:	40000c00 	.word	0x40000c00
 8001514:	40014000 	.word	0x40014000
 8001518:	40014400 	.word	0x40014400
 800151c:	40014800 	.word	0x40014800

08001520 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001520:	b480      	push	{r7}
 8001522:	b083      	sub	sp, #12
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001528:	bf00      	nop
 800152a:	370c      	adds	r7, #12
 800152c:	46bd      	mov	sp, r7
 800152e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001532:	4770      	bx	lr

08001534 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001534:	b480      	push	{r7}
 8001536:	b083      	sub	sp, #12
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800153c:	bf00      	nop
 800153e:	370c      	adds	r7, #12
 8001540:	46bd      	mov	sp, r7
 8001542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001546:	4770      	bx	lr

08001548 <LL_GPIO_SetPinMode>:
{
 8001548:	b480      	push	{r7}
 800154a:	b08b      	sub	sp, #44	@ 0x2c
 800154c:	af00      	add	r7, sp, #0
 800154e:	60f8      	str	r0, [r7, #12]
 8001550:	60b9      	str	r1, [r7, #8]
 8001552:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	681a      	ldr	r2, [r3, #0]
 8001558:	68bb      	ldr	r3, [r7, #8]
 800155a:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800155c:	697b      	ldr	r3, [r7, #20]
 800155e:	fa93 f3a3 	rbit	r3, r3
 8001562:	613b      	str	r3, [r7, #16]
  return result;
 8001564:	693b      	ldr	r3, [r7, #16]
 8001566:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001568:	69bb      	ldr	r3, [r7, #24]
 800156a:	2b00      	cmp	r3, #0
 800156c:	d101      	bne.n	8001572 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 800156e:	2320      	movs	r3, #32
 8001570:	e003      	b.n	800157a <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8001572:	69bb      	ldr	r3, [r7, #24]
 8001574:	fab3 f383 	clz	r3, r3
 8001578:	b2db      	uxtb	r3, r3
 800157a:	005b      	lsls	r3, r3, #1
 800157c:	2103      	movs	r1, #3
 800157e:	fa01 f303 	lsl.w	r3, r1, r3
 8001582:	43db      	mvns	r3, r3
 8001584:	401a      	ands	r2, r3
 8001586:	68bb      	ldr	r3, [r7, #8]
 8001588:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800158a:	6a3b      	ldr	r3, [r7, #32]
 800158c:	fa93 f3a3 	rbit	r3, r3
 8001590:	61fb      	str	r3, [r7, #28]
  return result;
 8001592:	69fb      	ldr	r3, [r7, #28]
 8001594:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8001596:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001598:	2b00      	cmp	r3, #0
 800159a:	d101      	bne.n	80015a0 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 800159c:	2320      	movs	r3, #32
 800159e:	e003      	b.n	80015a8 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 80015a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015a2:	fab3 f383 	clz	r3, r3
 80015a6:	b2db      	uxtb	r3, r3
 80015a8:	005b      	lsls	r3, r3, #1
 80015aa:	6879      	ldr	r1, [r7, #4]
 80015ac:	fa01 f303 	lsl.w	r3, r1, r3
 80015b0:	431a      	orrs	r2, r3
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	601a      	str	r2, [r3, #0]
}
 80015b6:	bf00      	nop
 80015b8:	372c      	adds	r7, #44	@ 0x2c
 80015ba:	46bd      	mov	sp, r7
 80015bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c0:	4770      	bx	lr

080015c2 <LL_GPIO_SetPinOutputType>:
{
 80015c2:	b480      	push	{r7}
 80015c4:	b085      	sub	sp, #20
 80015c6:	af00      	add	r7, sp, #0
 80015c8:	60f8      	str	r0, [r7, #12]
 80015ca:	60b9      	str	r1, [r7, #8]
 80015cc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	685a      	ldr	r2, [r3, #4]
 80015d2:	68bb      	ldr	r3, [r7, #8]
 80015d4:	43db      	mvns	r3, r3
 80015d6:	401a      	ands	r2, r3
 80015d8:	68bb      	ldr	r3, [r7, #8]
 80015da:	6879      	ldr	r1, [r7, #4]
 80015dc:	fb01 f303 	mul.w	r3, r1, r3
 80015e0:	431a      	orrs	r2, r3
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	605a      	str	r2, [r3, #4]
}
 80015e6:	bf00      	nop
 80015e8:	3714      	adds	r7, #20
 80015ea:	46bd      	mov	sp, r7
 80015ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f0:	4770      	bx	lr

080015f2 <LL_GPIO_SetPinSpeed>:
{
 80015f2:	b480      	push	{r7}
 80015f4:	b08b      	sub	sp, #44	@ 0x2c
 80015f6:	af00      	add	r7, sp, #0
 80015f8:	60f8      	str	r0, [r7, #12]
 80015fa:	60b9      	str	r1, [r7, #8]
 80015fc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	689a      	ldr	r2, [r3, #8]
 8001602:	68bb      	ldr	r3, [r7, #8]
 8001604:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001606:	697b      	ldr	r3, [r7, #20]
 8001608:	fa93 f3a3 	rbit	r3, r3
 800160c:	613b      	str	r3, [r7, #16]
  return result;
 800160e:	693b      	ldr	r3, [r7, #16]
 8001610:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001612:	69bb      	ldr	r3, [r7, #24]
 8001614:	2b00      	cmp	r3, #0
 8001616:	d101      	bne.n	800161c <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8001618:	2320      	movs	r3, #32
 800161a:	e003      	b.n	8001624 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 800161c:	69bb      	ldr	r3, [r7, #24]
 800161e:	fab3 f383 	clz	r3, r3
 8001622:	b2db      	uxtb	r3, r3
 8001624:	005b      	lsls	r3, r3, #1
 8001626:	2103      	movs	r1, #3
 8001628:	fa01 f303 	lsl.w	r3, r1, r3
 800162c:	43db      	mvns	r3, r3
 800162e:	401a      	ands	r2, r3
 8001630:	68bb      	ldr	r3, [r7, #8]
 8001632:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001634:	6a3b      	ldr	r3, [r7, #32]
 8001636:	fa93 f3a3 	rbit	r3, r3
 800163a:	61fb      	str	r3, [r7, #28]
  return result;
 800163c:	69fb      	ldr	r3, [r7, #28]
 800163e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8001640:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001642:	2b00      	cmp	r3, #0
 8001644:	d101      	bne.n	800164a <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8001646:	2320      	movs	r3, #32
 8001648:	e003      	b.n	8001652 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 800164a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800164c:	fab3 f383 	clz	r3, r3
 8001650:	b2db      	uxtb	r3, r3
 8001652:	005b      	lsls	r3, r3, #1
 8001654:	6879      	ldr	r1, [r7, #4]
 8001656:	fa01 f303 	lsl.w	r3, r1, r3
 800165a:	431a      	orrs	r2, r3
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	609a      	str	r2, [r3, #8]
}
 8001660:	bf00      	nop
 8001662:	372c      	adds	r7, #44	@ 0x2c
 8001664:	46bd      	mov	sp, r7
 8001666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166a:	4770      	bx	lr

0800166c <LL_GPIO_SetPinPull>:
{
 800166c:	b480      	push	{r7}
 800166e:	b08b      	sub	sp, #44	@ 0x2c
 8001670:	af00      	add	r7, sp, #0
 8001672:	60f8      	str	r0, [r7, #12]
 8001674:	60b9      	str	r1, [r7, #8]
 8001676:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	68da      	ldr	r2, [r3, #12]
 800167c:	68bb      	ldr	r3, [r7, #8]
 800167e:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001680:	697b      	ldr	r3, [r7, #20]
 8001682:	fa93 f3a3 	rbit	r3, r3
 8001686:	613b      	str	r3, [r7, #16]
  return result;
 8001688:	693b      	ldr	r3, [r7, #16]
 800168a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800168c:	69bb      	ldr	r3, [r7, #24]
 800168e:	2b00      	cmp	r3, #0
 8001690:	d101      	bne.n	8001696 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8001692:	2320      	movs	r3, #32
 8001694:	e003      	b.n	800169e <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8001696:	69bb      	ldr	r3, [r7, #24]
 8001698:	fab3 f383 	clz	r3, r3
 800169c:	b2db      	uxtb	r3, r3
 800169e:	005b      	lsls	r3, r3, #1
 80016a0:	2103      	movs	r1, #3
 80016a2:	fa01 f303 	lsl.w	r3, r1, r3
 80016a6:	43db      	mvns	r3, r3
 80016a8:	401a      	ands	r2, r3
 80016aa:	68bb      	ldr	r3, [r7, #8]
 80016ac:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016ae:	6a3b      	ldr	r3, [r7, #32]
 80016b0:	fa93 f3a3 	rbit	r3, r3
 80016b4:	61fb      	str	r3, [r7, #28]
  return result;
 80016b6:	69fb      	ldr	r3, [r7, #28]
 80016b8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80016ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d101      	bne.n	80016c4 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 80016c0:	2320      	movs	r3, #32
 80016c2:	e003      	b.n	80016cc <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 80016c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016c6:	fab3 f383 	clz	r3, r3
 80016ca:	b2db      	uxtb	r3, r3
 80016cc:	005b      	lsls	r3, r3, #1
 80016ce:	6879      	ldr	r1, [r7, #4]
 80016d0:	fa01 f303 	lsl.w	r3, r1, r3
 80016d4:	431a      	orrs	r2, r3
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	60da      	str	r2, [r3, #12]
}
 80016da:	bf00      	nop
 80016dc:	372c      	adds	r7, #44	@ 0x2c
 80016de:	46bd      	mov	sp, r7
 80016e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e4:	4770      	bx	lr

080016e6 <LL_GPIO_SetAFPin_0_7>:
{
 80016e6:	b480      	push	{r7}
 80016e8:	b08b      	sub	sp, #44	@ 0x2c
 80016ea:	af00      	add	r7, sp, #0
 80016ec:	60f8      	str	r0, [r7, #12]
 80016ee:	60b9      	str	r1, [r7, #8]
 80016f0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	6a1a      	ldr	r2, [r3, #32]
 80016f6:	68bb      	ldr	r3, [r7, #8]
 80016f8:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016fa:	697b      	ldr	r3, [r7, #20]
 80016fc:	fa93 f3a3 	rbit	r3, r3
 8001700:	613b      	str	r3, [r7, #16]
  return result;
 8001702:	693b      	ldr	r3, [r7, #16]
 8001704:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001706:	69bb      	ldr	r3, [r7, #24]
 8001708:	2b00      	cmp	r3, #0
 800170a:	d101      	bne.n	8001710 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 800170c:	2320      	movs	r3, #32
 800170e:	e003      	b.n	8001718 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8001710:	69bb      	ldr	r3, [r7, #24]
 8001712:	fab3 f383 	clz	r3, r3
 8001716:	b2db      	uxtb	r3, r3
 8001718:	009b      	lsls	r3, r3, #2
 800171a:	210f      	movs	r1, #15
 800171c:	fa01 f303 	lsl.w	r3, r1, r3
 8001720:	43db      	mvns	r3, r3
 8001722:	401a      	ands	r2, r3
 8001724:	68bb      	ldr	r3, [r7, #8]
 8001726:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001728:	6a3b      	ldr	r3, [r7, #32]
 800172a:	fa93 f3a3 	rbit	r3, r3
 800172e:	61fb      	str	r3, [r7, #28]
  return result;
 8001730:	69fb      	ldr	r3, [r7, #28]
 8001732:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8001734:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001736:	2b00      	cmp	r3, #0
 8001738:	d101      	bne.n	800173e <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 800173a:	2320      	movs	r3, #32
 800173c:	e003      	b.n	8001746 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 800173e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001740:	fab3 f383 	clz	r3, r3
 8001744:	b2db      	uxtb	r3, r3
 8001746:	009b      	lsls	r3, r3, #2
 8001748:	6879      	ldr	r1, [r7, #4]
 800174a:	fa01 f303 	lsl.w	r3, r1, r3
 800174e:	431a      	orrs	r2, r3
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	621a      	str	r2, [r3, #32]
}
 8001754:	bf00      	nop
 8001756:	372c      	adds	r7, #44	@ 0x2c
 8001758:	46bd      	mov	sp, r7
 800175a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175e:	4770      	bx	lr

08001760 <LL_GPIO_SetAFPin_8_15>:
{
 8001760:	b480      	push	{r7}
 8001762:	b08b      	sub	sp, #44	@ 0x2c
 8001764:	af00      	add	r7, sp, #0
 8001766:	60f8      	str	r0, [r7, #12]
 8001768:	60b9      	str	r1, [r7, #8]
 800176a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001770:	68bb      	ldr	r3, [r7, #8]
 8001772:	0a1b      	lsrs	r3, r3, #8
 8001774:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001776:	697b      	ldr	r3, [r7, #20]
 8001778:	fa93 f3a3 	rbit	r3, r3
 800177c:	613b      	str	r3, [r7, #16]
  return result;
 800177e:	693b      	ldr	r3, [r7, #16]
 8001780:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001782:	69bb      	ldr	r3, [r7, #24]
 8001784:	2b00      	cmp	r3, #0
 8001786:	d101      	bne.n	800178c <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8001788:	2320      	movs	r3, #32
 800178a:	e003      	b.n	8001794 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 800178c:	69bb      	ldr	r3, [r7, #24]
 800178e:	fab3 f383 	clz	r3, r3
 8001792:	b2db      	uxtb	r3, r3
 8001794:	009b      	lsls	r3, r3, #2
 8001796:	210f      	movs	r1, #15
 8001798:	fa01 f303 	lsl.w	r3, r1, r3
 800179c:	43db      	mvns	r3, r3
 800179e:	401a      	ands	r2, r3
 80017a0:	68bb      	ldr	r3, [r7, #8]
 80017a2:	0a1b      	lsrs	r3, r3, #8
 80017a4:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017a6:	6a3b      	ldr	r3, [r7, #32]
 80017a8:	fa93 f3a3 	rbit	r3, r3
 80017ac:	61fb      	str	r3, [r7, #28]
  return result;
 80017ae:	69fb      	ldr	r3, [r7, #28]
 80017b0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80017b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d101      	bne.n	80017bc <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 80017b8:	2320      	movs	r3, #32
 80017ba:	e003      	b.n	80017c4 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 80017bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017be:	fab3 f383 	clz	r3, r3
 80017c2:	b2db      	uxtb	r3, r3
 80017c4:	009b      	lsls	r3, r3, #2
 80017c6:	6879      	ldr	r1, [r7, #4]
 80017c8:	fa01 f303 	lsl.w	r3, r1, r3
 80017cc:	431a      	orrs	r2, r3
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80017d2:	bf00      	nop
 80017d4:	372c      	adds	r7, #44	@ 0x2c
 80017d6:	46bd      	mov	sp, r7
 80017d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017dc:	4770      	bx	lr

080017de <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80017de:	b580      	push	{r7, lr}
 80017e0:	b08a      	sub	sp, #40	@ 0x28
 80017e2:	af00      	add	r7, sp, #0
 80017e4:	6078      	str	r0, [r7, #4]
 80017e6:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 80017e8:	2300      	movs	r3, #0
 80017ea:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t currentpin = 0x00000000U;
 80017ec:	2300      	movs	r3, #0
 80017ee:	623b      	str	r3, [r7, #32]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	61bb      	str	r3, [r7, #24]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017f6:	69bb      	ldr	r3, [r7, #24]
 80017f8:	fa93 f3a3 	rbit	r3, r3
 80017fc:	617b      	str	r3, [r7, #20]
  return result;
 80017fe:	697b      	ldr	r3, [r7, #20]
 8001800:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 8001802:	69fb      	ldr	r3, [r7, #28]
 8001804:	2b00      	cmp	r3, #0
 8001806:	d101      	bne.n	800180c <LL_GPIO_Init+0x2e>
    return 32U;
 8001808:	2320      	movs	r3, #32
 800180a:	e003      	b.n	8001814 <LL_GPIO_Init+0x36>
  return __builtin_clz(value);
 800180c:	69fb      	ldr	r3, [r7, #28]
 800180e:	fab3 f383 	clz	r3, r3
 8001812:	b2db      	uxtb	r3, r3
 8001814:	627b      	str	r3, [r7, #36]	@ 0x24
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8001816:	e057      	b.n	80018c8 <LL_GPIO_Init+0xea>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	681a      	ldr	r2, [r3, #0]
 800181c:	2101      	movs	r1, #1
 800181e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001820:	fa01 f303 	lsl.w	r3, r1, r3
 8001824:	4013      	ands	r3, r2
 8001826:	623b      	str	r3, [r7, #32]
    
    if (currentpin)
 8001828:	6a3b      	ldr	r3, [r7, #32]
 800182a:	2b00      	cmp	r3, #0
 800182c:	d049      	beq.n	80018c2 <LL_GPIO_Init+0xe4>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	2b01      	cmp	r3, #1
 8001834:	d003      	beq.n	800183e <LL_GPIO_Init+0x60>
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	2b02      	cmp	r3, #2
 800183c:	d10d      	bne.n	800185a <LL_GPIO_Init+0x7c>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	689b      	ldr	r3, [r3, #8]
 8001842:	461a      	mov	r2, r3
 8001844:	6a39      	ldr	r1, [r7, #32]
 8001846:	6878      	ldr	r0, [r7, #4]
 8001848:	f7ff fed3 	bl	80015f2 <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	68db      	ldr	r3, [r3, #12]
 8001850:	461a      	mov	r2, r3
 8001852:	6a39      	ldr	r1, [r7, #32]
 8001854:	6878      	ldr	r0, [r7, #4]
 8001856:	f7ff feb4 	bl	80015c2 <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	691b      	ldr	r3, [r3, #16]
 800185e:	461a      	mov	r2, r3
 8001860:	6a39      	ldr	r1, [r7, #32]
 8001862:	6878      	ldr	r0, [r7, #4]
 8001864:	f7ff ff02 	bl	800166c <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	2b02      	cmp	r3, #2
 800186e:	d121      	bne.n	80018b4 <LL_GPIO_Init+0xd6>
 8001870:	6a3b      	ldr	r3, [r7, #32]
 8001872:	60fb      	str	r3, [r7, #12]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	fa93 f3a3 	rbit	r3, r3
 800187a:	60bb      	str	r3, [r7, #8]
  return result;
 800187c:	68bb      	ldr	r3, [r7, #8]
 800187e:	613b      	str	r3, [r7, #16]
  if (value == 0U)
 8001880:	693b      	ldr	r3, [r7, #16]
 8001882:	2b00      	cmp	r3, #0
 8001884:	d101      	bne.n	800188a <LL_GPIO_Init+0xac>
    return 32U;
 8001886:	2320      	movs	r3, #32
 8001888:	e003      	b.n	8001892 <LL_GPIO_Init+0xb4>
  return __builtin_clz(value);
 800188a:	693b      	ldr	r3, [r7, #16]
 800188c:	fab3 f383 	clz	r3, r3
 8001890:	b2db      	uxtb	r3, r3
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8001892:	2b07      	cmp	r3, #7
 8001894:	d807      	bhi.n	80018a6 <LL_GPIO_Init+0xc8>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	695b      	ldr	r3, [r3, #20]
 800189a:	461a      	mov	r2, r3
 800189c:	6a39      	ldr	r1, [r7, #32]
 800189e:	6878      	ldr	r0, [r7, #4]
 80018a0:	f7ff ff21 	bl	80016e6 <LL_GPIO_SetAFPin_0_7>
 80018a4:	e006      	b.n	80018b4 <LL_GPIO_Init+0xd6>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	695b      	ldr	r3, [r3, #20]
 80018aa:	461a      	mov	r2, r3
 80018ac:	6a39      	ldr	r1, [r7, #32]
 80018ae:	6878      	ldr	r0, [r7, #4]
 80018b0:	f7ff ff56 	bl	8001760 <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	461a      	mov	r2, r3
 80018ba:	6a39      	ldr	r1, [r7, #32]
 80018bc:	6878      	ldr	r0, [r7, #4]
 80018be:	f7ff fe43 	bl	8001548 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 80018c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018c4:	3301      	adds	r3, #1
 80018c6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	681a      	ldr	r2, [r3, #0]
 80018cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018ce:	fa22 f303 	lsr.w	r3, r2, r3
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d1a0      	bne.n	8001818 <LL_GPIO_Init+0x3a>
  }

  return (SUCCESS);
 80018d6:	2300      	movs	r3, #0
}
 80018d8:	4618      	mov	r0, r3
 80018da:	3728      	adds	r7, #40	@ 0x28
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}

080018e0 <LL_RCC_GetSysClkSource>:
{
 80018e0:	b480      	push	{r7}
 80018e2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80018e4:	4b04      	ldr	r3, [pc, #16]	@ (80018f8 <LL_RCC_GetSysClkSource+0x18>)
 80018e6:	689b      	ldr	r3, [r3, #8]
 80018e8:	f003 030c 	and.w	r3, r3, #12
}
 80018ec:	4618      	mov	r0, r3
 80018ee:	46bd      	mov	sp, r7
 80018f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f4:	4770      	bx	lr
 80018f6:	bf00      	nop
 80018f8:	40023800 	.word	0x40023800

080018fc <LL_RCC_GetAHBPrescaler>:
{
 80018fc:	b480      	push	{r7}
 80018fe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001900:	4b04      	ldr	r3, [pc, #16]	@ (8001914 <LL_RCC_GetAHBPrescaler+0x18>)
 8001902:	689b      	ldr	r3, [r3, #8]
 8001904:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8001908:	4618      	mov	r0, r3
 800190a:	46bd      	mov	sp, r7
 800190c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001910:	4770      	bx	lr
 8001912:	bf00      	nop
 8001914:	40023800 	.word	0x40023800

08001918 <LL_RCC_GetAPB1Prescaler>:
{
 8001918:	b480      	push	{r7}
 800191a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800191c:	4b04      	ldr	r3, [pc, #16]	@ (8001930 <LL_RCC_GetAPB1Prescaler+0x18>)
 800191e:	689b      	ldr	r3, [r3, #8]
 8001920:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
}
 8001924:	4618      	mov	r0, r3
 8001926:	46bd      	mov	sp, r7
 8001928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192c:	4770      	bx	lr
 800192e:	bf00      	nop
 8001930:	40023800 	.word	0x40023800

08001934 <LL_RCC_GetAPB2Prescaler>:
{
 8001934:	b480      	push	{r7}
 8001936:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8001938:	4b04      	ldr	r3, [pc, #16]	@ (800194c <LL_RCC_GetAPB2Prescaler+0x18>)
 800193a:	689b      	ldr	r3, [r3, #8]
 800193c:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8001940:	4618      	mov	r0, r3
 8001942:	46bd      	mov	sp, r7
 8001944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001948:	4770      	bx	lr
 800194a:	bf00      	nop
 800194c:	40023800 	.word	0x40023800

08001950 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8001950:	b480      	push	{r7}
 8001952:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8001954:	4b04      	ldr	r3, [pc, #16]	@ (8001968 <LL_RCC_PLL_GetMainSource+0x18>)
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
}
 800195c:	4618      	mov	r0, r3
 800195e:	46bd      	mov	sp, r7
 8001960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001964:	4770      	bx	lr
 8001966:	bf00      	nop
 8001968:	40023800 	.word	0x40023800

0800196c <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 800196c:	b480      	push	{r7}
 800196e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8001970:	4b04      	ldr	r3, [pc, #16]	@ (8001984 <LL_RCC_PLL_GetN+0x18>)
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	099b      	lsrs	r3, r3, #6
 8001976:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 800197a:	4618      	mov	r0, r3
 800197c:	46bd      	mov	sp, r7
 800197e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001982:	4770      	bx	lr
 8001984:	40023800 	.word	0x40023800

08001988 <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 8001988:	b480      	push	{r7}
 800198a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 800198c:	4b04      	ldr	r3, [pc, #16]	@ (80019a0 <LL_RCC_PLL_GetP+0x18>)
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 8001994:	4618      	mov	r0, r3
 8001996:	46bd      	mov	sp, r7
 8001998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199c:	4770      	bx	lr
 800199e:	bf00      	nop
 80019a0:	40023800 	.word	0x40023800

080019a4 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80019a4:	b480      	push	{r7}
 80019a6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80019a8:	4b04      	ldr	r3, [pc, #16]	@ (80019bc <LL_RCC_PLL_GetDivider+0x18>)
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
}
 80019b0:	4618      	mov	r0, r3
 80019b2:	46bd      	mov	sp, r7
 80019b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b8:	4770      	bx	lr
 80019ba:	bf00      	nop
 80019bc:	40023800 	.word	0x40023800

080019c0 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b082      	sub	sp, #8
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 80019c8:	f000 f820 	bl	8001a0c <RCC_GetSystemClockFreq>
 80019cc:	4602      	mov	r2, r0
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4618      	mov	r0, r3
 80019d8:	f000 f840 	bl	8001a5c <RCC_GetHCLKClockFreq>
 80019dc:	4602      	mov	r2, r0
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	4618      	mov	r0, r3
 80019e8:	f000 f84e 	bl	8001a88 <RCC_GetPCLK1ClockFreq>
 80019ec:	4602      	mov	r2, r0
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	4618      	mov	r0, r3
 80019f8:	f000 f85a 	bl	8001ab0 <RCC_GetPCLK2ClockFreq>
 80019fc:	4602      	mov	r2, r0
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	60da      	str	r2, [r3, #12]
}
 8001a02:	bf00      	nop
 8001a04:	3708      	adds	r7, #8
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}
	...

08001a0c <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b082      	sub	sp, #8
 8001a10:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8001a12:	2300      	movs	r3, #0
 8001a14:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8001a16:	f7ff ff63 	bl	80018e0 <LL_RCC_GetSysClkSource>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	2b08      	cmp	r3, #8
 8001a1e:	d00c      	beq.n	8001a3a <RCC_GetSystemClockFreq+0x2e>
 8001a20:	2b08      	cmp	r3, #8
 8001a22:	d80f      	bhi.n	8001a44 <RCC_GetSystemClockFreq+0x38>
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d002      	beq.n	8001a2e <RCC_GetSystemClockFreq+0x22>
 8001a28:	2b04      	cmp	r3, #4
 8001a2a:	d003      	beq.n	8001a34 <RCC_GetSystemClockFreq+0x28>
 8001a2c:	e00a      	b.n	8001a44 <RCC_GetSystemClockFreq+0x38>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8001a2e:	4b09      	ldr	r3, [pc, #36]	@ (8001a54 <RCC_GetSystemClockFreq+0x48>)
 8001a30:	607b      	str	r3, [r7, #4]
      break;
 8001a32:	e00a      	b.n	8001a4a <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8001a34:	4b08      	ldr	r3, [pc, #32]	@ (8001a58 <RCC_GetSystemClockFreq+0x4c>)
 8001a36:	607b      	str	r3, [r7, #4]
      break;
 8001a38:	e007      	b.n	8001a4a <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 8001a3a:	2008      	movs	r0, #8
 8001a3c:	f000 f84c 	bl	8001ad8 <RCC_PLL_GetFreqDomain_SYS>
 8001a40:	6078      	str	r0, [r7, #4]
      break;
 8001a42:	e002      	b.n	8001a4a <RCC_GetSystemClockFreq+0x3e>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
      break;
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 8001a44:	4b03      	ldr	r3, [pc, #12]	@ (8001a54 <RCC_GetSystemClockFreq+0x48>)
 8001a46:	607b      	str	r3, [r7, #4]
      break;
 8001a48:	bf00      	nop
  }

  return frequency;
 8001a4a:	687b      	ldr	r3, [r7, #4]
}
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	3708      	adds	r7, #8
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bd80      	pop	{r7, pc}
 8001a54:	00f42400 	.word	0x00f42400
 8001a58:	007a1200 	.word	0x007a1200

08001a5c <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b082      	sub	sp, #8
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8001a64:	f7ff ff4a 	bl	80018fc <LL_RCC_GetAHBPrescaler>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	091b      	lsrs	r3, r3, #4
 8001a6c:	f003 030f 	and.w	r3, r3, #15
 8001a70:	4a04      	ldr	r2, [pc, #16]	@ (8001a84 <RCC_GetHCLKClockFreq+0x28>)
 8001a72:	5cd3      	ldrb	r3, [r2, r3]
 8001a74:	461a      	mov	r2, r3
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	40d3      	lsrs	r3, r2
}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	3708      	adds	r7, #8
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	bf00      	nop
 8001a84:	08005a40 	.word	0x08005a40

08001a88 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b082      	sub	sp, #8
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8001a90:	f7ff ff42 	bl	8001918 <LL_RCC_GetAPB1Prescaler>
 8001a94:	4603      	mov	r3, r0
 8001a96:	0a9b      	lsrs	r3, r3, #10
 8001a98:	4a04      	ldr	r2, [pc, #16]	@ (8001aac <RCC_GetPCLK1ClockFreq+0x24>)
 8001a9a:	5cd3      	ldrb	r3, [r2, r3]
 8001a9c:	461a      	mov	r2, r3
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	40d3      	lsrs	r3, r2
}
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	3708      	adds	r7, #8
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	08005a50 	.word	0x08005a50

08001ab0 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b082      	sub	sp, #8
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8001ab8:	f7ff ff3c 	bl	8001934 <LL_RCC_GetAPB2Prescaler>
 8001abc:	4603      	mov	r3, r0
 8001abe:	0b5b      	lsrs	r3, r3, #13
 8001ac0:	4a04      	ldr	r2, [pc, #16]	@ (8001ad4 <RCC_GetPCLK2ClockFreq+0x24>)
 8001ac2:	5cd3      	ldrb	r3, [r2, r3]
 8001ac4:	461a      	mov	r2, r3
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	40d3      	lsrs	r3, r2
}
 8001aca:	4618      	mov	r0, r3
 8001acc:	3708      	adds	r7, #8
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	08005a50 	.word	0x08005a50

08001ad8 <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 8001ad8:	b590      	push	{r4, r7, lr}
 8001ada:	b087      	sub	sp, #28
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U, pllsource = 0U, plloutputfreq = 0U;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	617b      	str	r3, [r7, #20]
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	60fb      	str	r3, [r7, #12]
 8001ae8:	2300      	movs	r3, #0
 8001aea:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8001aec:	f7ff ff30 	bl	8001950 <LL_RCC_PLL_GetMainSource>
 8001af0:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d004      	beq.n	8001b02 <RCC_PLL_GetFreqDomain_SYS+0x2a>
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001afe:	d003      	beq.n	8001b08 <RCC_PLL_GetFreqDomain_SYS+0x30>
 8001b00:	e005      	b.n	8001b0e <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8001b02:	4b12      	ldr	r3, [pc, #72]	@ (8001b4c <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8001b04:	617b      	str	r3, [r7, #20]
      break;
 8001b06:	e005      	b.n	8001b14 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8001b08:	4b11      	ldr	r3, [pc, #68]	@ (8001b50 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 8001b0a:	617b      	str	r3, [r7, #20]
      break;
 8001b0c:	e002      	b.n	8001b14 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    default:
      pllinputfreq = HSI_VALUE;
 8001b0e:	4b0f      	ldr	r3, [pc, #60]	@ (8001b4c <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8001b10:	617b      	str	r3, [r7, #20]
      break;
 8001b12:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2b08      	cmp	r3, #8
 8001b18:	d113      	bne.n	8001b42 <RCC_PLL_GetFreqDomain_SYS+0x6a>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8001b1a:	f7ff ff43 	bl	80019a4 <LL_RCC_PLL_GetDivider>
 8001b1e:	4602      	mov	r2, r0
 8001b20:	697b      	ldr	r3, [r7, #20]
 8001b22:	fbb3 f4f2 	udiv	r4, r3, r2
 8001b26:	f7ff ff21 	bl	800196c <LL_RCC_PLL_GetN>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	fb03 f404 	mul.w	r4, r3, r4
 8001b30:	f7ff ff2a 	bl	8001988 <LL_RCC_PLL_GetP>
 8001b34:	4603      	mov	r3, r0
 8001b36:	0c1b      	lsrs	r3, r3, #16
 8001b38:	3301      	adds	r3, #1
 8001b3a:	005b      	lsls	r3, r3, #1
 8001b3c:	fbb4 f3f3 	udiv	r3, r4, r3
 8001b40:	613b      	str	r3, [r7, #16]
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 8001b42:	693b      	ldr	r3, [r7, #16]
}
 8001b44:	4618      	mov	r0, r3
 8001b46:	371c      	adds	r7, #28
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bd90      	pop	{r4, r7, pc}
 8001b4c:	00f42400 	.word	0x00f42400
 8001b50:	007a1200 	.word	0x007a1200

08001b54 <LL_USART_IsEnabled>:
{
 8001b54:	b480      	push	{r7}
 8001b56:	b083      	sub	sp, #12
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	68db      	ldr	r3, [r3, #12]
 8001b60:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001b64:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001b68:	bf0c      	ite	eq
 8001b6a:	2301      	moveq	r3, #1
 8001b6c:	2300      	movne	r3, #0
 8001b6e:	b2db      	uxtb	r3, r3
}
 8001b70:	4618      	mov	r0, r3
 8001b72:	370c      	adds	r7, #12
 8001b74:	46bd      	mov	sp, r7
 8001b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7a:	4770      	bx	lr

08001b7c <LL_USART_SetStopBitsLength>:
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b083      	sub	sp, #12
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
 8001b84:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	691b      	ldr	r3, [r3, #16]
 8001b8a:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	431a      	orrs	r2, r3
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	611a      	str	r2, [r3, #16]
}
 8001b96:	bf00      	nop
 8001b98:	370c      	adds	r7, #12
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba0:	4770      	bx	lr

08001ba2 <LL_USART_SetHWFlowCtrl>:
{
 8001ba2:	b480      	push	{r7}
 8001ba4:	b083      	sub	sp, #12
 8001ba6:	af00      	add	r7, sp, #0
 8001ba8:	6078      	str	r0, [r7, #4]
 8001baa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	695b      	ldr	r3, [r3, #20]
 8001bb0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	431a      	orrs	r2, r3
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	615a      	str	r2, [r3, #20]
}
 8001bbc:	bf00      	nop
 8001bbe:	370c      	adds	r7, #12
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc6:	4770      	bx	lr

08001bc8 <LL_USART_SetBaudRate>:
{
 8001bc8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001bcc:	b0c0      	sub	sp, #256	@ 0x100
 8001bce:	af00      	add	r7, sp, #0
 8001bd0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8001bd4:	f8c7 10f8 	str.w	r1, [r7, #248]	@ 0xf8
 8001bd8:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 8001bdc:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8001be0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001be4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001be8:	f040 810c 	bne.w	8001e04 <LL_USART_SetBaudRate+0x23c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8001bec:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8001bf6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8001bfa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8001bfe:	4622      	mov	r2, r4
 8001c00:	462b      	mov	r3, r5
 8001c02:	1891      	adds	r1, r2, r2
 8001c04:	6639      	str	r1, [r7, #96]	@ 0x60
 8001c06:	415b      	adcs	r3, r3
 8001c08:	667b      	str	r3, [r7, #100]	@ 0x64
 8001c0a:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8001c0e:	4621      	mov	r1, r4
 8001c10:	eb12 0801 	adds.w	r8, r2, r1
 8001c14:	4629      	mov	r1, r5
 8001c16:	eb43 0901 	adc.w	r9, r3, r1
 8001c1a:	f04f 0200 	mov.w	r2, #0
 8001c1e:	f04f 0300 	mov.w	r3, #0
 8001c22:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001c26:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001c2a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001c2e:	4690      	mov	r8, r2
 8001c30:	4699      	mov	r9, r3
 8001c32:	4623      	mov	r3, r4
 8001c34:	eb18 0303 	adds.w	r3, r8, r3
 8001c38:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8001c3c:	462b      	mov	r3, r5
 8001c3e:	eb49 0303 	adc.w	r3, r9, r3
 8001c42:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8001c46:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	469a      	mov	sl, r3
 8001c4e:	4693      	mov	fp, r2
 8001c50:	eb1a 030a 	adds.w	r3, sl, sl
 8001c54:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001c56:	eb4b 030b 	adc.w	r3, fp, fp
 8001c5a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001c5c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001c60:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8001c64:	f7fe fabc 	bl	80001e0 <__aeabi_uldivmod>
 8001c68:	4602      	mov	r2, r0
 8001c6a:	460b      	mov	r3, r1
 8001c6c:	4b64      	ldr	r3, [pc, #400]	@ (8001e00 <LL_USART_SetBaudRate+0x238>)
 8001c6e:	fba3 2302 	umull	r2, r3, r3, r2
 8001c72:	095b      	lsrs	r3, r3, #5
 8001c74:	b29b      	uxth	r3, r3
 8001c76:	011b      	lsls	r3, r3, #4
 8001c78:	b29c      	uxth	r4, r3
 8001c7a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8001c7e:	2200      	movs	r2, #0
 8001c80:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8001c84:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8001c88:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	@ 0xd8
 8001c8c:	4642      	mov	r2, r8
 8001c8e:	464b      	mov	r3, r9
 8001c90:	1891      	adds	r1, r2, r2
 8001c92:	6539      	str	r1, [r7, #80]	@ 0x50
 8001c94:	415b      	adcs	r3, r3
 8001c96:	657b      	str	r3, [r7, #84]	@ 0x54
 8001c98:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8001c9c:	4641      	mov	r1, r8
 8001c9e:	1851      	adds	r1, r2, r1
 8001ca0:	64b9      	str	r1, [r7, #72]	@ 0x48
 8001ca2:	4649      	mov	r1, r9
 8001ca4:	414b      	adcs	r3, r1
 8001ca6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001ca8:	f04f 0200 	mov.w	r2, #0
 8001cac:	f04f 0300 	mov.w	r3, #0
 8001cb0:	e9d7 ab12 	ldrd	sl, fp, [r7, #72]	@ 0x48
 8001cb4:	4659      	mov	r1, fp
 8001cb6:	00cb      	lsls	r3, r1, #3
 8001cb8:	4651      	mov	r1, sl
 8001cba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001cbe:	4651      	mov	r1, sl
 8001cc0:	00ca      	lsls	r2, r1, #3
 8001cc2:	4610      	mov	r0, r2
 8001cc4:	4619      	mov	r1, r3
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	4642      	mov	r2, r8
 8001cca:	189b      	adds	r3, r3, r2
 8001ccc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8001cd0:	464b      	mov	r3, r9
 8001cd2:	460a      	mov	r2, r1
 8001cd4:	eb42 0303 	adc.w	r3, r2, r3
 8001cd8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8001cdc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8001ce6:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 8001cea:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8001cee:	460b      	mov	r3, r1
 8001cf0:	18db      	adds	r3, r3, r3
 8001cf2:	643b      	str	r3, [r7, #64]	@ 0x40
 8001cf4:	4613      	mov	r3, r2
 8001cf6:	eb42 0303 	adc.w	r3, r2, r3
 8001cfa:	647b      	str	r3, [r7, #68]	@ 0x44
 8001cfc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001d00:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	@ 0xd0
 8001d04:	f7fe fa6c 	bl	80001e0 <__aeabi_uldivmod>
 8001d08:	4602      	mov	r2, r0
 8001d0a:	460b      	mov	r3, r1
 8001d0c:	4611      	mov	r1, r2
 8001d0e:	4b3c      	ldr	r3, [pc, #240]	@ (8001e00 <LL_USART_SetBaudRate+0x238>)
 8001d10:	fba3 2301 	umull	r2, r3, r3, r1
 8001d14:	095b      	lsrs	r3, r3, #5
 8001d16:	2264      	movs	r2, #100	@ 0x64
 8001d18:	fb02 f303 	mul.w	r3, r2, r3
 8001d1c:	1acb      	subs	r3, r1, r3
 8001d1e:	00db      	lsls	r3, r3, #3
 8001d20:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8001d24:	4b36      	ldr	r3, [pc, #216]	@ (8001e00 <LL_USART_SetBaudRate+0x238>)
 8001d26:	fba3 2302 	umull	r2, r3, r3, r2
 8001d2a:	095b      	lsrs	r3, r3, #5
 8001d2c:	b29b      	uxth	r3, r3
 8001d2e:	005b      	lsls	r3, r3, #1
 8001d30:	b29b      	uxth	r3, r3
 8001d32:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8001d36:	b29b      	uxth	r3, r3
 8001d38:	4423      	add	r3, r4
 8001d3a:	b29c      	uxth	r4, r3
 8001d3c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8001d40:	2200      	movs	r2, #0
 8001d42:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8001d46:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8001d4a:	e9d7 8930 	ldrd	r8, r9, [r7, #192]	@ 0xc0
 8001d4e:	4642      	mov	r2, r8
 8001d50:	464b      	mov	r3, r9
 8001d52:	1891      	adds	r1, r2, r2
 8001d54:	63b9      	str	r1, [r7, #56]	@ 0x38
 8001d56:	415b      	adcs	r3, r3
 8001d58:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001d5a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8001d5e:	4641      	mov	r1, r8
 8001d60:	1851      	adds	r1, r2, r1
 8001d62:	6339      	str	r1, [r7, #48]	@ 0x30
 8001d64:	4649      	mov	r1, r9
 8001d66:	414b      	adcs	r3, r1
 8001d68:	637b      	str	r3, [r7, #52]	@ 0x34
 8001d6a:	f04f 0200 	mov.w	r2, #0
 8001d6e:	f04f 0300 	mov.w	r3, #0
 8001d72:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8001d76:	4659      	mov	r1, fp
 8001d78:	00cb      	lsls	r3, r1, #3
 8001d7a:	4651      	mov	r1, sl
 8001d7c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001d80:	4651      	mov	r1, sl
 8001d82:	00ca      	lsls	r2, r1, #3
 8001d84:	4610      	mov	r0, r2
 8001d86:	4619      	mov	r1, r3
 8001d88:	4603      	mov	r3, r0
 8001d8a:	4642      	mov	r2, r8
 8001d8c:	189b      	adds	r3, r3, r2
 8001d8e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8001d92:	464b      	mov	r3, r9
 8001d94:	460a      	mov	r2, r1
 8001d96:	eb42 0303 	adc.w	r3, r2, r3
 8001d9a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8001d9e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8001da2:	2200      	movs	r2, #0
 8001da4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8001da8:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 8001dac:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8001db0:	460b      	mov	r3, r1
 8001db2:	18db      	adds	r3, r3, r3
 8001db4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001db6:	4613      	mov	r3, r2
 8001db8:	eb42 0303 	adc.w	r3, r2, r3
 8001dbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001dbe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001dc2:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 8001dc6:	f7fe fa0b 	bl	80001e0 <__aeabi_uldivmod>
 8001dca:	4602      	mov	r2, r0
 8001dcc:	460b      	mov	r3, r1
 8001dce:	4b0c      	ldr	r3, [pc, #48]	@ (8001e00 <LL_USART_SetBaudRate+0x238>)
 8001dd0:	fba3 1302 	umull	r1, r3, r3, r2
 8001dd4:	095b      	lsrs	r3, r3, #5
 8001dd6:	2164      	movs	r1, #100	@ 0x64
 8001dd8:	fb01 f303 	mul.w	r3, r1, r3
 8001ddc:	1ad3      	subs	r3, r2, r3
 8001dde:	00db      	lsls	r3, r3, #3
 8001de0:	3332      	adds	r3, #50	@ 0x32
 8001de2:	4a07      	ldr	r2, [pc, #28]	@ (8001e00 <LL_USART_SetBaudRate+0x238>)
 8001de4:	fba2 2303 	umull	r2, r3, r2, r3
 8001de8:	095b      	lsrs	r3, r3, #5
 8001dea:	b29b      	uxth	r3, r3
 8001dec:	f003 0307 	and.w	r3, r3, #7
 8001df0:	b29b      	uxth	r3, r3
 8001df2:	4423      	add	r3, r4
 8001df4:	b29b      	uxth	r3, r3
 8001df6:	461a      	mov	r2, r3
 8001df8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001dfc:	609a      	str	r2, [r3, #8]
}
 8001dfe:	e108      	b.n	8002012 <LL_USART_SetBaudRate+0x44a>
 8001e00:	51eb851f 	.word	0x51eb851f
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8001e04:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8001e08:	2200      	movs	r2, #0
 8001e0a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8001e0e:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8001e12:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	@ 0xa8
 8001e16:	4642      	mov	r2, r8
 8001e18:	464b      	mov	r3, r9
 8001e1a:	1891      	adds	r1, r2, r2
 8001e1c:	6239      	str	r1, [r7, #32]
 8001e1e:	415b      	adcs	r3, r3
 8001e20:	627b      	str	r3, [r7, #36]	@ 0x24
 8001e22:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001e26:	4641      	mov	r1, r8
 8001e28:	1854      	adds	r4, r2, r1
 8001e2a:	4649      	mov	r1, r9
 8001e2c:	eb43 0501 	adc.w	r5, r3, r1
 8001e30:	f04f 0200 	mov.w	r2, #0
 8001e34:	f04f 0300 	mov.w	r3, #0
 8001e38:	00eb      	lsls	r3, r5, #3
 8001e3a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001e3e:	00e2      	lsls	r2, r4, #3
 8001e40:	4614      	mov	r4, r2
 8001e42:	461d      	mov	r5, r3
 8001e44:	4643      	mov	r3, r8
 8001e46:	18e3      	adds	r3, r4, r3
 8001e48:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8001e4c:	464b      	mov	r3, r9
 8001e4e:	eb45 0303 	adc.w	r3, r5, r3
 8001e52:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8001e56:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001e60:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8001e64:	f04f 0200 	mov.w	r2, #0
 8001e68:	f04f 0300 	mov.w	r3, #0
 8001e6c:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	@ 0x98
 8001e70:	4629      	mov	r1, r5
 8001e72:	008b      	lsls	r3, r1, #2
 8001e74:	4621      	mov	r1, r4
 8001e76:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001e7a:	4621      	mov	r1, r4
 8001e7c:	008a      	lsls	r2, r1, #2
 8001e7e:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 8001e82:	f7fe f9ad 	bl	80001e0 <__aeabi_uldivmod>
 8001e86:	4602      	mov	r2, r0
 8001e88:	460b      	mov	r3, r1
 8001e8a:	4b65      	ldr	r3, [pc, #404]	@ (8002020 <LL_USART_SetBaudRate+0x458>)
 8001e8c:	fba3 2302 	umull	r2, r3, r3, r2
 8001e90:	095b      	lsrs	r3, r3, #5
 8001e92:	b29b      	uxth	r3, r3
 8001e94:	011b      	lsls	r3, r3, #4
 8001e96:	b29c      	uxth	r4, r3
 8001e98:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001ea2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8001ea6:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	@ 0x90
 8001eaa:	4642      	mov	r2, r8
 8001eac:	464b      	mov	r3, r9
 8001eae:	1891      	adds	r1, r2, r2
 8001eb0:	61b9      	str	r1, [r7, #24]
 8001eb2:	415b      	adcs	r3, r3
 8001eb4:	61fb      	str	r3, [r7, #28]
 8001eb6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001eba:	4641      	mov	r1, r8
 8001ebc:	1851      	adds	r1, r2, r1
 8001ebe:	6139      	str	r1, [r7, #16]
 8001ec0:	4649      	mov	r1, r9
 8001ec2:	414b      	adcs	r3, r1
 8001ec4:	617b      	str	r3, [r7, #20]
 8001ec6:	f04f 0200 	mov.w	r2, #0
 8001eca:	f04f 0300 	mov.w	r3, #0
 8001ece:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001ed2:	4659      	mov	r1, fp
 8001ed4:	00cb      	lsls	r3, r1, #3
 8001ed6:	4651      	mov	r1, sl
 8001ed8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001edc:	4651      	mov	r1, sl
 8001ede:	00ca      	lsls	r2, r1, #3
 8001ee0:	4610      	mov	r0, r2
 8001ee2:	4619      	mov	r1, r3
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	4642      	mov	r2, r8
 8001ee8:	189b      	adds	r3, r3, r2
 8001eea:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001eee:	464b      	mov	r3, r9
 8001ef0:	460a      	mov	r2, r1
 8001ef2:	eb42 0303 	adc.w	r3, r2, r3
 8001ef6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8001efa:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8001efe:	2200      	movs	r2, #0
 8001f00:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001f04:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8001f08:	f04f 0200 	mov.w	r2, #0
 8001f0c:	f04f 0300 	mov.w	r3, #0
 8001f10:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	@ 0x80
 8001f14:	4649      	mov	r1, r9
 8001f16:	008b      	lsls	r3, r1, #2
 8001f18:	4641      	mov	r1, r8
 8001f1a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001f1e:	4641      	mov	r1, r8
 8001f20:	008a      	lsls	r2, r1, #2
 8001f22:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 8001f26:	f7fe f95b 	bl	80001e0 <__aeabi_uldivmod>
 8001f2a:	4602      	mov	r2, r0
 8001f2c:	460b      	mov	r3, r1
 8001f2e:	4611      	mov	r1, r2
 8001f30:	4b3b      	ldr	r3, [pc, #236]	@ (8002020 <LL_USART_SetBaudRate+0x458>)
 8001f32:	fba3 2301 	umull	r2, r3, r3, r1
 8001f36:	095b      	lsrs	r3, r3, #5
 8001f38:	2264      	movs	r2, #100	@ 0x64
 8001f3a:	fb02 f303 	mul.w	r3, r2, r3
 8001f3e:	1acb      	subs	r3, r1, r3
 8001f40:	011b      	lsls	r3, r3, #4
 8001f42:	3332      	adds	r3, #50	@ 0x32
 8001f44:	4a36      	ldr	r2, [pc, #216]	@ (8002020 <LL_USART_SetBaudRate+0x458>)
 8001f46:	fba2 2303 	umull	r2, r3, r2, r3
 8001f4a:	095b      	lsrs	r3, r3, #5
 8001f4c:	b29b      	uxth	r3, r3
 8001f4e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001f52:	b29b      	uxth	r3, r3
 8001f54:	4423      	add	r3, r4
 8001f56:	b29c      	uxth	r4, r3
 8001f58:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001f60:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8001f62:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8001f66:	4642      	mov	r2, r8
 8001f68:	464b      	mov	r3, r9
 8001f6a:	1891      	adds	r1, r2, r2
 8001f6c:	60b9      	str	r1, [r7, #8]
 8001f6e:	415b      	adcs	r3, r3
 8001f70:	60fb      	str	r3, [r7, #12]
 8001f72:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001f76:	4641      	mov	r1, r8
 8001f78:	1851      	adds	r1, r2, r1
 8001f7a:	6039      	str	r1, [r7, #0]
 8001f7c:	4649      	mov	r1, r9
 8001f7e:	414b      	adcs	r3, r1
 8001f80:	607b      	str	r3, [r7, #4]
 8001f82:	f04f 0200 	mov.w	r2, #0
 8001f86:	f04f 0300 	mov.w	r3, #0
 8001f8a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8001f8e:	4659      	mov	r1, fp
 8001f90:	00cb      	lsls	r3, r1, #3
 8001f92:	4651      	mov	r1, sl
 8001f94:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001f98:	4651      	mov	r1, sl
 8001f9a:	00ca      	lsls	r2, r1, #3
 8001f9c:	4610      	mov	r0, r2
 8001f9e:	4619      	mov	r1, r3
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	4642      	mov	r2, r8
 8001fa4:	189b      	adds	r3, r3, r2
 8001fa6:	673b      	str	r3, [r7, #112]	@ 0x70
 8001fa8:	464b      	mov	r3, r9
 8001faa:	460a      	mov	r2, r1
 8001fac:	eb42 0303 	adc.w	r3, r2, r3
 8001fb0:	677b      	str	r3, [r7, #116]	@ 0x74
 8001fb2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001fba:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001fbc:	f04f 0200 	mov.w	r2, #0
 8001fc0:	f04f 0300 	mov.w	r3, #0
 8001fc4:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	@ 0x68
 8001fc8:	4649      	mov	r1, r9
 8001fca:	008b      	lsls	r3, r1, #2
 8001fcc:	4641      	mov	r1, r8
 8001fce:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001fd2:	4641      	mov	r1, r8
 8001fd4:	008a      	lsls	r2, r1, #2
 8001fd6:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8001fda:	f7fe f901 	bl	80001e0 <__aeabi_uldivmod>
 8001fde:	4602      	mov	r2, r0
 8001fe0:	460b      	mov	r3, r1
 8001fe2:	4b0f      	ldr	r3, [pc, #60]	@ (8002020 <LL_USART_SetBaudRate+0x458>)
 8001fe4:	fba3 1302 	umull	r1, r3, r3, r2
 8001fe8:	095b      	lsrs	r3, r3, #5
 8001fea:	2164      	movs	r1, #100	@ 0x64
 8001fec:	fb01 f303 	mul.w	r3, r1, r3
 8001ff0:	1ad3      	subs	r3, r2, r3
 8001ff2:	011b      	lsls	r3, r3, #4
 8001ff4:	3332      	adds	r3, #50	@ 0x32
 8001ff6:	4a0a      	ldr	r2, [pc, #40]	@ (8002020 <LL_USART_SetBaudRate+0x458>)
 8001ff8:	fba2 2303 	umull	r2, r3, r2, r3
 8001ffc:	095b      	lsrs	r3, r3, #5
 8001ffe:	b29b      	uxth	r3, r3
 8002000:	f003 030f 	and.w	r3, r3, #15
 8002004:	b29b      	uxth	r3, r3
 8002006:	4423      	add	r3, r4
 8002008:	b29b      	uxth	r3, r3
 800200a:	461a      	mov	r2, r3
 800200c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002010:	609a      	str	r2, [r3, #8]
}
 8002012:	bf00      	nop
 8002014:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002018:	46bd      	mov	sp, r7
 800201a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800201e:	bf00      	nop
 8002020:	51eb851f 	.word	0x51eb851f

08002024 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b088      	sub	sp, #32
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
 800202c:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800202e:	2301      	movs	r3, #1
 8002030:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8002032:	2300      	movs	r3, #0
 8002034:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8002036:	6878      	ldr	r0, [r7, #4]
 8002038:	f7ff fd8c 	bl	8001b54 <LL_USART_IsEnabled>
 800203c:	4603      	mov	r3, r0
 800203e:	2b00      	cmp	r3, #0
 8002040:	d149      	bne.n	80020d6 <LL_USART_Init+0xb2>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	68db      	ldr	r3, [r3, #12]
 8002046:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 800204a:	f023 030c 	bic.w	r3, r3, #12
 800204e:	683a      	ldr	r2, [r7, #0]
 8002050:	6851      	ldr	r1, [r2, #4]
 8002052:	683a      	ldr	r2, [r7, #0]
 8002054:	68d2      	ldr	r2, [r2, #12]
 8002056:	4311      	orrs	r1, r2
 8002058:	683a      	ldr	r2, [r7, #0]
 800205a:	6912      	ldr	r2, [r2, #16]
 800205c:	4311      	orrs	r1, r2
 800205e:	683a      	ldr	r2, [r7, #0]
 8002060:	6992      	ldr	r2, [r2, #24]
 8002062:	430a      	orrs	r2, r1
 8002064:	431a      	orrs	r2, r3
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	689b      	ldr	r3, [r3, #8]
 800206e:	4619      	mov	r1, r3
 8002070:	6878      	ldr	r0, [r7, #4]
 8002072:	f7ff fd83 	bl	8001b7c <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	695b      	ldr	r3, [r3, #20]
 800207a:	4619      	mov	r1, r3
 800207c:	6878      	ldr	r0, [r7, #4]
 800207e:	f7ff fd90 	bl	8001ba2 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8002082:	f107 0308 	add.w	r3, r7, #8
 8002086:	4618      	mov	r0, r3
 8002088:	f7ff fc9a 	bl	80019c0 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	4a14      	ldr	r2, [pc, #80]	@ (80020e0 <LL_USART_Init+0xbc>)
 8002090:	4293      	cmp	r3, r2
 8002092:	d102      	bne.n	800209a <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8002094:	697b      	ldr	r3, [r7, #20]
 8002096:	61bb      	str	r3, [r7, #24]
 8002098:	e00c      	b.n	80020b4 <LL_USART_Init+0x90>
    }
    else if (USARTx == USART2)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	4a11      	ldr	r2, [pc, #68]	@ (80020e4 <LL_USART_Init+0xc0>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d102      	bne.n	80020a8 <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80020a2:	693b      	ldr	r3, [r7, #16]
 80020a4:	61bb      	str	r3, [r7, #24]
 80020a6:	e005      	b.n	80020b4 <LL_USART_Init+0x90>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	4a0f      	ldr	r2, [pc, #60]	@ (80020e8 <LL_USART_Init+0xc4>)
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d101      	bne.n	80020b4 <LL_USART_Init+0x90>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 80020b0:	697b      	ldr	r3, [r7, #20]
 80020b2:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 80020b4:	69bb      	ldr	r3, [r7, #24]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d00d      	beq.n	80020d6 <LL_USART_Init+0xb2>
        && (USART_InitStruct->BaudRate != 0U))
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d009      	beq.n	80020d6 <LL_USART_Init+0xb2>
    {
      status = SUCCESS;
 80020c2:	2300      	movs	r3, #0
 80020c4:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->OverSampling,
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	699a      	ldr	r2, [r3, #24]
                           USART_InitStruct->BaudRate);
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	681b      	ldr	r3, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 80020ce:	69b9      	ldr	r1, [r7, #24]
 80020d0:	6878      	ldr	r0, [r7, #4]
 80020d2:	f7ff fd79 	bl	8001bc8 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 80020d6:	7ffb      	ldrb	r3, [r7, #31]
}
 80020d8:	4618      	mov	r0, r3
 80020da:	3720      	adds	r7, #32
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd80      	pop	{r7, pc}
 80020e0:	40011000 	.word	0x40011000
 80020e4:	40004400 	.word	0x40004400
 80020e8:	40011400 	.word	0x40011400

080020ec <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 80020ec:	b480      	push	{r7}
 80020ee:	b083      	sub	sp, #12
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 80020f4:	4a04      	ldr	r2, [pc, #16]	@ (8002108 <LL_SetSystemCoreClock+0x1c>)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6013      	str	r3, [r2, #0]
}
 80020fa:	bf00      	nop
 80020fc:	370c      	adds	r7, #12
 80020fe:	46bd      	mov	sp, r7
 8002100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002104:	4770      	bx	lr
 8002106:	bf00      	nop
 8002108:	20000000 	.word	0x20000000

0800210c <__NVIC_SetPriority>:
{
 800210c:	b480      	push	{r7}
 800210e:	b083      	sub	sp, #12
 8002110:	af00      	add	r7, sp, #0
 8002112:	4603      	mov	r3, r0
 8002114:	6039      	str	r1, [r7, #0]
 8002116:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002118:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800211c:	2b00      	cmp	r3, #0
 800211e:	db0a      	blt.n	8002136 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	b2da      	uxtb	r2, r3
 8002124:	490c      	ldr	r1, [pc, #48]	@ (8002158 <__NVIC_SetPriority+0x4c>)
 8002126:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800212a:	0112      	lsls	r2, r2, #4
 800212c:	b2d2      	uxtb	r2, r2
 800212e:	440b      	add	r3, r1
 8002130:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002134:	e00a      	b.n	800214c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	b2da      	uxtb	r2, r3
 800213a:	4908      	ldr	r1, [pc, #32]	@ (800215c <__NVIC_SetPriority+0x50>)
 800213c:	79fb      	ldrb	r3, [r7, #7]
 800213e:	f003 030f 	and.w	r3, r3, #15
 8002142:	3b04      	subs	r3, #4
 8002144:	0112      	lsls	r2, r2, #4
 8002146:	b2d2      	uxtb	r2, r2
 8002148:	440b      	add	r3, r1
 800214a:	761a      	strb	r2, [r3, #24]
}
 800214c:	bf00      	nop
 800214e:	370c      	adds	r7, #12
 8002150:	46bd      	mov	sp, r7
 8002152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002156:	4770      	bx	lr
 8002158:	e000e100 	.word	0xe000e100
 800215c:	e000ed00 	.word	0xe000ed00

08002160 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8002160:	b580      	push	{r7, lr}
 8002162:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8002164:	4b05      	ldr	r3, [pc, #20]	@ (800217c <SysTick_Handler+0x1c>)
 8002166:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8002168:	f002 f996 	bl	8004498 <xTaskGetSchedulerState>
 800216c:	4603      	mov	r3, r0
 800216e:	2b01      	cmp	r3, #1
 8002170:	d001      	beq.n	8002176 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8002172:	f003 f891 	bl	8005298 <xPortSysTickHandler>
  }
}
 8002176:	bf00      	nop
 8002178:	bd80      	pop	{r7, pc}
 800217a:	bf00      	nop
 800217c:	e000e010 	.word	0xe000e010

08002180 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8002180:	b580      	push	{r7, lr}
 8002182:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8002184:	2100      	movs	r1, #0
 8002186:	f06f 0004 	mvn.w	r0, #4
 800218a:	f7ff ffbf 	bl	800210c <__NVIC_SetPriority>
#endif
}
 800218e:	bf00      	nop
 8002190:	bd80      	pop	{r7, pc}
	...

08002194 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002194:	b480      	push	{r7}
 8002196:	b083      	sub	sp, #12
 8002198:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800219a:	f3ef 8305 	mrs	r3, IPSR
 800219e:	603b      	str	r3, [r7, #0]
  return(result);
 80021a0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d003      	beq.n	80021ae <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80021a6:	f06f 0305 	mvn.w	r3, #5
 80021aa:	607b      	str	r3, [r7, #4]
 80021ac:	e00c      	b.n	80021c8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80021ae:	4b0a      	ldr	r3, [pc, #40]	@ (80021d8 <osKernelInitialize+0x44>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d105      	bne.n	80021c2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80021b6:	4b08      	ldr	r3, [pc, #32]	@ (80021d8 <osKernelInitialize+0x44>)
 80021b8:	2201      	movs	r2, #1
 80021ba:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80021bc:	2300      	movs	r3, #0
 80021be:	607b      	str	r3, [r7, #4]
 80021c0:	e002      	b.n	80021c8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80021c2:	f04f 33ff 	mov.w	r3, #4294967295
 80021c6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80021c8:	687b      	ldr	r3, [r7, #4]
}
 80021ca:	4618      	mov	r0, r3
 80021cc:	370c      	adds	r7, #12
 80021ce:	46bd      	mov	sp, r7
 80021d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d4:	4770      	bx	lr
 80021d6:	bf00      	nop
 80021d8:	200000d8 	.word	0x200000d8

080021dc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80021dc:	b580      	push	{r7, lr}
 80021de:	b082      	sub	sp, #8
 80021e0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80021e2:	f3ef 8305 	mrs	r3, IPSR
 80021e6:	603b      	str	r3, [r7, #0]
  return(result);
 80021e8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d003      	beq.n	80021f6 <osKernelStart+0x1a>
    stat = osErrorISR;
 80021ee:	f06f 0305 	mvn.w	r3, #5
 80021f2:	607b      	str	r3, [r7, #4]
 80021f4:	e010      	b.n	8002218 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80021f6:	4b0b      	ldr	r3, [pc, #44]	@ (8002224 <osKernelStart+0x48>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	2b01      	cmp	r3, #1
 80021fc:	d109      	bne.n	8002212 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80021fe:	f7ff ffbf 	bl	8002180 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8002202:	4b08      	ldr	r3, [pc, #32]	@ (8002224 <osKernelStart+0x48>)
 8002204:	2202      	movs	r2, #2
 8002206:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8002208:	f001 fce2 	bl	8003bd0 <vTaskStartScheduler>
      stat = osOK;
 800220c:	2300      	movs	r3, #0
 800220e:	607b      	str	r3, [r7, #4]
 8002210:	e002      	b.n	8002218 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8002212:	f04f 33ff 	mov.w	r3, #4294967295
 8002216:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002218:	687b      	ldr	r3, [r7, #4]
}
 800221a:	4618      	mov	r0, r3
 800221c:	3708      	adds	r7, #8
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}
 8002222:	bf00      	nop
 8002224:	200000d8 	.word	0x200000d8

08002228 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002228:	b580      	push	{r7, lr}
 800222a:	b08e      	sub	sp, #56	@ 0x38
 800222c:	af04      	add	r7, sp, #16
 800222e:	60f8      	str	r0, [r7, #12]
 8002230:	60b9      	str	r1, [r7, #8]
 8002232:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002234:	2300      	movs	r3, #0
 8002236:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002238:	f3ef 8305 	mrs	r3, IPSR
 800223c:	617b      	str	r3, [r7, #20]
  return(result);
 800223e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8002240:	2b00      	cmp	r3, #0
 8002242:	d17e      	bne.n	8002342 <osThreadNew+0x11a>
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d07b      	beq.n	8002342 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800224a:	2380      	movs	r3, #128	@ 0x80
 800224c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800224e:	2318      	movs	r3, #24
 8002250:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8002252:	2300      	movs	r3, #0
 8002254:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8002256:	f04f 33ff 	mov.w	r3, #4294967295
 800225a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d045      	beq.n	80022ee <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d002      	beq.n	8002270 <osThreadNew+0x48>
        name = attr->name;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	699b      	ldr	r3, [r3, #24]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d002      	beq.n	800227e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	699b      	ldr	r3, [r3, #24]
 800227c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800227e:	69fb      	ldr	r3, [r7, #28]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d008      	beq.n	8002296 <osThreadNew+0x6e>
 8002284:	69fb      	ldr	r3, [r7, #28]
 8002286:	2b38      	cmp	r3, #56	@ 0x38
 8002288:	d805      	bhi.n	8002296 <osThreadNew+0x6e>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	f003 0301 	and.w	r3, r3, #1
 8002292:	2b00      	cmp	r3, #0
 8002294:	d001      	beq.n	800229a <osThreadNew+0x72>
        return (NULL);
 8002296:	2300      	movs	r3, #0
 8002298:	e054      	b.n	8002344 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	695b      	ldr	r3, [r3, #20]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d003      	beq.n	80022aa <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	695b      	ldr	r3, [r3, #20]
 80022a6:	089b      	lsrs	r3, r3, #2
 80022a8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	689b      	ldr	r3, [r3, #8]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d00e      	beq.n	80022d0 <osThreadNew+0xa8>
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	68db      	ldr	r3, [r3, #12]
 80022b6:	2ba7      	cmp	r3, #167	@ 0xa7
 80022b8:	d90a      	bls.n	80022d0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d006      	beq.n	80022d0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	695b      	ldr	r3, [r3, #20]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d002      	beq.n	80022d0 <osThreadNew+0xa8>
        mem = 1;
 80022ca:	2301      	movs	r3, #1
 80022cc:	61bb      	str	r3, [r7, #24]
 80022ce:	e010      	b.n	80022f2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	689b      	ldr	r3, [r3, #8]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d10c      	bne.n	80022f2 <osThreadNew+0xca>
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	68db      	ldr	r3, [r3, #12]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d108      	bne.n	80022f2 <osThreadNew+0xca>
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	691b      	ldr	r3, [r3, #16]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d104      	bne.n	80022f2 <osThreadNew+0xca>
          mem = 0;
 80022e8:	2300      	movs	r3, #0
 80022ea:	61bb      	str	r3, [r7, #24]
 80022ec:	e001      	b.n	80022f2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80022ee:	2300      	movs	r3, #0
 80022f0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80022f2:	69bb      	ldr	r3, [r7, #24]
 80022f4:	2b01      	cmp	r3, #1
 80022f6:	d110      	bne.n	800231a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80022fc:	687a      	ldr	r2, [r7, #4]
 80022fe:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002300:	9202      	str	r2, [sp, #8]
 8002302:	9301      	str	r3, [sp, #4]
 8002304:	69fb      	ldr	r3, [r7, #28]
 8002306:	9300      	str	r3, [sp, #0]
 8002308:	68bb      	ldr	r3, [r7, #8]
 800230a:	6a3a      	ldr	r2, [r7, #32]
 800230c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800230e:	68f8      	ldr	r0, [r7, #12]
 8002310:	f001 fa6a 	bl	80037e8 <xTaskCreateStatic>
 8002314:	4603      	mov	r3, r0
 8002316:	613b      	str	r3, [r7, #16]
 8002318:	e013      	b.n	8002342 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800231a:	69bb      	ldr	r3, [r7, #24]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d110      	bne.n	8002342 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002320:	6a3b      	ldr	r3, [r7, #32]
 8002322:	b29a      	uxth	r2, r3
 8002324:	f107 0310 	add.w	r3, r7, #16
 8002328:	9301      	str	r3, [sp, #4]
 800232a:	69fb      	ldr	r3, [r7, #28]
 800232c:	9300      	str	r3, [sp, #0]
 800232e:	68bb      	ldr	r3, [r7, #8]
 8002330:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002332:	68f8      	ldr	r0, [r7, #12]
 8002334:	f001 fab8 	bl	80038a8 <xTaskCreate>
 8002338:	4603      	mov	r3, r0
 800233a:	2b01      	cmp	r3, #1
 800233c:	d001      	beq.n	8002342 <osThreadNew+0x11a>
            hTask = NULL;
 800233e:	2300      	movs	r3, #0
 8002340:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8002342:	693b      	ldr	r3, [r7, #16]
}
 8002344:	4618      	mov	r0, r3
 8002346:	3728      	adds	r7, #40	@ 0x28
 8002348:	46bd      	mov	sp, r7
 800234a:	bd80      	pop	{r7, pc}

0800234c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800234c:	b580      	push	{r7, lr}
 800234e:	b084      	sub	sp, #16
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002354:	f3ef 8305 	mrs	r3, IPSR
 8002358:	60bb      	str	r3, [r7, #8]
  return(result);
 800235a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800235c:	2b00      	cmp	r3, #0
 800235e:	d003      	beq.n	8002368 <osDelay+0x1c>
    stat = osErrorISR;
 8002360:	f06f 0305 	mvn.w	r3, #5
 8002364:	60fb      	str	r3, [r7, #12]
 8002366:	e007      	b.n	8002378 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8002368:	2300      	movs	r3, #0
 800236a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d002      	beq.n	8002378 <osDelay+0x2c>
      vTaskDelay(ticks);
 8002372:	6878      	ldr	r0, [r7, #4]
 8002374:	f001 fbf6 	bl	8003b64 <vTaskDelay>
    }
  }

  return (stat);
 8002378:	68fb      	ldr	r3, [r7, #12]
}
 800237a:	4618      	mov	r0, r3
 800237c:	3710      	adds	r7, #16
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}

08002382 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8002382:	b580      	push	{r7, lr}
 8002384:	b08a      	sub	sp, #40	@ 0x28
 8002386:	af02      	add	r7, sp, #8
 8002388:	60f8      	str	r0, [r7, #12]
 800238a:	60b9      	str	r1, [r7, #8]
 800238c:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800238e:	2300      	movs	r3, #0
 8002390:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002392:	f3ef 8305 	mrs	r3, IPSR
 8002396:	613b      	str	r3, [r7, #16]
  return(result);
 8002398:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800239a:	2b00      	cmp	r3, #0
 800239c:	d175      	bne.n	800248a <osSemaphoreNew+0x108>
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d072      	beq.n	800248a <osSemaphoreNew+0x108>
 80023a4:	68ba      	ldr	r2, [r7, #8]
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	429a      	cmp	r2, r3
 80023aa:	d86e      	bhi.n	800248a <osSemaphoreNew+0x108>
    mem = -1;
 80023ac:	f04f 33ff 	mov.w	r3, #4294967295
 80023b0:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d015      	beq.n	80023e4 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	689b      	ldr	r3, [r3, #8]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d006      	beq.n	80023ce <osSemaphoreNew+0x4c>
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	68db      	ldr	r3, [r3, #12]
 80023c4:	2b4f      	cmp	r3, #79	@ 0x4f
 80023c6:	d902      	bls.n	80023ce <osSemaphoreNew+0x4c>
        mem = 1;
 80023c8:	2301      	movs	r3, #1
 80023ca:	61bb      	str	r3, [r7, #24]
 80023cc:	e00c      	b.n	80023e8 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	689b      	ldr	r3, [r3, #8]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d108      	bne.n	80023e8 <osSemaphoreNew+0x66>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	68db      	ldr	r3, [r3, #12]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d104      	bne.n	80023e8 <osSemaphoreNew+0x66>
          mem = 0;
 80023de:	2300      	movs	r3, #0
 80023e0:	61bb      	str	r3, [r7, #24]
 80023e2:	e001      	b.n	80023e8 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 80023e4:	2300      	movs	r3, #0
 80023e6:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 80023e8:	69bb      	ldr	r3, [r7, #24]
 80023ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023ee:	d04c      	beq.n	800248a <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	2b01      	cmp	r3, #1
 80023f4:	d128      	bne.n	8002448 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 80023f6:	69bb      	ldr	r3, [r7, #24]
 80023f8:	2b01      	cmp	r3, #1
 80023fa:	d10a      	bne.n	8002412 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	689b      	ldr	r3, [r3, #8]
 8002400:	2203      	movs	r2, #3
 8002402:	9200      	str	r2, [sp, #0]
 8002404:	2200      	movs	r2, #0
 8002406:	2100      	movs	r1, #0
 8002408:	2001      	movs	r0, #1
 800240a:	f000 fa2b 	bl	8002864 <xQueueGenericCreateStatic>
 800240e:	61f8      	str	r0, [r7, #28]
 8002410:	e005      	b.n	800241e <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8002412:	2203      	movs	r2, #3
 8002414:	2100      	movs	r1, #0
 8002416:	2001      	movs	r0, #1
 8002418:	f000 faa1 	bl	800295e <xQueueGenericCreate>
 800241c:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800241e:	69fb      	ldr	r3, [r7, #28]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d022      	beq.n	800246a <osSemaphoreNew+0xe8>
 8002424:	68bb      	ldr	r3, [r7, #8]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d01f      	beq.n	800246a <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800242a:	2300      	movs	r3, #0
 800242c:	2200      	movs	r2, #0
 800242e:	2100      	movs	r1, #0
 8002430:	69f8      	ldr	r0, [r7, #28]
 8002432:	f000 fb61 	bl	8002af8 <xQueueGenericSend>
 8002436:	4603      	mov	r3, r0
 8002438:	2b01      	cmp	r3, #1
 800243a:	d016      	beq.n	800246a <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800243c:	69f8      	ldr	r0, [r7, #28]
 800243e:	f000 ffff 	bl	8003440 <vQueueDelete>
            hSemaphore = NULL;
 8002442:	2300      	movs	r3, #0
 8002444:	61fb      	str	r3, [r7, #28]
 8002446:	e010      	b.n	800246a <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8002448:	69bb      	ldr	r3, [r7, #24]
 800244a:	2b01      	cmp	r3, #1
 800244c:	d108      	bne.n	8002460 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	689b      	ldr	r3, [r3, #8]
 8002452:	461a      	mov	r2, r3
 8002454:	68b9      	ldr	r1, [r7, #8]
 8002456:	68f8      	ldr	r0, [r7, #12]
 8002458:	f000 fadf 	bl	8002a1a <xQueueCreateCountingSemaphoreStatic>
 800245c:	61f8      	str	r0, [r7, #28]
 800245e:	e004      	b.n	800246a <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8002460:	68b9      	ldr	r1, [r7, #8]
 8002462:	68f8      	ldr	r0, [r7, #12]
 8002464:	f000 fb12 	bl	8002a8c <xQueueCreateCountingSemaphore>
 8002468:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800246a:	69fb      	ldr	r3, [r7, #28]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d00c      	beq.n	800248a <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d003      	beq.n	800247e <osSemaphoreNew+0xfc>
          name = attr->name;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	617b      	str	r3, [r7, #20]
 800247c:	e001      	b.n	8002482 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800247e:	2300      	movs	r3, #0
 8002480:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8002482:	6979      	ldr	r1, [r7, #20]
 8002484:	69f8      	ldr	r0, [r7, #28]
 8002486:	f001 f927 	bl	80036d8 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800248a:	69fb      	ldr	r3, [r7, #28]
}
 800248c:	4618      	mov	r0, r3
 800248e:	3720      	adds	r7, #32
 8002490:	46bd      	mov	sp, r7
 8002492:	bd80      	pop	{r7, pc}

08002494 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8002494:	b580      	push	{r7, lr}
 8002496:	b086      	sub	sp, #24
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
 800249c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80024a2:	2300      	movs	r3, #0
 80024a4:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 80024a6:	693b      	ldr	r3, [r7, #16]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d103      	bne.n	80024b4 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 80024ac:	f06f 0303 	mvn.w	r3, #3
 80024b0:	617b      	str	r3, [r7, #20]
 80024b2:	e039      	b.n	8002528 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80024b4:	f3ef 8305 	mrs	r3, IPSR
 80024b8:	60fb      	str	r3, [r7, #12]
  return(result);
 80024ba:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d022      	beq.n	8002506 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d003      	beq.n	80024ce <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 80024c6:	f06f 0303 	mvn.w	r3, #3
 80024ca:	617b      	str	r3, [r7, #20]
 80024cc:	e02c      	b.n	8002528 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 80024ce:	2300      	movs	r3, #0
 80024d0:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 80024d2:	f107 0308 	add.w	r3, r7, #8
 80024d6:	461a      	mov	r2, r3
 80024d8:	2100      	movs	r1, #0
 80024da:	6938      	ldr	r0, [r7, #16]
 80024dc:	f000 ff2e 	bl	800333c <xQueueReceiveFromISR>
 80024e0:	4603      	mov	r3, r0
 80024e2:	2b01      	cmp	r3, #1
 80024e4:	d003      	beq.n	80024ee <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 80024e6:	f06f 0302 	mvn.w	r3, #2
 80024ea:	617b      	str	r3, [r7, #20]
 80024ec:	e01c      	b.n	8002528 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 80024ee:	68bb      	ldr	r3, [r7, #8]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d019      	beq.n	8002528 <osSemaphoreAcquire+0x94>
 80024f4:	4b0f      	ldr	r3, [pc, #60]	@ (8002534 <osSemaphoreAcquire+0xa0>)
 80024f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80024fa:	601a      	str	r2, [r3, #0]
 80024fc:	f3bf 8f4f 	dsb	sy
 8002500:	f3bf 8f6f 	isb	sy
 8002504:	e010      	b.n	8002528 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8002506:	6839      	ldr	r1, [r7, #0]
 8002508:	6938      	ldr	r0, [r7, #16]
 800250a:	f000 fe07 	bl	800311c <xQueueSemaphoreTake>
 800250e:	4603      	mov	r3, r0
 8002510:	2b01      	cmp	r3, #1
 8002512:	d009      	beq.n	8002528 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d003      	beq.n	8002522 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800251a:	f06f 0301 	mvn.w	r3, #1
 800251e:	617b      	str	r3, [r7, #20]
 8002520:	e002      	b.n	8002528 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8002522:	f06f 0302 	mvn.w	r3, #2
 8002526:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8002528:	697b      	ldr	r3, [r7, #20]
}
 800252a:	4618      	mov	r0, r3
 800252c:	3718      	adds	r7, #24
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}
 8002532:	bf00      	nop
 8002534:	e000ed04 	.word	0xe000ed04

08002538 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8002538:	b580      	push	{r7, lr}
 800253a:	b086      	sub	sp, #24
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8002544:	2300      	movs	r3, #0
 8002546:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8002548:	693b      	ldr	r3, [r7, #16]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d103      	bne.n	8002556 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800254e:	f06f 0303 	mvn.w	r3, #3
 8002552:	617b      	str	r3, [r7, #20]
 8002554:	e02c      	b.n	80025b0 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002556:	f3ef 8305 	mrs	r3, IPSR
 800255a:	60fb      	str	r3, [r7, #12]
  return(result);
 800255c:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800255e:	2b00      	cmp	r3, #0
 8002560:	d01a      	beq.n	8002598 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8002562:	2300      	movs	r3, #0
 8002564:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8002566:	f107 0308 	add.w	r3, r7, #8
 800256a:	4619      	mov	r1, r3
 800256c:	6938      	ldr	r0, [r7, #16]
 800256e:	f000 fc63 	bl	8002e38 <xQueueGiveFromISR>
 8002572:	4603      	mov	r3, r0
 8002574:	2b01      	cmp	r3, #1
 8002576:	d003      	beq.n	8002580 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8002578:	f06f 0302 	mvn.w	r3, #2
 800257c:	617b      	str	r3, [r7, #20]
 800257e:	e017      	b.n	80025b0 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8002580:	68bb      	ldr	r3, [r7, #8]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d014      	beq.n	80025b0 <osSemaphoreRelease+0x78>
 8002586:	4b0d      	ldr	r3, [pc, #52]	@ (80025bc <osSemaphoreRelease+0x84>)
 8002588:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800258c:	601a      	str	r2, [r3, #0]
 800258e:	f3bf 8f4f 	dsb	sy
 8002592:	f3bf 8f6f 	isb	sy
 8002596:	e00b      	b.n	80025b0 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8002598:	2300      	movs	r3, #0
 800259a:	2200      	movs	r2, #0
 800259c:	2100      	movs	r1, #0
 800259e:	6938      	ldr	r0, [r7, #16]
 80025a0:	f000 faaa 	bl	8002af8 <xQueueGenericSend>
 80025a4:	4603      	mov	r3, r0
 80025a6:	2b01      	cmp	r3, #1
 80025a8:	d002      	beq.n	80025b0 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 80025aa:	f06f 0302 	mvn.w	r3, #2
 80025ae:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 80025b0:	697b      	ldr	r3, [r7, #20]
}
 80025b2:	4618      	mov	r0, r3
 80025b4:	3718      	adds	r7, #24
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bd80      	pop	{r7, pc}
 80025ba:	bf00      	nop
 80025bc:	e000ed04 	.word	0xe000ed04

080025c0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80025c0:	b480      	push	{r7}
 80025c2:	b085      	sub	sp, #20
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	60f8      	str	r0, [r7, #12]
 80025c8:	60b9      	str	r1, [r7, #8]
 80025ca:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	4a07      	ldr	r2, [pc, #28]	@ (80025ec <vApplicationGetIdleTaskMemory+0x2c>)
 80025d0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80025d2:	68bb      	ldr	r3, [r7, #8]
 80025d4:	4a06      	ldr	r2, [pc, #24]	@ (80025f0 <vApplicationGetIdleTaskMemory+0x30>)
 80025d6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2280      	movs	r2, #128	@ 0x80
 80025dc:	601a      	str	r2, [r3, #0]
}
 80025de:	bf00      	nop
 80025e0:	3714      	adds	r7, #20
 80025e2:	46bd      	mov	sp, r7
 80025e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e8:	4770      	bx	lr
 80025ea:	bf00      	nop
 80025ec:	200000dc 	.word	0x200000dc
 80025f0:	20000184 	.word	0x20000184

080025f4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80025f4:	b480      	push	{r7}
 80025f6:	b085      	sub	sp, #20
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	60f8      	str	r0, [r7, #12]
 80025fc:	60b9      	str	r1, [r7, #8]
 80025fe:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	4a07      	ldr	r2, [pc, #28]	@ (8002620 <vApplicationGetTimerTaskMemory+0x2c>)
 8002604:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002606:	68bb      	ldr	r3, [r7, #8]
 8002608:	4a06      	ldr	r2, [pc, #24]	@ (8002624 <vApplicationGetTimerTaskMemory+0x30>)
 800260a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002612:	601a      	str	r2, [r3, #0]
}
 8002614:	bf00      	nop
 8002616:	3714      	adds	r7, #20
 8002618:	46bd      	mov	sp, r7
 800261a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261e:	4770      	bx	lr
 8002620:	20000384 	.word	0x20000384
 8002624:	2000042c 	.word	0x2000042c

08002628 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002628:	b480      	push	{r7}
 800262a:	b083      	sub	sp, #12
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	f103 0208 	add.w	r2, r3, #8
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	f04f 32ff 	mov.w	r2, #4294967295
 8002640:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	f103 0208 	add.w	r2, r3, #8
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	f103 0208 	add.w	r2, r3, #8
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2200      	movs	r2, #0
 800265a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800265c:	bf00      	nop
 800265e:	370c      	adds	r7, #12
 8002660:	46bd      	mov	sp, r7
 8002662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002666:	4770      	bx	lr

08002668 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002668:	b480      	push	{r7}
 800266a:	b083      	sub	sp, #12
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2200      	movs	r2, #0
 8002674:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002676:	bf00      	nop
 8002678:	370c      	adds	r7, #12
 800267a:	46bd      	mov	sp, r7
 800267c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002680:	4770      	bx	lr

08002682 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002682:	b480      	push	{r7}
 8002684:	b085      	sub	sp, #20
 8002686:	af00      	add	r7, sp, #0
 8002688:	6078      	str	r0, [r7, #4]
 800268a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	68fa      	ldr	r2, [r7, #12]
 8002696:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	689a      	ldr	r2, [r3, #8]
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	689b      	ldr	r3, [r3, #8]
 80026a4:	683a      	ldr	r2, [r7, #0]
 80026a6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	683a      	ldr	r2, [r7, #0]
 80026ac:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	687a      	ldr	r2, [r7, #4]
 80026b2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	1c5a      	adds	r2, r3, #1
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	601a      	str	r2, [r3, #0]
}
 80026be:	bf00      	nop
 80026c0:	3714      	adds	r7, #20
 80026c2:	46bd      	mov	sp, r7
 80026c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c8:	4770      	bx	lr

080026ca <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80026ca:	b480      	push	{r7}
 80026cc:	b085      	sub	sp, #20
 80026ce:	af00      	add	r7, sp, #0
 80026d0:	6078      	str	r0, [r7, #4]
 80026d2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80026da:	68bb      	ldr	r3, [r7, #8]
 80026dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026e0:	d103      	bne.n	80026ea <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	691b      	ldr	r3, [r3, #16]
 80026e6:	60fb      	str	r3, [r7, #12]
 80026e8:	e00c      	b.n	8002704 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	3308      	adds	r3, #8
 80026ee:	60fb      	str	r3, [r7, #12]
 80026f0:	e002      	b.n	80026f8 <vListInsert+0x2e>
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	60fb      	str	r3, [r7, #12]
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	68ba      	ldr	r2, [r7, #8]
 8002700:	429a      	cmp	r2, r3
 8002702:	d2f6      	bcs.n	80026f2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	685a      	ldr	r2, [r3, #4]
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	683a      	ldr	r2, [r7, #0]
 8002712:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	68fa      	ldr	r2, [r7, #12]
 8002718:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	683a      	ldr	r2, [r7, #0]
 800271e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	687a      	ldr	r2, [r7, #4]
 8002724:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	1c5a      	adds	r2, r3, #1
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	601a      	str	r2, [r3, #0]
}
 8002730:	bf00      	nop
 8002732:	3714      	adds	r7, #20
 8002734:	46bd      	mov	sp, r7
 8002736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273a:	4770      	bx	lr

0800273c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800273c:	b480      	push	{r7}
 800273e:	b085      	sub	sp, #20
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	691b      	ldr	r3, [r3, #16]
 8002748:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	687a      	ldr	r2, [r7, #4]
 8002750:	6892      	ldr	r2, [r2, #8]
 8002752:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	689b      	ldr	r3, [r3, #8]
 8002758:	687a      	ldr	r2, [r7, #4]
 800275a:	6852      	ldr	r2, [r2, #4]
 800275c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	687a      	ldr	r2, [r7, #4]
 8002764:	429a      	cmp	r2, r3
 8002766:	d103      	bne.n	8002770 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	689a      	ldr	r2, [r3, #8]
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2200      	movs	r2, #0
 8002774:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	1e5a      	subs	r2, r3, #1
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	681b      	ldr	r3, [r3, #0]
}
 8002784:	4618      	mov	r0, r3
 8002786:	3714      	adds	r7, #20
 8002788:	46bd      	mov	sp, r7
 800278a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278e:	4770      	bx	lr

08002790 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b084      	sub	sp, #16
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
 8002798:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d10b      	bne.n	80027bc <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80027a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80027a8:	f383 8811 	msr	BASEPRI, r3
 80027ac:	f3bf 8f6f 	isb	sy
 80027b0:	f3bf 8f4f 	dsb	sy
 80027b4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80027b6:	bf00      	nop
 80027b8:	bf00      	nop
 80027ba:	e7fd      	b.n	80027b8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80027bc:	f002 fcdc 	bl	8005178 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681a      	ldr	r2, [r3, #0]
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027c8:	68f9      	ldr	r1, [r7, #12]
 80027ca:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80027cc:	fb01 f303 	mul.w	r3, r1, r3
 80027d0:	441a      	add	r2, r3
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	2200      	movs	r2, #0
 80027da:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681a      	ldr	r2, [r3, #0]
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681a      	ldr	r2, [r3, #0]
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027ec:	3b01      	subs	r3, #1
 80027ee:	68f9      	ldr	r1, [r7, #12]
 80027f0:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80027f2:	fb01 f303 	mul.w	r3, r1, r3
 80027f6:	441a      	add	r2, r3
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	22ff      	movs	r2, #255	@ 0xff
 8002800:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	22ff      	movs	r2, #255	@ 0xff
 8002808:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d114      	bne.n	800283c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	691b      	ldr	r3, [r3, #16]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d01a      	beq.n	8002850 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	3310      	adds	r3, #16
 800281e:	4618      	mov	r0, r3
 8002820:	f001 fc74 	bl	800410c <xTaskRemoveFromEventList>
 8002824:	4603      	mov	r3, r0
 8002826:	2b00      	cmp	r3, #0
 8002828:	d012      	beq.n	8002850 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800282a:	4b0d      	ldr	r3, [pc, #52]	@ (8002860 <xQueueGenericReset+0xd0>)
 800282c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002830:	601a      	str	r2, [r3, #0]
 8002832:	f3bf 8f4f 	dsb	sy
 8002836:	f3bf 8f6f 	isb	sy
 800283a:	e009      	b.n	8002850 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	3310      	adds	r3, #16
 8002840:	4618      	mov	r0, r3
 8002842:	f7ff fef1 	bl	8002628 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	3324      	adds	r3, #36	@ 0x24
 800284a:	4618      	mov	r0, r3
 800284c:	f7ff feec 	bl	8002628 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002850:	f002 fcc4 	bl	80051dc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002854:	2301      	movs	r3, #1
}
 8002856:	4618      	mov	r0, r3
 8002858:	3710      	adds	r7, #16
 800285a:	46bd      	mov	sp, r7
 800285c:	bd80      	pop	{r7, pc}
 800285e:	bf00      	nop
 8002860:	e000ed04 	.word	0xe000ed04

08002864 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002864:	b580      	push	{r7, lr}
 8002866:	b08e      	sub	sp, #56	@ 0x38
 8002868:	af02      	add	r7, sp, #8
 800286a:	60f8      	str	r0, [r7, #12]
 800286c:	60b9      	str	r1, [r7, #8]
 800286e:	607a      	str	r2, [r7, #4]
 8002870:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d10b      	bne.n	8002890 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8002878:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800287c:	f383 8811 	msr	BASEPRI, r3
 8002880:	f3bf 8f6f 	isb	sy
 8002884:	f3bf 8f4f 	dsb	sy
 8002888:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800288a:	bf00      	nop
 800288c:	bf00      	nop
 800288e:	e7fd      	b.n	800288c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d10b      	bne.n	80028ae <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8002896:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800289a:	f383 8811 	msr	BASEPRI, r3
 800289e:	f3bf 8f6f 	isb	sy
 80028a2:	f3bf 8f4f 	dsb	sy
 80028a6:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80028a8:	bf00      	nop
 80028aa:	bf00      	nop
 80028ac:	e7fd      	b.n	80028aa <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d002      	beq.n	80028ba <xQueueGenericCreateStatic+0x56>
 80028b4:	68bb      	ldr	r3, [r7, #8]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d001      	beq.n	80028be <xQueueGenericCreateStatic+0x5a>
 80028ba:	2301      	movs	r3, #1
 80028bc:	e000      	b.n	80028c0 <xQueueGenericCreateStatic+0x5c>
 80028be:	2300      	movs	r3, #0
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d10b      	bne.n	80028dc <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80028c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80028c8:	f383 8811 	msr	BASEPRI, r3
 80028cc:	f3bf 8f6f 	isb	sy
 80028d0:	f3bf 8f4f 	dsb	sy
 80028d4:	623b      	str	r3, [r7, #32]
}
 80028d6:	bf00      	nop
 80028d8:	bf00      	nop
 80028da:	e7fd      	b.n	80028d8 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d102      	bne.n	80028e8 <xQueueGenericCreateStatic+0x84>
 80028e2:	68bb      	ldr	r3, [r7, #8]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d101      	bne.n	80028ec <xQueueGenericCreateStatic+0x88>
 80028e8:	2301      	movs	r3, #1
 80028ea:	e000      	b.n	80028ee <xQueueGenericCreateStatic+0x8a>
 80028ec:	2300      	movs	r3, #0
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d10b      	bne.n	800290a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80028f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80028f6:	f383 8811 	msr	BASEPRI, r3
 80028fa:	f3bf 8f6f 	isb	sy
 80028fe:	f3bf 8f4f 	dsb	sy
 8002902:	61fb      	str	r3, [r7, #28]
}
 8002904:	bf00      	nop
 8002906:	bf00      	nop
 8002908:	e7fd      	b.n	8002906 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800290a:	2350      	movs	r3, #80	@ 0x50
 800290c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800290e:	697b      	ldr	r3, [r7, #20]
 8002910:	2b50      	cmp	r3, #80	@ 0x50
 8002912:	d00b      	beq.n	800292c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8002914:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002918:	f383 8811 	msr	BASEPRI, r3
 800291c:	f3bf 8f6f 	isb	sy
 8002920:	f3bf 8f4f 	dsb	sy
 8002924:	61bb      	str	r3, [r7, #24]
}
 8002926:	bf00      	nop
 8002928:	bf00      	nop
 800292a:	e7fd      	b.n	8002928 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800292c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8002932:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002934:	2b00      	cmp	r3, #0
 8002936:	d00d      	beq.n	8002954 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002938:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800293a:	2201      	movs	r2, #1
 800293c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002940:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8002944:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002946:	9300      	str	r3, [sp, #0]
 8002948:	4613      	mov	r3, r2
 800294a:	687a      	ldr	r2, [r7, #4]
 800294c:	68b9      	ldr	r1, [r7, #8]
 800294e:	68f8      	ldr	r0, [r7, #12]
 8002950:	f000 f840 	bl	80029d4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002954:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8002956:	4618      	mov	r0, r3
 8002958:	3730      	adds	r7, #48	@ 0x30
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}

0800295e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800295e:	b580      	push	{r7, lr}
 8002960:	b08a      	sub	sp, #40	@ 0x28
 8002962:	af02      	add	r7, sp, #8
 8002964:	60f8      	str	r0, [r7, #12]
 8002966:	60b9      	str	r1, [r7, #8]
 8002968:	4613      	mov	r3, r2
 800296a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	2b00      	cmp	r3, #0
 8002970:	d10b      	bne.n	800298a <xQueueGenericCreate+0x2c>
	__asm volatile
 8002972:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002976:	f383 8811 	msr	BASEPRI, r3
 800297a:	f3bf 8f6f 	isb	sy
 800297e:	f3bf 8f4f 	dsb	sy
 8002982:	613b      	str	r3, [r7, #16]
}
 8002984:	bf00      	nop
 8002986:	bf00      	nop
 8002988:	e7fd      	b.n	8002986 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	68ba      	ldr	r2, [r7, #8]
 800298e:	fb02 f303 	mul.w	r3, r2, r3
 8002992:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002994:	69fb      	ldr	r3, [r7, #28]
 8002996:	3350      	adds	r3, #80	@ 0x50
 8002998:	4618      	mov	r0, r3
 800299a:	f002 fd0f 	bl	80053bc <pvPortMalloc>
 800299e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80029a0:	69bb      	ldr	r3, [r7, #24]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d011      	beq.n	80029ca <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80029a6:	69bb      	ldr	r3, [r7, #24]
 80029a8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80029aa:	697b      	ldr	r3, [r7, #20]
 80029ac:	3350      	adds	r3, #80	@ 0x50
 80029ae:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80029b0:	69bb      	ldr	r3, [r7, #24]
 80029b2:	2200      	movs	r2, #0
 80029b4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80029b8:	79fa      	ldrb	r2, [r7, #7]
 80029ba:	69bb      	ldr	r3, [r7, #24]
 80029bc:	9300      	str	r3, [sp, #0]
 80029be:	4613      	mov	r3, r2
 80029c0:	697a      	ldr	r2, [r7, #20]
 80029c2:	68b9      	ldr	r1, [r7, #8]
 80029c4:	68f8      	ldr	r0, [r7, #12]
 80029c6:	f000 f805 	bl	80029d4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80029ca:	69bb      	ldr	r3, [r7, #24]
	}
 80029cc:	4618      	mov	r0, r3
 80029ce:	3720      	adds	r7, #32
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bd80      	pop	{r7, pc}

080029d4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b084      	sub	sp, #16
 80029d8:	af00      	add	r7, sp, #0
 80029da:	60f8      	str	r0, [r7, #12]
 80029dc:	60b9      	str	r1, [r7, #8]
 80029de:	607a      	str	r2, [r7, #4]
 80029e0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80029e2:	68bb      	ldr	r3, [r7, #8]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d103      	bne.n	80029f0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80029e8:	69bb      	ldr	r3, [r7, #24]
 80029ea:	69ba      	ldr	r2, [r7, #24]
 80029ec:	601a      	str	r2, [r3, #0]
 80029ee:	e002      	b.n	80029f6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80029f0:	69bb      	ldr	r3, [r7, #24]
 80029f2:	687a      	ldr	r2, [r7, #4]
 80029f4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80029f6:	69bb      	ldr	r3, [r7, #24]
 80029f8:	68fa      	ldr	r2, [r7, #12]
 80029fa:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80029fc:	69bb      	ldr	r3, [r7, #24]
 80029fe:	68ba      	ldr	r2, [r7, #8]
 8002a00:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002a02:	2101      	movs	r1, #1
 8002a04:	69b8      	ldr	r0, [r7, #24]
 8002a06:	f7ff fec3 	bl	8002790 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002a0a:	69bb      	ldr	r3, [r7, #24]
 8002a0c:	78fa      	ldrb	r2, [r7, #3]
 8002a0e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002a12:	bf00      	nop
 8002a14:	3710      	adds	r7, #16
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bd80      	pop	{r7, pc}

08002a1a <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8002a1a:	b580      	push	{r7, lr}
 8002a1c:	b08a      	sub	sp, #40	@ 0x28
 8002a1e:	af02      	add	r7, sp, #8
 8002a20:	60f8      	str	r0, [r7, #12]
 8002a22:	60b9      	str	r1, [r7, #8]
 8002a24:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d10b      	bne.n	8002a44 <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 8002a2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a30:	f383 8811 	msr	BASEPRI, r3
 8002a34:	f3bf 8f6f 	isb	sy
 8002a38:	f3bf 8f4f 	dsb	sy
 8002a3c:	61bb      	str	r3, [r7, #24]
}
 8002a3e:	bf00      	nop
 8002a40:	bf00      	nop
 8002a42:	e7fd      	b.n	8002a40 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8002a44:	68ba      	ldr	r2, [r7, #8]
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	429a      	cmp	r2, r3
 8002a4a:	d90b      	bls.n	8002a64 <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 8002a4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a50:	f383 8811 	msr	BASEPRI, r3
 8002a54:	f3bf 8f6f 	isb	sy
 8002a58:	f3bf 8f4f 	dsb	sy
 8002a5c:	617b      	str	r3, [r7, #20]
}
 8002a5e:	bf00      	nop
 8002a60:	bf00      	nop
 8002a62:	e7fd      	b.n	8002a60 <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8002a64:	2302      	movs	r3, #2
 8002a66:	9300      	str	r3, [sp, #0]
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	2100      	movs	r1, #0
 8002a6e:	68f8      	ldr	r0, [r7, #12]
 8002a70:	f7ff fef8 	bl	8002864 <xQueueGenericCreateStatic>
 8002a74:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8002a76:	69fb      	ldr	r3, [r7, #28]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d002      	beq.n	8002a82 <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8002a7c:	69fb      	ldr	r3, [r7, #28]
 8002a7e:	68ba      	ldr	r2, [r7, #8]
 8002a80:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8002a82:	69fb      	ldr	r3, [r7, #28]
	}
 8002a84:	4618      	mov	r0, r3
 8002a86:	3720      	adds	r7, #32
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	bd80      	pop	{r7, pc}

08002a8c <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b086      	sub	sp, #24
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
 8002a94:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d10b      	bne.n	8002ab4 <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 8002a9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002aa0:	f383 8811 	msr	BASEPRI, r3
 8002aa4:	f3bf 8f6f 	isb	sy
 8002aa8:	f3bf 8f4f 	dsb	sy
 8002aac:	613b      	str	r3, [r7, #16]
}
 8002aae:	bf00      	nop
 8002ab0:	bf00      	nop
 8002ab2:	e7fd      	b.n	8002ab0 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8002ab4:	683a      	ldr	r2, [r7, #0]
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	429a      	cmp	r2, r3
 8002aba:	d90b      	bls.n	8002ad4 <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 8002abc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ac0:	f383 8811 	msr	BASEPRI, r3
 8002ac4:	f3bf 8f6f 	isb	sy
 8002ac8:	f3bf 8f4f 	dsb	sy
 8002acc:	60fb      	str	r3, [r7, #12]
}
 8002ace:	bf00      	nop
 8002ad0:	bf00      	nop
 8002ad2:	e7fd      	b.n	8002ad0 <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8002ad4:	2202      	movs	r2, #2
 8002ad6:	2100      	movs	r1, #0
 8002ad8:	6878      	ldr	r0, [r7, #4]
 8002ada:	f7ff ff40 	bl	800295e <xQueueGenericCreate>
 8002ade:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8002ae0:	697b      	ldr	r3, [r7, #20]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d002      	beq.n	8002aec <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8002ae6:	697b      	ldr	r3, [r7, #20]
 8002ae8:	683a      	ldr	r2, [r7, #0]
 8002aea:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8002aec:	697b      	ldr	r3, [r7, #20]
	}
 8002aee:	4618      	mov	r0, r3
 8002af0:	3718      	adds	r7, #24
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}
	...

08002af8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b08e      	sub	sp, #56	@ 0x38
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	60f8      	str	r0, [r7, #12]
 8002b00:	60b9      	str	r1, [r7, #8]
 8002b02:	607a      	str	r2, [r7, #4]
 8002b04:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002b06:	2300      	movs	r3, #0
 8002b08:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8002b0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d10b      	bne.n	8002b2c <xQueueGenericSend+0x34>
	__asm volatile
 8002b14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b18:	f383 8811 	msr	BASEPRI, r3
 8002b1c:	f3bf 8f6f 	isb	sy
 8002b20:	f3bf 8f4f 	dsb	sy
 8002b24:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002b26:	bf00      	nop
 8002b28:	bf00      	nop
 8002b2a:	e7fd      	b.n	8002b28 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002b2c:	68bb      	ldr	r3, [r7, #8]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d103      	bne.n	8002b3a <xQueueGenericSend+0x42>
 8002b32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d101      	bne.n	8002b3e <xQueueGenericSend+0x46>
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	e000      	b.n	8002b40 <xQueueGenericSend+0x48>
 8002b3e:	2300      	movs	r3, #0
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d10b      	bne.n	8002b5c <xQueueGenericSend+0x64>
	__asm volatile
 8002b44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b48:	f383 8811 	msr	BASEPRI, r3
 8002b4c:	f3bf 8f6f 	isb	sy
 8002b50:	f3bf 8f4f 	dsb	sy
 8002b54:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002b56:	bf00      	nop
 8002b58:	bf00      	nop
 8002b5a:	e7fd      	b.n	8002b58 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	2b02      	cmp	r3, #2
 8002b60:	d103      	bne.n	8002b6a <xQueueGenericSend+0x72>
 8002b62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b66:	2b01      	cmp	r3, #1
 8002b68:	d101      	bne.n	8002b6e <xQueueGenericSend+0x76>
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	e000      	b.n	8002b70 <xQueueGenericSend+0x78>
 8002b6e:	2300      	movs	r3, #0
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d10b      	bne.n	8002b8c <xQueueGenericSend+0x94>
	__asm volatile
 8002b74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b78:	f383 8811 	msr	BASEPRI, r3
 8002b7c:	f3bf 8f6f 	isb	sy
 8002b80:	f3bf 8f4f 	dsb	sy
 8002b84:	623b      	str	r3, [r7, #32]
}
 8002b86:	bf00      	nop
 8002b88:	bf00      	nop
 8002b8a:	e7fd      	b.n	8002b88 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002b8c:	f001 fc84 	bl	8004498 <xTaskGetSchedulerState>
 8002b90:	4603      	mov	r3, r0
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d102      	bne.n	8002b9c <xQueueGenericSend+0xa4>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d101      	bne.n	8002ba0 <xQueueGenericSend+0xa8>
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	e000      	b.n	8002ba2 <xQueueGenericSend+0xaa>
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d10b      	bne.n	8002bbe <xQueueGenericSend+0xc6>
	__asm volatile
 8002ba6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002baa:	f383 8811 	msr	BASEPRI, r3
 8002bae:	f3bf 8f6f 	isb	sy
 8002bb2:	f3bf 8f4f 	dsb	sy
 8002bb6:	61fb      	str	r3, [r7, #28]
}
 8002bb8:	bf00      	nop
 8002bba:	bf00      	nop
 8002bbc:	e7fd      	b.n	8002bba <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002bbe:	f002 fadb 	bl	8005178 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002bc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bc4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002bc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bc8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002bca:	429a      	cmp	r2, r3
 8002bcc:	d302      	bcc.n	8002bd4 <xQueueGenericSend+0xdc>
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	2b02      	cmp	r3, #2
 8002bd2:	d129      	bne.n	8002c28 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002bd4:	683a      	ldr	r2, [r7, #0]
 8002bd6:	68b9      	ldr	r1, [r7, #8]
 8002bd8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002bda:	f000 fc6d 	bl	80034b8 <prvCopyDataToQueue>
 8002bde:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002be0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002be2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d010      	beq.n	8002c0a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002be8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bea:	3324      	adds	r3, #36	@ 0x24
 8002bec:	4618      	mov	r0, r3
 8002bee:	f001 fa8d 	bl	800410c <xTaskRemoveFromEventList>
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d013      	beq.n	8002c20 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002bf8:	4b3f      	ldr	r3, [pc, #252]	@ (8002cf8 <xQueueGenericSend+0x200>)
 8002bfa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002bfe:	601a      	str	r2, [r3, #0]
 8002c00:	f3bf 8f4f 	dsb	sy
 8002c04:	f3bf 8f6f 	isb	sy
 8002c08:	e00a      	b.n	8002c20 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002c0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d007      	beq.n	8002c20 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002c10:	4b39      	ldr	r3, [pc, #228]	@ (8002cf8 <xQueueGenericSend+0x200>)
 8002c12:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002c16:	601a      	str	r2, [r3, #0]
 8002c18:	f3bf 8f4f 	dsb	sy
 8002c1c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002c20:	f002 fadc 	bl	80051dc <vPortExitCritical>
				return pdPASS;
 8002c24:	2301      	movs	r3, #1
 8002c26:	e063      	b.n	8002cf0 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d103      	bne.n	8002c36 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002c2e:	f002 fad5 	bl	80051dc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002c32:	2300      	movs	r3, #0
 8002c34:	e05c      	b.n	8002cf0 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002c36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d106      	bne.n	8002c4a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002c3c:	f107 0314 	add.w	r3, r7, #20
 8002c40:	4618      	mov	r0, r3
 8002c42:	f001 fac7 	bl	80041d4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002c46:	2301      	movs	r3, #1
 8002c48:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002c4a:	f002 fac7 	bl	80051dc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002c4e:	f001 f82f 	bl	8003cb0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002c52:	f002 fa91 	bl	8005178 <vPortEnterCritical>
 8002c56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c58:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002c5c:	b25b      	sxtb	r3, r3
 8002c5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c62:	d103      	bne.n	8002c6c <xQueueGenericSend+0x174>
 8002c64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c66:	2200      	movs	r2, #0
 8002c68:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002c6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c6e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002c72:	b25b      	sxtb	r3, r3
 8002c74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c78:	d103      	bne.n	8002c82 <xQueueGenericSend+0x18a>
 8002c7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002c82:	f002 faab 	bl	80051dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002c86:	1d3a      	adds	r2, r7, #4
 8002c88:	f107 0314 	add.w	r3, r7, #20
 8002c8c:	4611      	mov	r1, r2
 8002c8e:	4618      	mov	r0, r3
 8002c90:	f001 fab6 	bl	8004200 <xTaskCheckForTimeOut>
 8002c94:	4603      	mov	r3, r0
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d124      	bne.n	8002ce4 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002c9a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002c9c:	f000 fd04 	bl	80036a8 <prvIsQueueFull>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d018      	beq.n	8002cd8 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002ca6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ca8:	3310      	adds	r3, #16
 8002caa:	687a      	ldr	r2, [r7, #4]
 8002cac:	4611      	mov	r1, r2
 8002cae:	4618      	mov	r0, r3
 8002cb0:	f001 f9da 	bl	8004068 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002cb4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002cb6:	f000 fc8f 	bl	80035d8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002cba:	f001 f807 	bl	8003ccc <xTaskResumeAll>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	f47f af7c 	bne.w	8002bbe <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8002cc6:	4b0c      	ldr	r3, [pc, #48]	@ (8002cf8 <xQueueGenericSend+0x200>)
 8002cc8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002ccc:	601a      	str	r2, [r3, #0]
 8002cce:	f3bf 8f4f 	dsb	sy
 8002cd2:	f3bf 8f6f 	isb	sy
 8002cd6:	e772      	b.n	8002bbe <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002cd8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002cda:	f000 fc7d 	bl	80035d8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002cde:	f000 fff5 	bl	8003ccc <xTaskResumeAll>
 8002ce2:	e76c      	b.n	8002bbe <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002ce4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002ce6:	f000 fc77 	bl	80035d8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002cea:	f000 ffef 	bl	8003ccc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002cee:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	3738      	adds	r7, #56	@ 0x38
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bd80      	pop	{r7, pc}
 8002cf8:	e000ed04 	.word	0xe000ed04

08002cfc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b090      	sub	sp, #64	@ 0x40
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	60f8      	str	r0, [r7, #12]
 8002d04:	60b9      	str	r1, [r7, #8]
 8002d06:	607a      	str	r2, [r7, #4]
 8002d08:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8002d0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d10b      	bne.n	8002d2c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8002d14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d18:	f383 8811 	msr	BASEPRI, r3
 8002d1c:	f3bf 8f6f 	isb	sy
 8002d20:	f3bf 8f4f 	dsb	sy
 8002d24:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002d26:	bf00      	nop
 8002d28:	bf00      	nop
 8002d2a:	e7fd      	b.n	8002d28 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d103      	bne.n	8002d3a <xQueueGenericSendFromISR+0x3e>
 8002d32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d101      	bne.n	8002d3e <xQueueGenericSendFromISR+0x42>
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	e000      	b.n	8002d40 <xQueueGenericSendFromISR+0x44>
 8002d3e:	2300      	movs	r3, #0
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d10b      	bne.n	8002d5c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8002d44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d48:	f383 8811 	msr	BASEPRI, r3
 8002d4c:	f3bf 8f6f 	isb	sy
 8002d50:	f3bf 8f4f 	dsb	sy
 8002d54:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002d56:	bf00      	nop
 8002d58:	bf00      	nop
 8002d5a:	e7fd      	b.n	8002d58 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	2b02      	cmp	r3, #2
 8002d60:	d103      	bne.n	8002d6a <xQueueGenericSendFromISR+0x6e>
 8002d62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d66:	2b01      	cmp	r3, #1
 8002d68:	d101      	bne.n	8002d6e <xQueueGenericSendFromISR+0x72>
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	e000      	b.n	8002d70 <xQueueGenericSendFromISR+0x74>
 8002d6e:	2300      	movs	r3, #0
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d10b      	bne.n	8002d8c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8002d74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d78:	f383 8811 	msr	BASEPRI, r3
 8002d7c:	f3bf 8f6f 	isb	sy
 8002d80:	f3bf 8f4f 	dsb	sy
 8002d84:	623b      	str	r3, [r7, #32]
}
 8002d86:	bf00      	nop
 8002d88:	bf00      	nop
 8002d8a:	e7fd      	b.n	8002d88 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002d8c:	f002 fad4 	bl	8005338 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002d90:	f3ef 8211 	mrs	r2, BASEPRI
 8002d94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d98:	f383 8811 	msr	BASEPRI, r3
 8002d9c:	f3bf 8f6f 	isb	sy
 8002da0:	f3bf 8f4f 	dsb	sy
 8002da4:	61fa      	str	r2, [r7, #28]
 8002da6:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002da8:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002daa:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002dac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002dae:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002db0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002db2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002db4:	429a      	cmp	r2, r3
 8002db6:	d302      	bcc.n	8002dbe <xQueueGenericSendFromISR+0xc2>
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	2b02      	cmp	r3, #2
 8002dbc:	d12f      	bne.n	8002e1e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002dbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002dc0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002dc4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002dc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002dca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002dcc:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002dce:	683a      	ldr	r2, [r7, #0]
 8002dd0:	68b9      	ldr	r1, [r7, #8]
 8002dd2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8002dd4:	f000 fb70 	bl	80034b8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002dd8:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8002ddc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002de0:	d112      	bne.n	8002e08 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002de2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002de4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d016      	beq.n	8002e18 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002dea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002dec:	3324      	adds	r3, #36	@ 0x24
 8002dee:	4618      	mov	r0, r3
 8002df0:	f001 f98c 	bl	800410c <xTaskRemoveFromEventList>
 8002df4:	4603      	mov	r3, r0
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d00e      	beq.n	8002e18 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d00b      	beq.n	8002e18 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2201      	movs	r2, #1
 8002e04:	601a      	str	r2, [r3, #0]
 8002e06:	e007      	b.n	8002e18 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002e08:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002e0c:	3301      	adds	r3, #1
 8002e0e:	b2db      	uxtb	r3, r3
 8002e10:	b25a      	sxtb	r2, r3
 8002e12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e14:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8002e18:	2301      	movs	r3, #1
 8002e1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8002e1c:	e001      	b.n	8002e22 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002e1e:	2300      	movs	r3, #0
 8002e20:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002e22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e24:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002e26:	697b      	ldr	r3, [r7, #20]
 8002e28:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002e2c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002e2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8002e30:	4618      	mov	r0, r3
 8002e32:	3740      	adds	r7, #64	@ 0x40
 8002e34:	46bd      	mov	sp, r7
 8002e36:	bd80      	pop	{r7, pc}

08002e38 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b08e      	sub	sp, #56	@ 0x38
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
 8002e40:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8002e46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d10b      	bne.n	8002e64 <xQueueGiveFromISR+0x2c>
	__asm volatile
 8002e4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e50:	f383 8811 	msr	BASEPRI, r3
 8002e54:	f3bf 8f6f 	isb	sy
 8002e58:	f3bf 8f4f 	dsb	sy
 8002e5c:	623b      	str	r3, [r7, #32]
}
 8002e5e:	bf00      	nop
 8002e60:	bf00      	nop
 8002e62:	e7fd      	b.n	8002e60 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8002e64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d00b      	beq.n	8002e84 <xQueueGiveFromISR+0x4c>
	__asm volatile
 8002e6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e70:	f383 8811 	msr	BASEPRI, r3
 8002e74:	f3bf 8f6f 	isb	sy
 8002e78:	f3bf 8f4f 	dsb	sy
 8002e7c:	61fb      	str	r3, [r7, #28]
}
 8002e7e:	bf00      	nop
 8002e80:	bf00      	nop
 8002e82:	e7fd      	b.n	8002e80 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8002e84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d103      	bne.n	8002e94 <xQueueGiveFromISR+0x5c>
 8002e8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e8e:	689b      	ldr	r3, [r3, #8]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d101      	bne.n	8002e98 <xQueueGiveFromISR+0x60>
 8002e94:	2301      	movs	r3, #1
 8002e96:	e000      	b.n	8002e9a <xQueueGiveFromISR+0x62>
 8002e98:	2300      	movs	r3, #0
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d10b      	bne.n	8002eb6 <xQueueGiveFromISR+0x7e>
	__asm volatile
 8002e9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ea2:	f383 8811 	msr	BASEPRI, r3
 8002ea6:	f3bf 8f6f 	isb	sy
 8002eaa:	f3bf 8f4f 	dsb	sy
 8002eae:	61bb      	str	r3, [r7, #24]
}
 8002eb0:	bf00      	nop
 8002eb2:	bf00      	nop
 8002eb4:	e7fd      	b.n	8002eb2 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002eb6:	f002 fa3f 	bl	8005338 <vPortValidateInterruptPriority>
	__asm volatile
 8002eba:	f3ef 8211 	mrs	r2, BASEPRI
 8002ebe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ec2:	f383 8811 	msr	BASEPRI, r3
 8002ec6:	f3bf 8f6f 	isb	sy
 8002eca:	f3bf 8f4f 	dsb	sy
 8002ece:	617a      	str	r2, [r7, #20]
 8002ed0:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8002ed2:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002ed4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002ed6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ed8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002eda:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8002edc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ede:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ee0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002ee2:	429a      	cmp	r2, r3
 8002ee4:	d22b      	bcs.n	8002f3e <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002ee6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ee8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002eec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002ef0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ef2:	1c5a      	adds	r2, r3, #1
 8002ef4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ef6:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002ef8:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8002efc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f00:	d112      	bne.n	8002f28 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002f02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d016      	beq.n	8002f38 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002f0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f0c:	3324      	adds	r3, #36	@ 0x24
 8002f0e:	4618      	mov	r0, r3
 8002f10:	f001 f8fc 	bl	800410c <xTaskRemoveFromEventList>
 8002f14:	4603      	mov	r3, r0
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d00e      	beq.n	8002f38 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d00b      	beq.n	8002f38 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	2201      	movs	r2, #1
 8002f24:	601a      	str	r2, [r3, #0]
 8002f26:	e007      	b.n	8002f38 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002f28:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002f2c:	3301      	adds	r3, #1
 8002f2e:	b2db      	uxtb	r3, r3
 8002f30:	b25a      	sxtb	r2, r3
 8002f32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f34:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8002f38:	2301      	movs	r3, #1
 8002f3a:	637b      	str	r3, [r7, #52]	@ 0x34
 8002f3c:	e001      	b.n	8002f42 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002f3e:	2300      	movs	r3, #0
 8002f40:	637b      	str	r3, [r7, #52]	@ 0x34
 8002f42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f44:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	f383 8811 	msr	BASEPRI, r3
}
 8002f4c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002f4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8002f50:	4618      	mov	r0, r3
 8002f52:	3738      	adds	r7, #56	@ 0x38
 8002f54:	46bd      	mov	sp, r7
 8002f56:	bd80      	pop	{r7, pc}

08002f58 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b08c      	sub	sp, #48	@ 0x30
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	60f8      	str	r0, [r7, #12]
 8002f60:	60b9      	str	r1, [r7, #8]
 8002f62:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002f64:	2300      	movs	r3, #0
 8002f66:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002f6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d10b      	bne.n	8002f8a <xQueueReceive+0x32>
	__asm volatile
 8002f72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f76:	f383 8811 	msr	BASEPRI, r3
 8002f7a:	f3bf 8f6f 	isb	sy
 8002f7e:	f3bf 8f4f 	dsb	sy
 8002f82:	623b      	str	r3, [r7, #32]
}
 8002f84:	bf00      	nop
 8002f86:	bf00      	nop
 8002f88:	e7fd      	b.n	8002f86 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002f8a:	68bb      	ldr	r3, [r7, #8]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d103      	bne.n	8002f98 <xQueueReceive+0x40>
 8002f90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d101      	bne.n	8002f9c <xQueueReceive+0x44>
 8002f98:	2301      	movs	r3, #1
 8002f9a:	e000      	b.n	8002f9e <xQueueReceive+0x46>
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d10b      	bne.n	8002fba <xQueueReceive+0x62>
	__asm volatile
 8002fa2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002fa6:	f383 8811 	msr	BASEPRI, r3
 8002faa:	f3bf 8f6f 	isb	sy
 8002fae:	f3bf 8f4f 	dsb	sy
 8002fb2:	61fb      	str	r3, [r7, #28]
}
 8002fb4:	bf00      	nop
 8002fb6:	bf00      	nop
 8002fb8:	e7fd      	b.n	8002fb6 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002fba:	f001 fa6d 	bl	8004498 <xTaskGetSchedulerState>
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d102      	bne.n	8002fca <xQueueReceive+0x72>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d101      	bne.n	8002fce <xQueueReceive+0x76>
 8002fca:	2301      	movs	r3, #1
 8002fcc:	e000      	b.n	8002fd0 <xQueueReceive+0x78>
 8002fce:	2300      	movs	r3, #0
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d10b      	bne.n	8002fec <xQueueReceive+0x94>
	__asm volatile
 8002fd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002fd8:	f383 8811 	msr	BASEPRI, r3
 8002fdc:	f3bf 8f6f 	isb	sy
 8002fe0:	f3bf 8f4f 	dsb	sy
 8002fe4:	61bb      	str	r3, [r7, #24]
}
 8002fe6:	bf00      	nop
 8002fe8:	bf00      	nop
 8002fea:	e7fd      	b.n	8002fe8 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002fec:	f002 f8c4 	bl	8005178 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002ff0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ff2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ff4:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002ff6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d01f      	beq.n	800303c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002ffc:	68b9      	ldr	r1, [r7, #8]
 8002ffe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003000:	f000 fac4 	bl	800358c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003004:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003006:	1e5a      	subs	r2, r3, #1
 8003008:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800300a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800300c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800300e:	691b      	ldr	r3, [r3, #16]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d00f      	beq.n	8003034 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003014:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003016:	3310      	adds	r3, #16
 8003018:	4618      	mov	r0, r3
 800301a:	f001 f877 	bl	800410c <xTaskRemoveFromEventList>
 800301e:	4603      	mov	r3, r0
 8003020:	2b00      	cmp	r3, #0
 8003022:	d007      	beq.n	8003034 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003024:	4b3c      	ldr	r3, [pc, #240]	@ (8003118 <xQueueReceive+0x1c0>)
 8003026:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800302a:	601a      	str	r2, [r3, #0]
 800302c:	f3bf 8f4f 	dsb	sy
 8003030:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003034:	f002 f8d2 	bl	80051dc <vPortExitCritical>
				return pdPASS;
 8003038:	2301      	movs	r3, #1
 800303a:	e069      	b.n	8003110 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d103      	bne.n	800304a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003042:	f002 f8cb 	bl	80051dc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003046:	2300      	movs	r3, #0
 8003048:	e062      	b.n	8003110 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800304a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800304c:	2b00      	cmp	r3, #0
 800304e:	d106      	bne.n	800305e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003050:	f107 0310 	add.w	r3, r7, #16
 8003054:	4618      	mov	r0, r3
 8003056:	f001 f8bd 	bl	80041d4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800305a:	2301      	movs	r3, #1
 800305c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800305e:	f002 f8bd 	bl	80051dc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003062:	f000 fe25 	bl	8003cb0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003066:	f002 f887 	bl	8005178 <vPortEnterCritical>
 800306a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800306c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003070:	b25b      	sxtb	r3, r3
 8003072:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003076:	d103      	bne.n	8003080 <xQueueReceive+0x128>
 8003078:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800307a:	2200      	movs	r2, #0
 800307c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003080:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003082:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003086:	b25b      	sxtb	r3, r3
 8003088:	f1b3 3fff 	cmp.w	r3, #4294967295
 800308c:	d103      	bne.n	8003096 <xQueueReceive+0x13e>
 800308e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003090:	2200      	movs	r2, #0
 8003092:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003096:	f002 f8a1 	bl	80051dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800309a:	1d3a      	adds	r2, r7, #4
 800309c:	f107 0310 	add.w	r3, r7, #16
 80030a0:	4611      	mov	r1, r2
 80030a2:	4618      	mov	r0, r3
 80030a4:	f001 f8ac 	bl	8004200 <xTaskCheckForTimeOut>
 80030a8:	4603      	mov	r3, r0
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d123      	bne.n	80030f6 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80030ae:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80030b0:	f000 fae4 	bl	800367c <prvIsQueueEmpty>
 80030b4:	4603      	mov	r3, r0
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d017      	beq.n	80030ea <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80030ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030bc:	3324      	adds	r3, #36	@ 0x24
 80030be:	687a      	ldr	r2, [r7, #4]
 80030c0:	4611      	mov	r1, r2
 80030c2:	4618      	mov	r0, r3
 80030c4:	f000 ffd0 	bl	8004068 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80030c8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80030ca:	f000 fa85 	bl	80035d8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80030ce:	f000 fdfd 	bl	8003ccc <xTaskResumeAll>
 80030d2:	4603      	mov	r3, r0
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d189      	bne.n	8002fec <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80030d8:	4b0f      	ldr	r3, [pc, #60]	@ (8003118 <xQueueReceive+0x1c0>)
 80030da:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80030de:	601a      	str	r2, [r3, #0]
 80030e0:	f3bf 8f4f 	dsb	sy
 80030e4:	f3bf 8f6f 	isb	sy
 80030e8:	e780      	b.n	8002fec <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80030ea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80030ec:	f000 fa74 	bl	80035d8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80030f0:	f000 fdec 	bl	8003ccc <xTaskResumeAll>
 80030f4:	e77a      	b.n	8002fec <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80030f6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80030f8:	f000 fa6e 	bl	80035d8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80030fc:	f000 fde6 	bl	8003ccc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003100:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003102:	f000 fabb 	bl	800367c <prvIsQueueEmpty>
 8003106:	4603      	mov	r3, r0
 8003108:	2b00      	cmp	r3, #0
 800310a:	f43f af6f 	beq.w	8002fec <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800310e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003110:	4618      	mov	r0, r3
 8003112:	3730      	adds	r7, #48	@ 0x30
 8003114:	46bd      	mov	sp, r7
 8003116:	bd80      	pop	{r7, pc}
 8003118:	e000ed04 	.word	0xe000ed04

0800311c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b08e      	sub	sp, #56	@ 0x38
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
 8003124:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8003126:	2300      	movs	r3, #0
 8003128:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800312e:	2300      	movs	r3, #0
 8003130:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003132:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003134:	2b00      	cmp	r3, #0
 8003136:	d10b      	bne.n	8003150 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8003138:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800313c:	f383 8811 	msr	BASEPRI, r3
 8003140:	f3bf 8f6f 	isb	sy
 8003144:	f3bf 8f4f 	dsb	sy
 8003148:	623b      	str	r3, [r7, #32]
}
 800314a:	bf00      	nop
 800314c:	bf00      	nop
 800314e:	e7fd      	b.n	800314c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003150:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003152:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003154:	2b00      	cmp	r3, #0
 8003156:	d00b      	beq.n	8003170 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8003158:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800315c:	f383 8811 	msr	BASEPRI, r3
 8003160:	f3bf 8f6f 	isb	sy
 8003164:	f3bf 8f4f 	dsb	sy
 8003168:	61fb      	str	r3, [r7, #28]
}
 800316a:	bf00      	nop
 800316c:	bf00      	nop
 800316e:	e7fd      	b.n	800316c <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003170:	f001 f992 	bl	8004498 <xTaskGetSchedulerState>
 8003174:	4603      	mov	r3, r0
 8003176:	2b00      	cmp	r3, #0
 8003178:	d102      	bne.n	8003180 <xQueueSemaphoreTake+0x64>
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d101      	bne.n	8003184 <xQueueSemaphoreTake+0x68>
 8003180:	2301      	movs	r3, #1
 8003182:	e000      	b.n	8003186 <xQueueSemaphoreTake+0x6a>
 8003184:	2300      	movs	r3, #0
 8003186:	2b00      	cmp	r3, #0
 8003188:	d10b      	bne.n	80031a2 <xQueueSemaphoreTake+0x86>
	__asm volatile
 800318a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800318e:	f383 8811 	msr	BASEPRI, r3
 8003192:	f3bf 8f6f 	isb	sy
 8003196:	f3bf 8f4f 	dsb	sy
 800319a:	61bb      	str	r3, [r7, #24]
}
 800319c:	bf00      	nop
 800319e:	bf00      	nop
 80031a0:	e7fd      	b.n	800319e <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80031a2:	f001 ffe9 	bl	8005178 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80031a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80031a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031aa:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80031ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d024      	beq.n	80031fc <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80031b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031b4:	1e5a      	subs	r2, r3, #1
 80031b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80031b8:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80031ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d104      	bne.n	80031cc <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80031c2:	f001 fae3 	bl	800478c <pvTaskIncrementMutexHeldCount>
 80031c6:	4602      	mov	r2, r0
 80031c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80031ca:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80031cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80031ce:	691b      	ldr	r3, [r3, #16]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d00f      	beq.n	80031f4 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80031d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80031d6:	3310      	adds	r3, #16
 80031d8:	4618      	mov	r0, r3
 80031da:	f000 ff97 	bl	800410c <xTaskRemoveFromEventList>
 80031de:	4603      	mov	r3, r0
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d007      	beq.n	80031f4 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80031e4:	4b54      	ldr	r3, [pc, #336]	@ (8003338 <xQueueSemaphoreTake+0x21c>)
 80031e6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80031ea:	601a      	str	r2, [r3, #0]
 80031ec:	f3bf 8f4f 	dsb	sy
 80031f0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80031f4:	f001 fff2 	bl	80051dc <vPortExitCritical>
				return pdPASS;
 80031f8:	2301      	movs	r3, #1
 80031fa:	e098      	b.n	800332e <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d112      	bne.n	8003228 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8003202:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003204:	2b00      	cmp	r3, #0
 8003206:	d00b      	beq.n	8003220 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8003208:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800320c:	f383 8811 	msr	BASEPRI, r3
 8003210:	f3bf 8f6f 	isb	sy
 8003214:	f3bf 8f4f 	dsb	sy
 8003218:	617b      	str	r3, [r7, #20]
}
 800321a:	bf00      	nop
 800321c:	bf00      	nop
 800321e:	e7fd      	b.n	800321c <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8003220:	f001 ffdc 	bl	80051dc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003224:	2300      	movs	r3, #0
 8003226:	e082      	b.n	800332e <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003228:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800322a:	2b00      	cmp	r3, #0
 800322c:	d106      	bne.n	800323c <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800322e:	f107 030c 	add.w	r3, r7, #12
 8003232:	4618      	mov	r0, r3
 8003234:	f000 ffce 	bl	80041d4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003238:	2301      	movs	r3, #1
 800323a:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800323c:	f001 ffce 	bl	80051dc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003240:	f000 fd36 	bl	8003cb0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003244:	f001 ff98 	bl	8005178 <vPortEnterCritical>
 8003248:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800324a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800324e:	b25b      	sxtb	r3, r3
 8003250:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003254:	d103      	bne.n	800325e <xQueueSemaphoreTake+0x142>
 8003256:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003258:	2200      	movs	r2, #0
 800325a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800325e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003260:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003264:	b25b      	sxtb	r3, r3
 8003266:	f1b3 3fff 	cmp.w	r3, #4294967295
 800326a:	d103      	bne.n	8003274 <xQueueSemaphoreTake+0x158>
 800326c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800326e:	2200      	movs	r2, #0
 8003270:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003274:	f001 ffb2 	bl	80051dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003278:	463a      	mov	r2, r7
 800327a:	f107 030c 	add.w	r3, r7, #12
 800327e:	4611      	mov	r1, r2
 8003280:	4618      	mov	r0, r3
 8003282:	f000 ffbd 	bl	8004200 <xTaskCheckForTimeOut>
 8003286:	4603      	mov	r3, r0
 8003288:	2b00      	cmp	r3, #0
 800328a:	d132      	bne.n	80032f2 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800328c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800328e:	f000 f9f5 	bl	800367c <prvIsQueueEmpty>
 8003292:	4603      	mov	r3, r0
 8003294:	2b00      	cmp	r3, #0
 8003296:	d026      	beq.n	80032e6 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003298:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d109      	bne.n	80032b4 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 80032a0:	f001 ff6a 	bl	8005178 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80032a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032a6:	689b      	ldr	r3, [r3, #8]
 80032a8:	4618      	mov	r0, r3
 80032aa:	f001 f913 	bl	80044d4 <xTaskPriorityInherit>
 80032ae:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 80032b0:	f001 ff94 	bl	80051dc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80032b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032b6:	3324      	adds	r3, #36	@ 0x24
 80032b8:	683a      	ldr	r2, [r7, #0]
 80032ba:	4611      	mov	r1, r2
 80032bc:	4618      	mov	r0, r3
 80032be:	f000 fed3 	bl	8004068 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80032c2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80032c4:	f000 f988 	bl	80035d8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80032c8:	f000 fd00 	bl	8003ccc <xTaskResumeAll>
 80032cc:	4603      	mov	r3, r0
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	f47f af67 	bne.w	80031a2 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 80032d4:	4b18      	ldr	r3, [pc, #96]	@ (8003338 <xQueueSemaphoreTake+0x21c>)
 80032d6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80032da:	601a      	str	r2, [r3, #0]
 80032dc:	f3bf 8f4f 	dsb	sy
 80032e0:	f3bf 8f6f 	isb	sy
 80032e4:	e75d      	b.n	80031a2 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80032e6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80032e8:	f000 f976 	bl	80035d8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80032ec:	f000 fcee 	bl	8003ccc <xTaskResumeAll>
 80032f0:	e757      	b.n	80031a2 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80032f2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80032f4:	f000 f970 	bl	80035d8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80032f8:	f000 fce8 	bl	8003ccc <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80032fc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80032fe:	f000 f9bd 	bl	800367c <prvIsQueueEmpty>
 8003302:	4603      	mov	r3, r0
 8003304:	2b00      	cmp	r3, #0
 8003306:	f43f af4c 	beq.w	80031a2 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800330a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800330c:	2b00      	cmp	r3, #0
 800330e:	d00d      	beq.n	800332c <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8003310:	f001 ff32 	bl	8005178 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8003314:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003316:	f000 f8b7 	bl	8003488 <prvGetDisinheritPriorityAfterTimeout>
 800331a:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800331c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800331e:	689b      	ldr	r3, [r3, #8]
 8003320:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003322:	4618      	mov	r0, r3
 8003324:	f001 f9ae 	bl	8004684 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8003328:	f001 ff58 	bl	80051dc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800332c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800332e:	4618      	mov	r0, r3
 8003330:	3738      	adds	r7, #56	@ 0x38
 8003332:	46bd      	mov	sp, r7
 8003334:	bd80      	pop	{r7, pc}
 8003336:	bf00      	nop
 8003338:	e000ed04 	.word	0xe000ed04

0800333c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b08e      	sub	sp, #56	@ 0x38
 8003340:	af00      	add	r7, sp, #0
 8003342:	60f8      	str	r0, [r7, #12]
 8003344:	60b9      	str	r1, [r7, #8]
 8003346:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800334c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800334e:	2b00      	cmp	r3, #0
 8003350:	d10b      	bne.n	800336a <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8003352:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003356:	f383 8811 	msr	BASEPRI, r3
 800335a:	f3bf 8f6f 	isb	sy
 800335e:	f3bf 8f4f 	dsb	sy
 8003362:	623b      	str	r3, [r7, #32]
}
 8003364:	bf00      	nop
 8003366:	bf00      	nop
 8003368:	e7fd      	b.n	8003366 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800336a:	68bb      	ldr	r3, [r7, #8]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d103      	bne.n	8003378 <xQueueReceiveFromISR+0x3c>
 8003370:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003372:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003374:	2b00      	cmp	r3, #0
 8003376:	d101      	bne.n	800337c <xQueueReceiveFromISR+0x40>
 8003378:	2301      	movs	r3, #1
 800337a:	e000      	b.n	800337e <xQueueReceiveFromISR+0x42>
 800337c:	2300      	movs	r3, #0
 800337e:	2b00      	cmp	r3, #0
 8003380:	d10b      	bne.n	800339a <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8003382:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003386:	f383 8811 	msr	BASEPRI, r3
 800338a:	f3bf 8f6f 	isb	sy
 800338e:	f3bf 8f4f 	dsb	sy
 8003392:	61fb      	str	r3, [r7, #28]
}
 8003394:	bf00      	nop
 8003396:	bf00      	nop
 8003398:	e7fd      	b.n	8003396 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800339a:	f001 ffcd 	bl	8005338 <vPortValidateInterruptPriority>
	__asm volatile
 800339e:	f3ef 8211 	mrs	r2, BASEPRI
 80033a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033a6:	f383 8811 	msr	BASEPRI, r3
 80033aa:	f3bf 8f6f 	isb	sy
 80033ae:	f3bf 8f4f 	dsb	sy
 80033b2:	61ba      	str	r2, [r7, #24]
 80033b4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80033b6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80033b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80033ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033be:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80033c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d02f      	beq.n	8003426 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80033c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033c8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80033cc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80033d0:	68b9      	ldr	r1, [r7, #8]
 80033d2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80033d4:	f000 f8da 	bl	800358c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80033d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033da:	1e5a      	subs	r2, r3, #1
 80033dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033de:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80033e0:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80033e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033e8:	d112      	bne.n	8003410 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80033ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033ec:	691b      	ldr	r3, [r3, #16]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d016      	beq.n	8003420 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80033f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033f4:	3310      	adds	r3, #16
 80033f6:	4618      	mov	r0, r3
 80033f8:	f000 fe88 	bl	800410c <xTaskRemoveFromEventList>
 80033fc:	4603      	mov	r3, r0
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d00e      	beq.n	8003420 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d00b      	beq.n	8003420 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2201      	movs	r2, #1
 800340c:	601a      	str	r2, [r3, #0]
 800340e:	e007      	b.n	8003420 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8003410:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003414:	3301      	adds	r3, #1
 8003416:	b2db      	uxtb	r3, r3
 8003418:	b25a      	sxtb	r2, r3
 800341a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800341c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8003420:	2301      	movs	r3, #1
 8003422:	637b      	str	r3, [r7, #52]	@ 0x34
 8003424:	e001      	b.n	800342a <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8003426:	2300      	movs	r3, #0
 8003428:	637b      	str	r3, [r7, #52]	@ 0x34
 800342a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800342c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800342e:	693b      	ldr	r3, [r7, #16]
 8003430:	f383 8811 	msr	BASEPRI, r3
}
 8003434:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003436:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8003438:	4618      	mov	r0, r3
 800343a:	3738      	adds	r7, #56	@ 0x38
 800343c:	46bd      	mov	sp, r7
 800343e:	bd80      	pop	{r7, pc}

08003440 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b084      	sub	sp, #16
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d10b      	bne.n	800346a <vQueueDelete+0x2a>
	__asm volatile
 8003452:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003456:	f383 8811 	msr	BASEPRI, r3
 800345a:	f3bf 8f6f 	isb	sy
 800345e:	f3bf 8f4f 	dsb	sy
 8003462:	60bb      	str	r3, [r7, #8]
}
 8003464:	bf00      	nop
 8003466:	bf00      	nop
 8003468:	e7fd      	b.n	8003466 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800346a:	68f8      	ldr	r0, [r7, #12]
 800346c:	f000 f95e 	bl	800372c <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8003476:	2b00      	cmp	r3, #0
 8003478:	d102      	bne.n	8003480 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 800347a:	68f8      	ldr	r0, [r7, #12]
 800347c:	f002 f86c 	bl	8005558 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8003480:	bf00      	nop
 8003482:	3710      	adds	r7, #16
 8003484:	46bd      	mov	sp, r7
 8003486:	bd80      	pop	{r7, pc}

08003488 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8003488:	b480      	push	{r7}
 800348a:	b085      	sub	sp, #20
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003494:	2b00      	cmp	r3, #0
 8003496:	d006      	beq.n	80034a6 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 80034a2:	60fb      	str	r3, [r7, #12]
 80034a4:	e001      	b.n	80034aa <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80034a6:	2300      	movs	r3, #0
 80034a8:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80034aa:	68fb      	ldr	r3, [r7, #12]
	}
 80034ac:	4618      	mov	r0, r3
 80034ae:	3714      	adds	r7, #20
 80034b0:	46bd      	mov	sp, r7
 80034b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b6:	4770      	bx	lr

080034b8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b086      	sub	sp, #24
 80034bc:	af00      	add	r7, sp, #0
 80034be:	60f8      	str	r0, [r7, #12]
 80034c0:	60b9      	str	r1, [r7, #8]
 80034c2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80034c4:	2300      	movs	r3, #0
 80034c6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034cc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d10d      	bne.n	80034f2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d14d      	bne.n	800357a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	689b      	ldr	r3, [r3, #8]
 80034e2:	4618      	mov	r0, r3
 80034e4:	f001 f85e 	bl	80045a4 <xTaskPriorityDisinherit>
 80034e8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	2200      	movs	r2, #0
 80034ee:	609a      	str	r2, [r3, #8]
 80034f0:	e043      	b.n	800357a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d119      	bne.n	800352c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	6858      	ldr	r0, [r3, #4]
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003500:	461a      	mov	r2, r3
 8003502:	68b9      	ldr	r1, [r7, #8]
 8003504:	f002 f9cc 	bl	80058a0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	685a      	ldr	r2, [r3, #4]
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003510:	441a      	add	r2, r3
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	685a      	ldr	r2, [r3, #4]
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	689b      	ldr	r3, [r3, #8]
 800351e:	429a      	cmp	r2, r3
 8003520:	d32b      	bcc.n	800357a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681a      	ldr	r2, [r3, #0]
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	605a      	str	r2, [r3, #4]
 800352a:	e026      	b.n	800357a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	68d8      	ldr	r0, [r3, #12]
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003534:	461a      	mov	r2, r3
 8003536:	68b9      	ldr	r1, [r7, #8]
 8003538:	f002 f9b2 	bl	80058a0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	68da      	ldr	r2, [r3, #12]
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003544:	425b      	negs	r3, r3
 8003546:	441a      	add	r2, r3
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	68da      	ldr	r2, [r3, #12]
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	429a      	cmp	r2, r3
 8003556:	d207      	bcs.n	8003568 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	689a      	ldr	r2, [r3, #8]
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003560:	425b      	negs	r3, r3
 8003562:	441a      	add	r2, r3
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2b02      	cmp	r3, #2
 800356c:	d105      	bne.n	800357a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800356e:	693b      	ldr	r3, [r7, #16]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d002      	beq.n	800357a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003574:	693b      	ldr	r3, [r7, #16]
 8003576:	3b01      	subs	r3, #1
 8003578:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800357a:	693b      	ldr	r3, [r7, #16]
 800357c:	1c5a      	adds	r2, r3, #1
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8003582:	697b      	ldr	r3, [r7, #20]
}
 8003584:	4618      	mov	r0, r3
 8003586:	3718      	adds	r7, #24
 8003588:	46bd      	mov	sp, r7
 800358a:	bd80      	pop	{r7, pc}

0800358c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b082      	sub	sp, #8
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
 8003594:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800359a:	2b00      	cmp	r3, #0
 800359c:	d018      	beq.n	80035d0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	68da      	ldr	r2, [r3, #12]
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035a6:	441a      	add	r2, r3
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	68da      	ldr	r2, [r3, #12]
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	689b      	ldr	r3, [r3, #8]
 80035b4:	429a      	cmp	r2, r3
 80035b6:	d303      	bcc.n	80035c0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681a      	ldr	r2, [r3, #0]
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	68d9      	ldr	r1, [r3, #12]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035c8:	461a      	mov	r2, r3
 80035ca:	6838      	ldr	r0, [r7, #0]
 80035cc:	f002 f968 	bl	80058a0 <memcpy>
	}
}
 80035d0:	bf00      	nop
 80035d2:	3708      	adds	r7, #8
 80035d4:	46bd      	mov	sp, r7
 80035d6:	bd80      	pop	{r7, pc}

080035d8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b084      	sub	sp, #16
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80035e0:	f001 fdca 	bl	8005178 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80035ea:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80035ec:	e011      	b.n	8003612 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d012      	beq.n	800361c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	3324      	adds	r3, #36	@ 0x24
 80035fa:	4618      	mov	r0, r3
 80035fc:	f000 fd86 	bl	800410c <xTaskRemoveFromEventList>
 8003600:	4603      	mov	r3, r0
 8003602:	2b00      	cmp	r3, #0
 8003604:	d001      	beq.n	800360a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003606:	f000 fe5f 	bl	80042c8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800360a:	7bfb      	ldrb	r3, [r7, #15]
 800360c:	3b01      	subs	r3, #1
 800360e:	b2db      	uxtb	r3, r3
 8003610:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003612:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003616:	2b00      	cmp	r3, #0
 8003618:	dce9      	bgt.n	80035ee <prvUnlockQueue+0x16>
 800361a:	e000      	b.n	800361e <prvUnlockQueue+0x46>
					break;
 800361c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	22ff      	movs	r2, #255	@ 0xff
 8003622:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8003626:	f001 fdd9 	bl	80051dc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800362a:	f001 fda5 	bl	8005178 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003634:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003636:	e011      	b.n	800365c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	691b      	ldr	r3, [r3, #16]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d012      	beq.n	8003666 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	3310      	adds	r3, #16
 8003644:	4618      	mov	r0, r3
 8003646:	f000 fd61 	bl	800410c <xTaskRemoveFromEventList>
 800364a:	4603      	mov	r3, r0
 800364c:	2b00      	cmp	r3, #0
 800364e:	d001      	beq.n	8003654 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003650:	f000 fe3a 	bl	80042c8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003654:	7bbb      	ldrb	r3, [r7, #14]
 8003656:	3b01      	subs	r3, #1
 8003658:	b2db      	uxtb	r3, r3
 800365a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800365c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003660:	2b00      	cmp	r3, #0
 8003662:	dce9      	bgt.n	8003638 <prvUnlockQueue+0x60>
 8003664:	e000      	b.n	8003668 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003666:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	22ff      	movs	r2, #255	@ 0xff
 800366c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8003670:	f001 fdb4 	bl	80051dc <vPortExitCritical>
}
 8003674:	bf00      	nop
 8003676:	3710      	adds	r7, #16
 8003678:	46bd      	mov	sp, r7
 800367a:	bd80      	pop	{r7, pc}

0800367c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b084      	sub	sp, #16
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003684:	f001 fd78 	bl	8005178 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800368c:	2b00      	cmp	r3, #0
 800368e:	d102      	bne.n	8003696 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003690:	2301      	movs	r3, #1
 8003692:	60fb      	str	r3, [r7, #12]
 8003694:	e001      	b.n	800369a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003696:	2300      	movs	r3, #0
 8003698:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800369a:	f001 fd9f 	bl	80051dc <vPortExitCritical>

	return xReturn;
 800369e:	68fb      	ldr	r3, [r7, #12]
}
 80036a0:	4618      	mov	r0, r3
 80036a2:	3710      	adds	r7, #16
 80036a4:	46bd      	mov	sp, r7
 80036a6:	bd80      	pop	{r7, pc}

080036a8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b084      	sub	sp, #16
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80036b0:	f001 fd62 	bl	8005178 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036bc:	429a      	cmp	r2, r3
 80036be:	d102      	bne.n	80036c6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80036c0:	2301      	movs	r3, #1
 80036c2:	60fb      	str	r3, [r7, #12]
 80036c4:	e001      	b.n	80036ca <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80036c6:	2300      	movs	r3, #0
 80036c8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80036ca:	f001 fd87 	bl	80051dc <vPortExitCritical>

	return xReturn;
 80036ce:	68fb      	ldr	r3, [r7, #12]
}
 80036d0:	4618      	mov	r0, r3
 80036d2:	3710      	adds	r7, #16
 80036d4:	46bd      	mov	sp, r7
 80036d6:	bd80      	pop	{r7, pc}

080036d8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80036d8:	b480      	push	{r7}
 80036da:	b085      	sub	sp, #20
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
 80036e0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80036e2:	2300      	movs	r3, #0
 80036e4:	60fb      	str	r3, [r7, #12]
 80036e6:	e014      	b.n	8003712 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80036e8:	4a0f      	ldr	r2, [pc, #60]	@ (8003728 <vQueueAddToRegistry+0x50>)
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d10b      	bne.n	800370c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80036f4:	490c      	ldr	r1, [pc, #48]	@ (8003728 <vQueueAddToRegistry+0x50>)
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	683a      	ldr	r2, [r7, #0]
 80036fa:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80036fe:	4a0a      	ldr	r2, [pc, #40]	@ (8003728 <vQueueAddToRegistry+0x50>)
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	00db      	lsls	r3, r3, #3
 8003704:	4413      	add	r3, r2
 8003706:	687a      	ldr	r2, [r7, #4]
 8003708:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800370a:	e006      	b.n	800371a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	3301      	adds	r3, #1
 8003710:	60fb      	str	r3, [r7, #12]
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	2b07      	cmp	r3, #7
 8003716:	d9e7      	bls.n	80036e8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003718:	bf00      	nop
 800371a:	bf00      	nop
 800371c:	3714      	adds	r7, #20
 800371e:	46bd      	mov	sp, r7
 8003720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003724:	4770      	bx	lr
 8003726:	bf00      	nop
 8003728:	2000082c 	.word	0x2000082c

0800372c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800372c:	b480      	push	{r7}
 800372e:	b085      	sub	sp, #20
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003734:	2300      	movs	r3, #0
 8003736:	60fb      	str	r3, [r7, #12]
 8003738:	e016      	b.n	8003768 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800373a:	4a10      	ldr	r2, [pc, #64]	@ (800377c <vQueueUnregisterQueue+0x50>)
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	00db      	lsls	r3, r3, #3
 8003740:	4413      	add	r3, r2
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	687a      	ldr	r2, [r7, #4]
 8003746:	429a      	cmp	r2, r3
 8003748:	d10b      	bne.n	8003762 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800374a:	4a0c      	ldr	r2, [pc, #48]	@ (800377c <vQueueUnregisterQueue+0x50>)
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	2100      	movs	r1, #0
 8003750:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8003754:	4a09      	ldr	r2, [pc, #36]	@ (800377c <vQueueUnregisterQueue+0x50>)
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	00db      	lsls	r3, r3, #3
 800375a:	4413      	add	r3, r2
 800375c:	2200      	movs	r2, #0
 800375e:	605a      	str	r2, [r3, #4]
				break;
 8003760:	e006      	b.n	8003770 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	3301      	adds	r3, #1
 8003766:	60fb      	str	r3, [r7, #12]
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	2b07      	cmp	r3, #7
 800376c:	d9e5      	bls.n	800373a <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800376e:	bf00      	nop
 8003770:	bf00      	nop
 8003772:	3714      	adds	r7, #20
 8003774:	46bd      	mov	sp, r7
 8003776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377a:	4770      	bx	lr
 800377c:	2000082c 	.word	0x2000082c

08003780 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003780:	b580      	push	{r7, lr}
 8003782:	b086      	sub	sp, #24
 8003784:	af00      	add	r7, sp, #0
 8003786:	60f8      	str	r0, [r7, #12]
 8003788:	60b9      	str	r1, [r7, #8]
 800378a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003790:	f001 fcf2 	bl	8005178 <vPortEnterCritical>
 8003794:	697b      	ldr	r3, [r7, #20]
 8003796:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800379a:	b25b      	sxtb	r3, r3
 800379c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037a0:	d103      	bne.n	80037aa <vQueueWaitForMessageRestricted+0x2a>
 80037a2:	697b      	ldr	r3, [r7, #20]
 80037a4:	2200      	movs	r2, #0
 80037a6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80037aa:	697b      	ldr	r3, [r7, #20]
 80037ac:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80037b0:	b25b      	sxtb	r3, r3
 80037b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037b6:	d103      	bne.n	80037c0 <vQueueWaitForMessageRestricted+0x40>
 80037b8:	697b      	ldr	r3, [r7, #20]
 80037ba:	2200      	movs	r2, #0
 80037bc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80037c0:	f001 fd0c 	bl	80051dc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80037c4:	697b      	ldr	r3, [r7, #20]
 80037c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d106      	bne.n	80037da <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80037cc:	697b      	ldr	r3, [r7, #20]
 80037ce:	3324      	adds	r3, #36	@ 0x24
 80037d0:	687a      	ldr	r2, [r7, #4]
 80037d2:	68b9      	ldr	r1, [r7, #8]
 80037d4:	4618      	mov	r0, r3
 80037d6:	f000 fc6d 	bl	80040b4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80037da:	6978      	ldr	r0, [r7, #20]
 80037dc:	f7ff fefc 	bl	80035d8 <prvUnlockQueue>
	}
 80037e0:	bf00      	nop
 80037e2:	3718      	adds	r7, #24
 80037e4:	46bd      	mov	sp, r7
 80037e6:	bd80      	pop	{r7, pc}

080037e8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b08e      	sub	sp, #56	@ 0x38
 80037ec:	af04      	add	r7, sp, #16
 80037ee:	60f8      	str	r0, [r7, #12]
 80037f0:	60b9      	str	r1, [r7, #8]
 80037f2:	607a      	str	r2, [r7, #4]
 80037f4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80037f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d10b      	bne.n	8003814 <xTaskCreateStatic+0x2c>
	__asm volatile
 80037fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003800:	f383 8811 	msr	BASEPRI, r3
 8003804:	f3bf 8f6f 	isb	sy
 8003808:	f3bf 8f4f 	dsb	sy
 800380c:	623b      	str	r3, [r7, #32]
}
 800380e:	bf00      	nop
 8003810:	bf00      	nop
 8003812:	e7fd      	b.n	8003810 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003814:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003816:	2b00      	cmp	r3, #0
 8003818:	d10b      	bne.n	8003832 <xTaskCreateStatic+0x4a>
	__asm volatile
 800381a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800381e:	f383 8811 	msr	BASEPRI, r3
 8003822:	f3bf 8f6f 	isb	sy
 8003826:	f3bf 8f4f 	dsb	sy
 800382a:	61fb      	str	r3, [r7, #28]
}
 800382c:	bf00      	nop
 800382e:	bf00      	nop
 8003830:	e7fd      	b.n	800382e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003832:	23a8      	movs	r3, #168	@ 0xa8
 8003834:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003836:	693b      	ldr	r3, [r7, #16]
 8003838:	2ba8      	cmp	r3, #168	@ 0xa8
 800383a:	d00b      	beq.n	8003854 <xTaskCreateStatic+0x6c>
	__asm volatile
 800383c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003840:	f383 8811 	msr	BASEPRI, r3
 8003844:	f3bf 8f6f 	isb	sy
 8003848:	f3bf 8f4f 	dsb	sy
 800384c:	61bb      	str	r3, [r7, #24]
}
 800384e:	bf00      	nop
 8003850:	bf00      	nop
 8003852:	e7fd      	b.n	8003850 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003854:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003856:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003858:	2b00      	cmp	r3, #0
 800385a:	d01e      	beq.n	800389a <xTaskCreateStatic+0xb2>
 800385c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800385e:	2b00      	cmp	r3, #0
 8003860:	d01b      	beq.n	800389a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003862:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003864:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003866:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003868:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800386a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800386c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800386e:	2202      	movs	r2, #2
 8003870:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003874:	2300      	movs	r3, #0
 8003876:	9303      	str	r3, [sp, #12]
 8003878:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800387a:	9302      	str	r3, [sp, #8]
 800387c:	f107 0314 	add.w	r3, r7, #20
 8003880:	9301      	str	r3, [sp, #4]
 8003882:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003884:	9300      	str	r3, [sp, #0]
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	687a      	ldr	r2, [r7, #4]
 800388a:	68b9      	ldr	r1, [r7, #8]
 800388c:	68f8      	ldr	r0, [r7, #12]
 800388e:	f000 f851 	bl	8003934 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003892:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003894:	f000 f8f6 	bl	8003a84 <prvAddNewTaskToReadyList>
 8003898:	e001      	b.n	800389e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800389a:	2300      	movs	r3, #0
 800389c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800389e:	697b      	ldr	r3, [r7, #20]
	}
 80038a0:	4618      	mov	r0, r3
 80038a2:	3728      	adds	r7, #40	@ 0x28
 80038a4:	46bd      	mov	sp, r7
 80038a6:	bd80      	pop	{r7, pc}

080038a8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b08c      	sub	sp, #48	@ 0x30
 80038ac:	af04      	add	r7, sp, #16
 80038ae:	60f8      	str	r0, [r7, #12]
 80038b0:	60b9      	str	r1, [r7, #8]
 80038b2:	603b      	str	r3, [r7, #0]
 80038b4:	4613      	mov	r3, r2
 80038b6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80038b8:	88fb      	ldrh	r3, [r7, #6]
 80038ba:	009b      	lsls	r3, r3, #2
 80038bc:	4618      	mov	r0, r3
 80038be:	f001 fd7d 	bl	80053bc <pvPortMalloc>
 80038c2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80038c4:	697b      	ldr	r3, [r7, #20]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d00e      	beq.n	80038e8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80038ca:	20a8      	movs	r0, #168	@ 0xa8
 80038cc:	f001 fd76 	bl	80053bc <pvPortMalloc>
 80038d0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80038d2:	69fb      	ldr	r3, [r7, #28]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d003      	beq.n	80038e0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80038d8:	69fb      	ldr	r3, [r7, #28]
 80038da:	697a      	ldr	r2, [r7, #20]
 80038dc:	631a      	str	r2, [r3, #48]	@ 0x30
 80038de:	e005      	b.n	80038ec <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80038e0:	6978      	ldr	r0, [r7, #20]
 80038e2:	f001 fe39 	bl	8005558 <vPortFree>
 80038e6:	e001      	b.n	80038ec <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80038e8:	2300      	movs	r3, #0
 80038ea:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80038ec:	69fb      	ldr	r3, [r7, #28]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d017      	beq.n	8003922 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80038f2:	69fb      	ldr	r3, [r7, #28]
 80038f4:	2200      	movs	r2, #0
 80038f6:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80038fa:	88fa      	ldrh	r2, [r7, #6]
 80038fc:	2300      	movs	r3, #0
 80038fe:	9303      	str	r3, [sp, #12]
 8003900:	69fb      	ldr	r3, [r7, #28]
 8003902:	9302      	str	r3, [sp, #8]
 8003904:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003906:	9301      	str	r3, [sp, #4]
 8003908:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800390a:	9300      	str	r3, [sp, #0]
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	68b9      	ldr	r1, [r7, #8]
 8003910:	68f8      	ldr	r0, [r7, #12]
 8003912:	f000 f80f 	bl	8003934 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003916:	69f8      	ldr	r0, [r7, #28]
 8003918:	f000 f8b4 	bl	8003a84 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800391c:	2301      	movs	r3, #1
 800391e:	61bb      	str	r3, [r7, #24]
 8003920:	e002      	b.n	8003928 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003922:	f04f 33ff 	mov.w	r3, #4294967295
 8003926:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003928:	69bb      	ldr	r3, [r7, #24]
	}
 800392a:	4618      	mov	r0, r3
 800392c:	3720      	adds	r7, #32
 800392e:	46bd      	mov	sp, r7
 8003930:	bd80      	pop	{r7, pc}
	...

08003934 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b088      	sub	sp, #32
 8003938:	af00      	add	r7, sp, #0
 800393a:	60f8      	str	r0, [r7, #12]
 800393c:	60b9      	str	r1, [r7, #8]
 800393e:	607a      	str	r2, [r7, #4]
 8003940:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003942:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003944:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	009b      	lsls	r3, r3, #2
 800394a:	461a      	mov	r2, r3
 800394c:	21a5      	movs	r1, #165	@ 0xa5
 800394e:	f001 ff23 	bl	8005798 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003952:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003954:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800395c:	3b01      	subs	r3, #1
 800395e:	009b      	lsls	r3, r3, #2
 8003960:	4413      	add	r3, r2
 8003962:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003964:	69bb      	ldr	r3, [r7, #24]
 8003966:	f023 0307 	bic.w	r3, r3, #7
 800396a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800396c:	69bb      	ldr	r3, [r7, #24]
 800396e:	f003 0307 	and.w	r3, r3, #7
 8003972:	2b00      	cmp	r3, #0
 8003974:	d00b      	beq.n	800398e <prvInitialiseNewTask+0x5a>
	__asm volatile
 8003976:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800397a:	f383 8811 	msr	BASEPRI, r3
 800397e:	f3bf 8f6f 	isb	sy
 8003982:	f3bf 8f4f 	dsb	sy
 8003986:	617b      	str	r3, [r7, #20]
}
 8003988:	bf00      	nop
 800398a:	bf00      	nop
 800398c:	e7fd      	b.n	800398a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800398e:	68bb      	ldr	r3, [r7, #8]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d01f      	beq.n	80039d4 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003994:	2300      	movs	r3, #0
 8003996:	61fb      	str	r3, [r7, #28]
 8003998:	e012      	b.n	80039c0 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800399a:	68ba      	ldr	r2, [r7, #8]
 800399c:	69fb      	ldr	r3, [r7, #28]
 800399e:	4413      	add	r3, r2
 80039a0:	7819      	ldrb	r1, [r3, #0]
 80039a2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80039a4:	69fb      	ldr	r3, [r7, #28]
 80039a6:	4413      	add	r3, r2
 80039a8:	3334      	adds	r3, #52	@ 0x34
 80039aa:	460a      	mov	r2, r1
 80039ac:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80039ae:	68ba      	ldr	r2, [r7, #8]
 80039b0:	69fb      	ldr	r3, [r7, #28]
 80039b2:	4413      	add	r3, r2
 80039b4:	781b      	ldrb	r3, [r3, #0]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d006      	beq.n	80039c8 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80039ba:	69fb      	ldr	r3, [r7, #28]
 80039bc:	3301      	adds	r3, #1
 80039be:	61fb      	str	r3, [r7, #28]
 80039c0:	69fb      	ldr	r3, [r7, #28]
 80039c2:	2b0f      	cmp	r3, #15
 80039c4:	d9e9      	bls.n	800399a <prvInitialiseNewTask+0x66>
 80039c6:	e000      	b.n	80039ca <prvInitialiseNewTask+0x96>
			{
				break;
 80039c8:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80039ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039cc:	2200      	movs	r2, #0
 80039ce:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80039d2:	e003      	b.n	80039dc <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80039d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039d6:	2200      	movs	r2, #0
 80039d8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80039dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039de:	2b37      	cmp	r3, #55	@ 0x37
 80039e0:	d901      	bls.n	80039e6 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80039e2:	2337      	movs	r3, #55	@ 0x37
 80039e4:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80039e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039e8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80039ea:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80039ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039ee:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80039f0:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80039f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039f4:	2200      	movs	r2, #0
 80039f6:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80039f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039fa:	3304      	adds	r3, #4
 80039fc:	4618      	mov	r0, r3
 80039fe:	f7fe fe33 	bl	8002668 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003a02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a04:	3318      	adds	r3, #24
 8003a06:	4618      	mov	r0, r3
 8003a08:	f7fe fe2e 	bl	8002668 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003a0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a0e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003a10:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003a12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a14:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8003a18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a1a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003a1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a1e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003a20:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003a22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a24:	2200      	movs	r2, #0
 8003a26:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003a2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8003a32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a34:	3354      	adds	r3, #84	@ 0x54
 8003a36:	224c      	movs	r2, #76	@ 0x4c
 8003a38:	2100      	movs	r1, #0
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	f001 feac 	bl	8005798 <memset>
 8003a40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a42:	4a0d      	ldr	r2, [pc, #52]	@ (8003a78 <prvInitialiseNewTask+0x144>)
 8003a44:	659a      	str	r2, [r3, #88]	@ 0x58
 8003a46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a48:	4a0c      	ldr	r2, [pc, #48]	@ (8003a7c <prvInitialiseNewTask+0x148>)
 8003a4a:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003a4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a4e:	4a0c      	ldr	r2, [pc, #48]	@ (8003a80 <prvInitialiseNewTask+0x14c>)
 8003a50:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003a52:	683a      	ldr	r2, [r7, #0]
 8003a54:	68f9      	ldr	r1, [r7, #12]
 8003a56:	69b8      	ldr	r0, [r7, #24]
 8003a58:	f001 fa5a 	bl	8004f10 <pxPortInitialiseStack>
 8003a5c:	4602      	mov	r2, r0
 8003a5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a60:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003a62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d002      	beq.n	8003a6e <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003a68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a6a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003a6c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003a6e:	bf00      	nop
 8003a70:	3720      	adds	r7, #32
 8003a72:	46bd      	mov	sp, r7
 8003a74:	bd80      	pop	{r7, pc}
 8003a76:	bf00      	nop
 8003a78:	20004ac0 	.word	0x20004ac0
 8003a7c:	20004b28 	.word	0x20004b28
 8003a80:	20004b90 	.word	0x20004b90

08003a84 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b082      	sub	sp, #8
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003a8c:	f001 fb74 	bl	8005178 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003a90:	4b2d      	ldr	r3, [pc, #180]	@ (8003b48 <prvAddNewTaskToReadyList+0xc4>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	3301      	adds	r3, #1
 8003a96:	4a2c      	ldr	r2, [pc, #176]	@ (8003b48 <prvAddNewTaskToReadyList+0xc4>)
 8003a98:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003a9a:	4b2c      	ldr	r3, [pc, #176]	@ (8003b4c <prvAddNewTaskToReadyList+0xc8>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d109      	bne.n	8003ab6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003aa2:	4a2a      	ldr	r2, [pc, #168]	@ (8003b4c <prvAddNewTaskToReadyList+0xc8>)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003aa8:	4b27      	ldr	r3, [pc, #156]	@ (8003b48 <prvAddNewTaskToReadyList+0xc4>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	2b01      	cmp	r3, #1
 8003aae:	d110      	bne.n	8003ad2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003ab0:	f000 fc2e 	bl	8004310 <prvInitialiseTaskLists>
 8003ab4:	e00d      	b.n	8003ad2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003ab6:	4b26      	ldr	r3, [pc, #152]	@ (8003b50 <prvAddNewTaskToReadyList+0xcc>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d109      	bne.n	8003ad2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003abe:	4b23      	ldr	r3, [pc, #140]	@ (8003b4c <prvAddNewTaskToReadyList+0xc8>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ac8:	429a      	cmp	r2, r3
 8003aca:	d802      	bhi.n	8003ad2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003acc:	4a1f      	ldr	r2, [pc, #124]	@ (8003b4c <prvAddNewTaskToReadyList+0xc8>)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003ad2:	4b20      	ldr	r3, [pc, #128]	@ (8003b54 <prvAddNewTaskToReadyList+0xd0>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	3301      	adds	r3, #1
 8003ad8:	4a1e      	ldr	r2, [pc, #120]	@ (8003b54 <prvAddNewTaskToReadyList+0xd0>)
 8003ada:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003adc:	4b1d      	ldr	r3, [pc, #116]	@ (8003b54 <prvAddNewTaskToReadyList+0xd0>)
 8003ade:	681a      	ldr	r2, [r3, #0]
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ae8:	4b1b      	ldr	r3, [pc, #108]	@ (8003b58 <prvAddNewTaskToReadyList+0xd4>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	429a      	cmp	r2, r3
 8003aee:	d903      	bls.n	8003af8 <prvAddNewTaskToReadyList+0x74>
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003af4:	4a18      	ldr	r2, [pc, #96]	@ (8003b58 <prvAddNewTaskToReadyList+0xd4>)
 8003af6:	6013      	str	r3, [r2, #0]
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003afc:	4613      	mov	r3, r2
 8003afe:	009b      	lsls	r3, r3, #2
 8003b00:	4413      	add	r3, r2
 8003b02:	009b      	lsls	r3, r3, #2
 8003b04:	4a15      	ldr	r2, [pc, #84]	@ (8003b5c <prvAddNewTaskToReadyList+0xd8>)
 8003b06:	441a      	add	r2, r3
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	3304      	adds	r3, #4
 8003b0c:	4619      	mov	r1, r3
 8003b0e:	4610      	mov	r0, r2
 8003b10:	f7fe fdb7 	bl	8002682 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003b14:	f001 fb62 	bl	80051dc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003b18:	4b0d      	ldr	r3, [pc, #52]	@ (8003b50 <prvAddNewTaskToReadyList+0xcc>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d00e      	beq.n	8003b3e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003b20:	4b0a      	ldr	r3, [pc, #40]	@ (8003b4c <prvAddNewTaskToReadyList+0xc8>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b2a:	429a      	cmp	r2, r3
 8003b2c:	d207      	bcs.n	8003b3e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003b2e:	4b0c      	ldr	r3, [pc, #48]	@ (8003b60 <prvAddNewTaskToReadyList+0xdc>)
 8003b30:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003b34:	601a      	str	r2, [r3, #0]
 8003b36:	f3bf 8f4f 	dsb	sy
 8003b3a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003b3e:	bf00      	nop
 8003b40:	3708      	adds	r7, #8
 8003b42:	46bd      	mov	sp, r7
 8003b44:	bd80      	pop	{r7, pc}
 8003b46:	bf00      	nop
 8003b48:	20000d40 	.word	0x20000d40
 8003b4c:	2000086c 	.word	0x2000086c
 8003b50:	20000d4c 	.word	0x20000d4c
 8003b54:	20000d5c 	.word	0x20000d5c
 8003b58:	20000d48 	.word	0x20000d48
 8003b5c:	20000870 	.word	0x20000870
 8003b60:	e000ed04 	.word	0xe000ed04

08003b64 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b084      	sub	sp, #16
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d018      	beq.n	8003ba8 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003b76:	4b14      	ldr	r3, [pc, #80]	@ (8003bc8 <vTaskDelay+0x64>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d00b      	beq.n	8003b96 <vTaskDelay+0x32>
	__asm volatile
 8003b7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b82:	f383 8811 	msr	BASEPRI, r3
 8003b86:	f3bf 8f6f 	isb	sy
 8003b8a:	f3bf 8f4f 	dsb	sy
 8003b8e:	60bb      	str	r3, [r7, #8]
}
 8003b90:	bf00      	nop
 8003b92:	bf00      	nop
 8003b94:	e7fd      	b.n	8003b92 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003b96:	f000 f88b 	bl	8003cb0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003b9a:	2100      	movs	r1, #0
 8003b9c:	6878      	ldr	r0, [r7, #4]
 8003b9e:	f000 fe09 	bl	80047b4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003ba2:	f000 f893 	bl	8003ccc <xTaskResumeAll>
 8003ba6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d107      	bne.n	8003bbe <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8003bae:	4b07      	ldr	r3, [pc, #28]	@ (8003bcc <vTaskDelay+0x68>)
 8003bb0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003bb4:	601a      	str	r2, [r3, #0]
 8003bb6:	f3bf 8f4f 	dsb	sy
 8003bba:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003bbe:	bf00      	nop
 8003bc0:	3710      	adds	r7, #16
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	bd80      	pop	{r7, pc}
 8003bc6:	bf00      	nop
 8003bc8:	20000d68 	.word	0x20000d68
 8003bcc:	e000ed04 	.word	0xe000ed04

08003bd0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b08a      	sub	sp, #40	@ 0x28
 8003bd4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003bda:	2300      	movs	r3, #0
 8003bdc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003bde:	463a      	mov	r2, r7
 8003be0:	1d39      	adds	r1, r7, #4
 8003be2:	f107 0308 	add.w	r3, r7, #8
 8003be6:	4618      	mov	r0, r3
 8003be8:	f7fe fcea 	bl	80025c0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003bec:	6839      	ldr	r1, [r7, #0]
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	68ba      	ldr	r2, [r7, #8]
 8003bf2:	9202      	str	r2, [sp, #8]
 8003bf4:	9301      	str	r3, [sp, #4]
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	9300      	str	r3, [sp, #0]
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	460a      	mov	r2, r1
 8003bfe:	4924      	ldr	r1, [pc, #144]	@ (8003c90 <vTaskStartScheduler+0xc0>)
 8003c00:	4824      	ldr	r0, [pc, #144]	@ (8003c94 <vTaskStartScheduler+0xc4>)
 8003c02:	f7ff fdf1 	bl	80037e8 <xTaskCreateStatic>
 8003c06:	4603      	mov	r3, r0
 8003c08:	4a23      	ldr	r2, [pc, #140]	@ (8003c98 <vTaskStartScheduler+0xc8>)
 8003c0a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003c0c:	4b22      	ldr	r3, [pc, #136]	@ (8003c98 <vTaskStartScheduler+0xc8>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d002      	beq.n	8003c1a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003c14:	2301      	movs	r3, #1
 8003c16:	617b      	str	r3, [r7, #20]
 8003c18:	e001      	b.n	8003c1e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003c1e:	697b      	ldr	r3, [r7, #20]
 8003c20:	2b01      	cmp	r3, #1
 8003c22:	d102      	bne.n	8003c2a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003c24:	f000 fe1a 	bl	800485c <xTimerCreateTimerTask>
 8003c28:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003c2a:	697b      	ldr	r3, [r7, #20]
 8003c2c:	2b01      	cmp	r3, #1
 8003c2e:	d11b      	bne.n	8003c68 <vTaskStartScheduler+0x98>
	__asm volatile
 8003c30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c34:	f383 8811 	msr	BASEPRI, r3
 8003c38:	f3bf 8f6f 	isb	sy
 8003c3c:	f3bf 8f4f 	dsb	sy
 8003c40:	613b      	str	r3, [r7, #16]
}
 8003c42:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003c44:	4b15      	ldr	r3, [pc, #84]	@ (8003c9c <vTaskStartScheduler+0xcc>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	3354      	adds	r3, #84	@ 0x54
 8003c4a:	4a15      	ldr	r2, [pc, #84]	@ (8003ca0 <vTaskStartScheduler+0xd0>)
 8003c4c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003c4e:	4b15      	ldr	r3, [pc, #84]	@ (8003ca4 <vTaskStartScheduler+0xd4>)
 8003c50:	f04f 32ff 	mov.w	r2, #4294967295
 8003c54:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003c56:	4b14      	ldr	r3, [pc, #80]	@ (8003ca8 <vTaskStartScheduler+0xd8>)
 8003c58:	2201      	movs	r2, #1
 8003c5a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003c5c:	4b13      	ldr	r3, [pc, #76]	@ (8003cac <vTaskStartScheduler+0xdc>)
 8003c5e:	2200      	movs	r2, #0
 8003c60:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003c62:	f001 f9e5 	bl	8005030 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003c66:	e00f      	b.n	8003c88 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003c68:	697b      	ldr	r3, [r7, #20]
 8003c6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c6e:	d10b      	bne.n	8003c88 <vTaskStartScheduler+0xb8>
	__asm volatile
 8003c70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c74:	f383 8811 	msr	BASEPRI, r3
 8003c78:	f3bf 8f6f 	isb	sy
 8003c7c:	f3bf 8f4f 	dsb	sy
 8003c80:	60fb      	str	r3, [r7, #12]
}
 8003c82:	bf00      	nop
 8003c84:	bf00      	nop
 8003c86:	e7fd      	b.n	8003c84 <vTaskStartScheduler+0xb4>
}
 8003c88:	bf00      	nop
 8003c8a:	3718      	adds	r7, #24
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	bd80      	pop	{r7, pc}
 8003c90:	080059ac 	.word	0x080059ac
 8003c94:	080042e1 	.word	0x080042e1
 8003c98:	20000d64 	.word	0x20000d64
 8003c9c:	2000086c 	.word	0x2000086c
 8003ca0:	20000010 	.word	0x20000010
 8003ca4:	20000d60 	.word	0x20000d60
 8003ca8:	20000d4c 	.word	0x20000d4c
 8003cac:	20000d44 	.word	0x20000d44

08003cb0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003cb4:	4b04      	ldr	r3, [pc, #16]	@ (8003cc8 <vTaskSuspendAll+0x18>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	3301      	adds	r3, #1
 8003cba:	4a03      	ldr	r2, [pc, #12]	@ (8003cc8 <vTaskSuspendAll+0x18>)
 8003cbc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003cbe:	bf00      	nop
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc6:	4770      	bx	lr
 8003cc8:	20000d68 	.word	0x20000d68

08003ccc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b084      	sub	sp, #16
 8003cd0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003cda:	4b42      	ldr	r3, [pc, #264]	@ (8003de4 <xTaskResumeAll+0x118>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d10b      	bne.n	8003cfa <xTaskResumeAll+0x2e>
	__asm volatile
 8003ce2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ce6:	f383 8811 	msr	BASEPRI, r3
 8003cea:	f3bf 8f6f 	isb	sy
 8003cee:	f3bf 8f4f 	dsb	sy
 8003cf2:	603b      	str	r3, [r7, #0]
}
 8003cf4:	bf00      	nop
 8003cf6:	bf00      	nop
 8003cf8:	e7fd      	b.n	8003cf6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003cfa:	f001 fa3d 	bl	8005178 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003cfe:	4b39      	ldr	r3, [pc, #228]	@ (8003de4 <xTaskResumeAll+0x118>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	3b01      	subs	r3, #1
 8003d04:	4a37      	ldr	r2, [pc, #220]	@ (8003de4 <xTaskResumeAll+0x118>)
 8003d06:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003d08:	4b36      	ldr	r3, [pc, #216]	@ (8003de4 <xTaskResumeAll+0x118>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d162      	bne.n	8003dd6 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003d10:	4b35      	ldr	r3, [pc, #212]	@ (8003de8 <xTaskResumeAll+0x11c>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d05e      	beq.n	8003dd6 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003d18:	e02f      	b.n	8003d7a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003d1a:	4b34      	ldr	r3, [pc, #208]	@ (8003dec <xTaskResumeAll+0x120>)
 8003d1c:	68db      	ldr	r3, [r3, #12]
 8003d1e:	68db      	ldr	r3, [r3, #12]
 8003d20:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	3318      	adds	r3, #24
 8003d26:	4618      	mov	r0, r3
 8003d28:	f7fe fd08 	bl	800273c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	3304      	adds	r3, #4
 8003d30:	4618      	mov	r0, r3
 8003d32:	f7fe fd03 	bl	800273c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d3a:	4b2d      	ldr	r3, [pc, #180]	@ (8003df0 <xTaskResumeAll+0x124>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	429a      	cmp	r2, r3
 8003d40:	d903      	bls.n	8003d4a <xTaskResumeAll+0x7e>
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d46:	4a2a      	ldr	r2, [pc, #168]	@ (8003df0 <xTaskResumeAll+0x124>)
 8003d48:	6013      	str	r3, [r2, #0]
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d4e:	4613      	mov	r3, r2
 8003d50:	009b      	lsls	r3, r3, #2
 8003d52:	4413      	add	r3, r2
 8003d54:	009b      	lsls	r3, r3, #2
 8003d56:	4a27      	ldr	r2, [pc, #156]	@ (8003df4 <xTaskResumeAll+0x128>)
 8003d58:	441a      	add	r2, r3
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	3304      	adds	r3, #4
 8003d5e:	4619      	mov	r1, r3
 8003d60:	4610      	mov	r0, r2
 8003d62:	f7fe fc8e 	bl	8002682 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d6a:	4b23      	ldr	r3, [pc, #140]	@ (8003df8 <xTaskResumeAll+0x12c>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d70:	429a      	cmp	r2, r3
 8003d72:	d302      	bcc.n	8003d7a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8003d74:	4b21      	ldr	r3, [pc, #132]	@ (8003dfc <xTaskResumeAll+0x130>)
 8003d76:	2201      	movs	r2, #1
 8003d78:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003d7a:	4b1c      	ldr	r3, [pc, #112]	@ (8003dec <xTaskResumeAll+0x120>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d1cb      	bne.n	8003d1a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d001      	beq.n	8003d8c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003d88:	f000 fb66 	bl	8004458 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003d8c:	4b1c      	ldr	r3, [pc, #112]	@ (8003e00 <xTaskResumeAll+0x134>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d010      	beq.n	8003dba <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003d98:	f000 f846 	bl	8003e28 <xTaskIncrementTick>
 8003d9c:	4603      	mov	r3, r0
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d002      	beq.n	8003da8 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8003da2:	4b16      	ldr	r3, [pc, #88]	@ (8003dfc <xTaskResumeAll+0x130>)
 8003da4:	2201      	movs	r2, #1
 8003da6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	3b01      	subs	r3, #1
 8003dac:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d1f1      	bne.n	8003d98 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8003db4:	4b12      	ldr	r3, [pc, #72]	@ (8003e00 <xTaskResumeAll+0x134>)
 8003db6:	2200      	movs	r2, #0
 8003db8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003dba:	4b10      	ldr	r3, [pc, #64]	@ (8003dfc <xTaskResumeAll+0x130>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d009      	beq.n	8003dd6 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003dc6:	4b0f      	ldr	r3, [pc, #60]	@ (8003e04 <xTaskResumeAll+0x138>)
 8003dc8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003dcc:	601a      	str	r2, [r3, #0]
 8003dce:	f3bf 8f4f 	dsb	sy
 8003dd2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003dd6:	f001 fa01 	bl	80051dc <vPortExitCritical>

	return xAlreadyYielded;
 8003dda:	68bb      	ldr	r3, [r7, #8]
}
 8003ddc:	4618      	mov	r0, r3
 8003dde:	3710      	adds	r7, #16
 8003de0:	46bd      	mov	sp, r7
 8003de2:	bd80      	pop	{r7, pc}
 8003de4:	20000d68 	.word	0x20000d68
 8003de8:	20000d40 	.word	0x20000d40
 8003dec:	20000d00 	.word	0x20000d00
 8003df0:	20000d48 	.word	0x20000d48
 8003df4:	20000870 	.word	0x20000870
 8003df8:	2000086c 	.word	0x2000086c
 8003dfc:	20000d54 	.word	0x20000d54
 8003e00:	20000d50 	.word	0x20000d50
 8003e04:	e000ed04 	.word	0xe000ed04

08003e08 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003e08:	b480      	push	{r7}
 8003e0a:	b083      	sub	sp, #12
 8003e0c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003e0e:	4b05      	ldr	r3, [pc, #20]	@ (8003e24 <xTaskGetTickCount+0x1c>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003e14:	687b      	ldr	r3, [r7, #4]
}
 8003e16:	4618      	mov	r0, r3
 8003e18:	370c      	adds	r7, #12
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e20:	4770      	bx	lr
 8003e22:	bf00      	nop
 8003e24:	20000d44 	.word	0x20000d44

08003e28 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b086      	sub	sp, #24
 8003e2c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003e2e:	2300      	movs	r3, #0
 8003e30:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003e32:	4b4f      	ldr	r3, [pc, #316]	@ (8003f70 <xTaskIncrementTick+0x148>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	f040 8090 	bne.w	8003f5c <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003e3c:	4b4d      	ldr	r3, [pc, #308]	@ (8003f74 <xTaskIncrementTick+0x14c>)
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	3301      	adds	r3, #1
 8003e42:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003e44:	4a4b      	ldr	r2, [pc, #300]	@ (8003f74 <xTaskIncrementTick+0x14c>)
 8003e46:	693b      	ldr	r3, [r7, #16]
 8003e48:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003e4a:	693b      	ldr	r3, [r7, #16]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d121      	bne.n	8003e94 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8003e50:	4b49      	ldr	r3, [pc, #292]	@ (8003f78 <xTaskIncrementTick+0x150>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d00b      	beq.n	8003e72 <xTaskIncrementTick+0x4a>
	__asm volatile
 8003e5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e5e:	f383 8811 	msr	BASEPRI, r3
 8003e62:	f3bf 8f6f 	isb	sy
 8003e66:	f3bf 8f4f 	dsb	sy
 8003e6a:	603b      	str	r3, [r7, #0]
}
 8003e6c:	bf00      	nop
 8003e6e:	bf00      	nop
 8003e70:	e7fd      	b.n	8003e6e <xTaskIncrementTick+0x46>
 8003e72:	4b41      	ldr	r3, [pc, #260]	@ (8003f78 <xTaskIncrementTick+0x150>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	60fb      	str	r3, [r7, #12]
 8003e78:	4b40      	ldr	r3, [pc, #256]	@ (8003f7c <xTaskIncrementTick+0x154>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4a3e      	ldr	r2, [pc, #248]	@ (8003f78 <xTaskIncrementTick+0x150>)
 8003e7e:	6013      	str	r3, [r2, #0]
 8003e80:	4a3e      	ldr	r2, [pc, #248]	@ (8003f7c <xTaskIncrementTick+0x154>)
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	6013      	str	r3, [r2, #0]
 8003e86:	4b3e      	ldr	r3, [pc, #248]	@ (8003f80 <xTaskIncrementTick+0x158>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	3301      	adds	r3, #1
 8003e8c:	4a3c      	ldr	r2, [pc, #240]	@ (8003f80 <xTaskIncrementTick+0x158>)
 8003e8e:	6013      	str	r3, [r2, #0]
 8003e90:	f000 fae2 	bl	8004458 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003e94:	4b3b      	ldr	r3, [pc, #236]	@ (8003f84 <xTaskIncrementTick+0x15c>)
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	693a      	ldr	r2, [r7, #16]
 8003e9a:	429a      	cmp	r2, r3
 8003e9c:	d349      	bcc.n	8003f32 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003e9e:	4b36      	ldr	r3, [pc, #216]	@ (8003f78 <xTaskIncrementTick+0x150>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d104      	bne.n	8003eb2 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003ea8:	4b36      	ldr	r3, [pc, #216]	@ (8003f84 <xTaskIncrementTick+0x15c>)
 8003eaa:	f04f 32ff 	mov.w	r2, #4294967295
 8003eae:	601a      	str	r2, [r3, #0]
					break;
 8003eb0:	e03f      	b.n	8003f32 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003eb2:	4b31      	ldr	r3, [pc, #196]	@ (8003f78 <xTaskIncrementTick+0x150>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	68db      	ldr	r3, [r3, #12]
 8003eb8:	68db      	ldr	r3, [r3, #12]
 8003eba:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003ebc:	68bb      	ldr	r3, [r7, #8]
 8003ebe:	685b      	ldr	r3, [r3, #4]
 8003ec0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003ec2:	693a      	ldr	r2, [r7, #16]
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	429a      	cmp	r2, r3
 8003ec8:	d203      	bcs.n	8003ed2 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003eca:	4a2e      	ldr	r2, [pc, #184]	@ (8003f84 <xTaskIncrementTick+0x15c>)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003ed0:	e02f      	b.n	8003f32 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003ed2:	68bb      	ldr	r3, [r7, #8]
 8003ed4:	3304      	adds	r3, #4
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	f7fe fc30 	bl	800273c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003edc:	68bb      	ldr	r3, [r7, #8]
 8003ede:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d004      	beq.n	8003eee <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003ee4:	68bb      	ldr	r3, [r7, #8]
 8003ee6:	3318      	adds	r3, #24
 8003ee8:	4618      	mov	r0, r3
 8003eea:	f7fe fc27 	bl	800273c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003eee:	68bb      	ldr	r3, [r7, #8]
 8003ef0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ef2:	4b25      	ldr	r3, [pc, #148]	@ (8003f88 <xTaskIncrementTick+0x160>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	429a      	cmp	r2, r3
 8003ef8:	d903      	bls.n	8003f02 <xTaskIncrementTick+0xda>
 8003efa:	68bb      	ldr	r3, [r7, #8]
 8003efc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003efe:	4a22      	ldr	r2, [pc, #136]	@ (8003f88 <xTaskIncrementTick+0x160>)
 8003f00:	6013      	str	r3, [r2, #0]
 8003f02:	68bb      	ldr	r3, [r7, #8]
 8003f04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f06:	4613      	mov	r3, r2
 8003f08:	009b      	lsls	r3, r3, #2
 8003f0a:	4413      	add	r3, r2
 8003f0c:	009b      	lsls	r3, r3, #2
 8003f0e:	4a1f      	ldr	r2, [pc, #124]	@ (8003f8c <xTaskIncrementTick+0x164>)
 8003f10:	441a      	add	r2, r3
 8003f12:	68bb      	ldr	r3, [r7, #8]
 8003f14:	3304      	adds	r3, #4
 8003f16:	4619      	mov	r1, r3
 8003f18:	4610      	mov	r0, r2
 8003f1a:	f7fe fbb2 	bl	8002682 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003f1e:	68bb      	ldr	r3, [r7, #8]
 8003f20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f22:	4b1b      	ldr	r3, [pc, #108]	@ (8003f90 <xTaskIncrementTick+0x168>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f28:	429a      	cmp	r2, r3
 8003f2a:	d3b8      	bcc.n	8003e9e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8003f2c:	2301      	movs	r3, #1
 8003f2e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003f30:	e7b5      	b.n	8003e9e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003f32:	4b17      	ldr	r3, [pc, #92]	@ (8003f90 <xTaskIncrementTick+0x168>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f38:	4914      	ldr	r1, [pc, #80]	@ (8003f8c <xTaskIncrementTick+0x164>)
 8003f3a:	4613      	mov	r3, r2
 8003f3c:	009b      	lsls	r3, r3, #2
 8003f3e:	4413      	add	r3, r2
 8003f40:	009b      	lsls	r3, r3, #2
 8003f42:	440b      	add	r3, r1
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	2b01      	cmp	r3, #1
 8003f48:	d901      	bls.n	8003f4e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003f4e:	4b11      	ldr	r3, [pc, #68]	@ (8003f94 <xTaskIncrementTick+0x16c>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d007      	beq.n	8003f66 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8003f56:	2301      	movs	r3, #1
 8003f58:	617b      	str	r3, [r7, #20]
 8003f5a:	e004      	b.n	8003f66 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003f5c:	4b0e      	ldr	r3, [pc, #56]	@ (8003f98 <xTaskIncrementTick+0x170>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	3301      	adds	r3, #1
 8003f62:	4a0d      	ldr	r2, [pc, #52]	@ (8003f98 <xTaskIncrementTick+0x170>)
 8003f64:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003f66:	697b      	ldr	r3, [r7, #20]
}
 8003f68:	4618      	mov	r0, r3
 8003f6a:	3718      	adds	r7, #24
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	bd80      	pop	{r7, pc}
 8003f70:	20000d68 	.word	0x20000d68
 8003f74:	20000d44 	.word	0x20000d44
 8003f78:	20000cf8 	.word	0x20000cf8
 8003f7c:	20000cfc 	.word	0x20000cfc
 8003f80:	20000d58 	.word	0x20000d58
 8003f84:	20000d60 	.word	0x20000d60
 8003f88:	20000d48 	.word	0x20000d48
 8003f8c:	20000870 	.word	0x20000870
 8003f90:	2000086c 	.word	0x2000086c
 8003f94:	20000d54 	.word	0x20000d54
 8003f98:	20000d50 	.word	0x20000d50

08003f9c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003f9c:	b480      	push	{r7}
 8003f9e:	b085      	sub	sp, #20
 8003fa0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003fa2:	4b2b      	ldr	r3, [pc, #172]	@ (8004050 <vTaskSwitchContext+0xb4>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d003      	beq.n	8003fb2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003faa:	4b2a      	ldr	r3, [pc, #168]	@ (8004054 <vTaskSwitchContext+0xb8>)
 8003fac:	2201      	movs	r2, #1
 8003fae:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003fb0:	e047      	b.n	8004042 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8003fb2:	4b28      	ldr	r3, [pc, #160]	@ (8004054 <vTaskSwitchContext+0xb8>)
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003fb8:	4b27      	ldr	r3, [pc, #156]	@ (8004058 <vTaskSwitchContext+0xbc>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	60fb      	str	r3, [r7, #12]
 8003fbe:	e011      	b.n	8003fe4 <vTaskSwitchContext+0x48>
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d10b      	bne.n	8003fde <vTaskSwitchContext+0x42>
	__asm volatile
 8003fc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fca:	f383 8811 	msr	BASEPRI, r3
 8003fce:	f3bf 8f6f 	isb	sy
 8003fd2:	f3bf 8f4f 	dsb	sy
 8003fd6:	607b      	str	r3, [r7, #4]
}
 8003fd8:	bf00      	nop
 8003fda:	bf00      	nop
 8003fdc:	e7fd      	b.n	8003fda <vTaskSwitchContext+0x3e>
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	3b01      	subs	r3, #1
 8003fe2:	60fb      	str	r3, [r7, #12]
 8003fe4:	491d      	ldr	r1, [pc, #116]	@ (800405c <vTaskSwitchContext+0xc0>)
 8003fe6:	68fa      	ldr	r2, [r7, #12]
 8003fe8:	4613      	mov	r3, r2
 8003fea:	009b      	lsls	r3, r3, #2
 8003fec:	4413      	add	r3, r2
 8003fee:	009b      	lsls	r3, r3, #2
 8003ff0:	440b      	add	r3, r1
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d0e3      	beq.n	8003fc0 <vTaskSwitchContext+0x24>
 8003ff8:	68fa      	ldr	r2, [r7, #12]
 8003ffa:	4613      	mov	r3, r2
 8003ffc:	009b      	lsls	r3, r3, #2
 8003ffe:	4413      	add	r3, r2
 8004000:	009b      	lsls	r3, r3, #2
 8004002:	4a16      	ldr	r2, [pc, #88]	@ (800405c <vTaskSwitchContext+0xc0>)
 8004004:	4413      	add	r3, r2
 8004006:	60bb      	str	r3, [r7, #8]
 8004008:	68bb      	ldr	r3, [r7, #8]
 800400a:	685b      	ldr	r3, [r3, #4]
 800400c:	685a      	ldr	r2, [r3, #4]
 800400e:	68bb      	ldr	r3, [r7, #8]
 8004010:	605a      	str	r2, [r3, #4]
 8004012:	68bb      	ldr	r3, [r7, #8]
 8004014:	685a      	ldr	r2, [r3, #4]
 8004016:	68bb      	ldr	r3, [r7, #8]
 8004018:	3308      	adds	r3, #8
 800401a:	429a      	cmp	r2, r3
 800401c:	d104      	bne.n	8004028 <vTaskSwitchContext+0x8c>
 800401e:	68bb      	ldr	r3, [r7, #8]
 8004020:	685b      	ldr	r3, [r3, #4]
 8004022:	685a      	ldr	r2, [r3, #4]
 8004024:	68bb      	ldr	r3, [r7, #8]
 8004026:	605a      	str	r2, [r3, #4]
 8004028:	68bb      	ldr	r3, [r7, #8]
 800402a:	685b      	ldr	r3, [r3, #4]
 800402c:	68db      	ldr	r3, [r3, #12]
 800402e:	4a0c      	ldr	r2, [pc, #48]	@ (8004060 <vTaskSwitchContext+0xc4>)
 8004030:	6013      	str	r3, [r2, #0]
 8004032:	4a09      	ldr	r2, [pc, #36]	@ (8004058 <vTaskSwitchContext+0xbc>)
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004038:	4b09      	ldr	r3, [pc, #36]	@ (8004060 <vTaskSwitchContext+0xc4>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	3354      	adds	r3, #84	@ 0x54
 800403e:	4a09      	ldr	r2, [pc, #36]	@ (8004064 <vTaskSwitchContext+0xc8>)
 8004040:	6013      	str	r3, [r2, #0]
}
 8004042:	bf00      	nop
 8004044:	3714      	adds	r7, #20
 8004046:	46bd      	mov	sp, r7
 8004048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404c:	4770      	bx	lr
 800404e:	bf00      	nop
 8004050:	20000d68 	.word	0x20000d68
 8004054:	20000d54 	.word	0x20000d54
 8004058:	20000d48 	.word	0x20000d48
 800405c:	20000870 	.word	0x20000870
 8004060:	2000086c 	.word	0x2000086c
 8004064:	20000010 	.word	0x20000010

08004068 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b084      	sub	sp, #16
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
 8004070:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d10b      	bne.n	8004090 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8004078:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800407c:	f383 8811 	msr	BASEPRI, r3
 8004080:	f3bf 8f6f 	isb	sy
 8004084:	f3bf 8f4f 	dsb	sy
 8004088:	60fb      	str	r3, [r7, #12]
}
 800408a:	bf00      	nop
 800408c:	bf00      	nop
 800408e:	e7fd      	b.n	800408c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004090:	4b07      	ldr	r3, [pc, #28]	@ (80040b0 <vTaskPlaceOnEventList+0x48>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	3318      	adds	r3, #24
 8004096:	4619      	mov	r1, r3
 8004098:	6878      	ldr	r0, [r7, #4]
 800409a:	f7fe fb16 	bl	80026ca <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800409e:	2101      	movs	r1, #1
 80040a0:	6838      	ldr	r0, [r7, #0]
 80040a2:	f000 fb87 	bl	80047b4 <prvAddCurrentTaskToDelayedList>
}
 80040a6:	bf00      	nop
 80040a8:	3710      	adds	r7, #16
 80040aa:	46bd      	mov	sp, r7
 80040ac:	bd80      	pop	{r7, pc}
 80040ae:	bf00      	nop
 80040b0:	2000086c 	.word	0x2000086c

080040b4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b086      	sub	sp, #24
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	60f8      	str	r0, [r7, #12]
 80040bc:	60b9      	str	r1, [r7, #8]
 80040be:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d10b      	bne.n	80040de <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80040c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040ca:	f383 8811 	msr	BASEPRI, r3
 80040ce:	f3bf 8f6f 	isb	sy
 80040d2:	f3bf 8f4f 	dsb	sy
 80040d6:	617b      	str	r3, [r7, #20]
}
 80040d8:	bf00      	nop
 80040da:	bf00      	nop
 80040dc:	e7fd      	b.n	80040da <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80040de:	4b0a      	ldr	r3, [pc, #40]	@ (8004108 <vTaskPlaceOnEventListRestricted+0x54>)
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	3318      	adds	r3, #24
 80040e4:	4619      	mov	r1, r3
 80040e6:	68f8      	ldr	r0, [r7, #12]
 80040e8:	f7fe facb 	bl	8002682 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d002      	beq.n	80040f8 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80040f2:	f04f 33ff 	mov.w	r3, #4294967295
 80040f6:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80040f8:	6879      	ldr	r1, [r7, #4]
 80040fa:	68b8      	ldr	r0, [r7, #8]
 80040fc:	f000 fb5a 	bl	80047b4 <prvAddCurrentTaskToDelayedList>
	}
 8004100:	bf00      	nop
 8004102:	3718      	adds	r7, #24
 8004104:	46bd      	mov	sp, r7
 8004106:	bd80      	pop	{r7, pc}
 8004108:	2000086c 	.word	0x2000086c

0800410c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b086      	sub	sp, #24
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	68db      	ldr	r3, [r3, #12]
 8004118:	68db      	ldr	r3, [r3, #12]
 800411a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800411c:	693b      	ldr	r3, [r7, #16]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d10b      	bne.n	800413a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8004122:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004126:	f383 8811 	msr	BASEPRI, r3
 800412a:	f3bf 8f6f 	isb	sy
 800412e:	f3bf 8f4f 	dsb	sy
 8004132:	60fb      	str	r3, [r7, #12]
}
 8004134:	bf00      	nop
 8004136:	bf00      	nop
 8004138:	e7fd      	b.n	8004136 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800413a:	693b      	ldr	r3, [r7, #16]
 800413c:	3318      	adds	r3, #24
 800413e:	4618      	mov	r0, r3
 8004140:	f7fe fafc 	bl	800273c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004144:	4b1d      	ldr	r3, [pc, #116]	@ (80041bc <xTaskRemoveFromEventList+0xb0>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	2b00      	cmp	r3, #0
 800414a:	d11d      	bne.n	8004188 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800414c:	693b      	ldr	r3, [r7, #16]
 800414e:	3304      	adds	r3, #4
 8004150:	4618      	mov	r0, r3
 8004152:	f7fe faf3 	bl	800273c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004156:	693b      	ldr	r3, [r7, #16]
 8004158:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800415a:	4b19      	ldr	r3, [pc, #100]	@ (80041c0 <xTaskRemoveFromEventList+0xb4>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	429a      	cmp	r2, r3
 8004160:	d903      	bls.n	800416a <xTaskRemoveFromEventList+0x5e>
 8004162:	693b      	ldr	r3, [r7, #16]
 8004164:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004166:	4a16      	ldr	r2, [pc, #88]	@ (80041c0 <xTaskRemoveFromEventList+0xb4>)
 8004168:	6013      	str	r3, [r2, #0]
 800416a:	693b      	ldr	r3, [r7, #16]
 800416c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800416e:	4613      	mov	r3, r2
 8004170:	009b      	lsls	r3, r3, #2
 8004172:	4413      	add	r3, r2
 8004174:	009b      	lsls	r3, r3, #2
 8004176:	4a13      	ldr	r2, [pc, #76]	@ (80041c4 <xTaskRemoveFromEventList+0xb8>)
 8004178:	441a      	add	r2, r3
 800417a:	693b      	ldr	r3, [r7, #16]
 800417c:	3304      	adds	r3, #4
 800417e:	4619      	mov	r1, r3
 8004180:	4610      	mov	r0, r2
 8004182:	f7fe fa7e 	bl	8002682 <vListInsertEnd>
 8004186:	e005      	b.n	8004194 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004188:	693b      	ldr	r3, [r7, #16]
 800418a:	3318      	adds	r3, #24
 800418c:	4619      	mov	r1, r3
 800418e:	480e      	ldr	r0, [pc, #56]	@ (80041c8 <xTaskRemoveFromEventList+0xbc>)
 8004190:	f7fe fa77 	bl	8002682 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004194:	693b      	ldr	r3, [r7, #16]
 8004196:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004198:	4b0c      	ldr	r3, [pc, #48]	@ (80041cc <xTaskRemoveFromEventList+0xc0>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800419e:	429a      	cmp	r2, r3
 80041a0:	d905      	bls.n	80041ae <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80041a2:	2301      	movs	r3, #1
 80041a4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80041a6:	4b0a      	ldr	r3, [pc, #40]	@ (80041d0 <xTaskRemoveFromEventList+0xc4>)
 80041a8:	2201      	movs	r2, #1
 80041aa:	601a      	str	r2, [r3, #0]
 80041ac:	e001      	b.n	80041b2 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80041ae:	2300      	movs	r3, #0
 80041b0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80041b2:	697b      	ldr	r3, [r7, #20]
}
 80041b4:	4618      	mov	r0, r3
 80041b6:	3718      	adds	r7, #24
 80041b8:	46bd      	mov	sp, r7
 80041ba:	bd80      	pop	{r7, pc}
 80041bc:	20000d68 	.word	0x20000d68
 80041c0:	20000d48 	.word	0x20000d48
 80041c4:	20000870 	.word	0x20000870
 80041c8:	20000d00 	.word	0x20000d00
 80041cc:	2000086c 	.word	0x2000086c
 80041d0:	20000d54 	.word	0x20000d54

080041d4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80041d4:	b480      	push	{r7}
 80041d6:	b083      	sub	sp, #12
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80041dc:	4b06      	ldr	r3, [pc, #24]	@ (80041f8 <vTaskInternalSetTimeOutState+0x24>)
 80041de:	681a      	ldr	r2, [r3, #0]
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80041e4:	4b05      	ldr	r3, [pc, #20]	@ (80041fc <vTaskInternalSetTimeOutState+0x28>)
 80041e6:	681a      	ldr	r2, [r3, #0]
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	605a      	str	r2, [r3, #4]
}
 80041ec:	bf00      	nop
 80041ee:	370c      	adds	r7, #12
 80041f0:	46bd      	mov	sp, r7
 80041f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f6:	4770      	bx	lr
 80041f8:	20000d58 	.word	0x20000d58
 80041fc:	20000d44 	.word	0x20000d44

08004200 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b088      	sub	sp, #32
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
 8004208:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d10b      	bne.n	8004228 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8004210:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004214:	f383 8811 	msr	BASEPRI, r3
 8004218:	f3bf 8f6f 	isb	sy
 800421c:	f3bf 8f4f 	dsb	sy
 8004220:	613b      	str	r3, [r7, #16]
}
 8004222:	bf00      	nop
 8004224:	bf00      	nop
 8004226:	e7fd      	b.n	8004224 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d10b      	bne.n	8004246 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800422e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004232:	f383 8811 	msr	BASEPRI, r3
 8004236:	f3bf 8f6f 	isb	sy
 800423a:	f3bf 8f4f 	dsb	sy
 800423e:	60fb      	str	r3, [r7, #12]
}
 8004240:	bf00      	nop
 8004242:	bf00      	nop
 8004244:	e7fd      	b.n	8004242 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8004246:	f000 ff97 	bl	8005178 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800424a:	4b1d      	ldr	r3, [pc, #116]	@ (80042c0 <xTaskCheckForTimeOut+0xc0>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	685b      	ldr	r3, [r3, #4]
 8004254:	69ba      	ldr	r2, [r7, #24]
 8004256:	1ad3      	subs	r3, r2, r3
 8004258:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004262:	d102      	bne.n	800426a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004264:	2300      	movs	r3, #0
 8004266:	61fb      	str	r3, [r7, #28]
 8004268:	e023      	b.n	80042b2 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681a      	ldr	r2, [r3, #0]
 800426e:	4b15      	ldr	r3, [pc, #84]	@ (80042c4 <xTaskCheckForTimeOut+0xc4>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	429a      	cmp	r2, r3
 8004274:	d007      	beq.n	8004286 <xTaskCheckForTimeOut+0x86>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	685b      	ldr	r3, [r3, #4]
 800427a:	69ba      	ldr	r2, [r7, #24]
 800427c:	429a      	cmp	r2, r3
 800427e:	d302      	bcc.n	8004286 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004280:	2301      	movs	r3, #1
 8004282:	61fb      	str	r3, [r7, #28]
 8004284:	e015      	b.n	80042b2 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	697a      	ldr	r2, [r7, #20]
 800428c:	429a      	cmp	r2, r3
 800428e:	d20b      	bcs.n	80042a8 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	681a      	ldr	r2, [r3, #0]
 8004294:	697b      	ldr	r3, [r7, #20]
 8004296:	1ad2      	subs	r2, r2, r3
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800429c:	6878      	ldr	r0, [r7, #4]
 800429e:	f7ff ff99 	bl	80041d4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80042a2:	2300      	movs	r3, #0
 80042a4:	61fb      	str	r3, [r7, #28]
 80042a6:	e004      	b.n	80042b2 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	2200      	movs	r2, #0
 80042ac:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80042ae:	2301      	movs	r3, #1
 80042b0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80042b2:	f000 ff93 	bl	80051dc <vPortExitCritical>

	return xReturn;
 80042b6:	69fb      	ldr	r3, [r7, #28]
}
 80042b8:	4618      	mov	r0, r3
 80042ba:	3720      	adds	r7, #32
 80042bc:	46bd      	mov	sp, r7
 80042be:	bd80      	pop	{r7, pc}
 80042c0:	20000d44 	.word	0x20000d44
 80042c4:	20000d58 	.word	0x20000d58

080042c8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80042c8:	b480      	push	{r7}
 80042ca:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80042cc:	4b03      	ldr	r3, [pc, #12]	@ (80042dc <vTaskMissedYield+0x14>)
 80042ce:	2201      	movs	r2, #1
 80042d0:	601a      	str	r2, [r3, #0]
}
 80042d2:	bf00      	nop
 80042d4:	46bd      	mov	sp, r7
 80042d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042da:	4770      	bx	lr
 80042dc:	20000d54 	.word	0x20000d54

080042e0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b082      	sub	sp, #8
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80042e8:	f000 f852 	bl	8004390 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80042ec:	4b06      	ldr	r3, [pc, #24]	@ (8004308 <prvIdleTask+0x28>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	2b01      	cmp	r3, #1
 80042f2:	d9f9      	bls.n	80042e8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80042f4:	4b05      	ldr	r3, [pc, #20]	@ (800430c <prvIdleTask+0x2c>)
 80042f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80042fa:	601a      	str	r2, [r3, #0]
 80042fc:	f3bf 8f4f 	dsb	sy
 8004300:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004304:	e7f0      	b.n	80042e8 <prvIdleTask+0x8>
 8004306:	bf00      	nop
 8004308:	20000870 	.word	0x20000870
 800430c:	e000ed04 	.word	0xe000ed04

08004310 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b082      	sub	sp, #8
 8004314:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004316:	2300      	movs	r3, #0
 8004318:	607b      	str	r3, [r7, #4]
 800431a:	e00c      	b.n	8004336 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800431c:	687a      	ldr	r2, [r7, #4]
 800431e:	4613      	mov	r3, r2
 8004320:	009b      	lsls	r3, r3, #2
 8004322:	4413      	add	r3, r2
 8004324:	009b      	lsls	r3, r3, #2
 8004326:	4a12      	ldr	r2, [pc, #72]	@ (8004370 <prvInitialiseTaskLists+0x60>)
 8004328:	4413      	add	r3, r2
 800432a:	4618      	mov	r0, r3
 800432c:	f7fe f97c 	bl	8002628 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	3301      	adds	r3, #1
 8004334:	607b      	str	r3, [r7, #4]
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2b37      	cmp	r3, #55	@ 0x37
 800433a:	d9ef      	bls.n	800431c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800433c:	480d      	ldr	r0, [pc, #52]	@ (8004374 <prvInitialiseTaskLists+0x64>)
 800433e:	f7fe f973 	bl	8002628 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004342:	480d      	ldr	r0, [pc, #52]	@ (8004378 <prvInitialiseTaskLists+0x68>)
 8004344:	f7fe f970 	bl	8002628 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004348:	480c      	ldr	r0, [pc, #48]	@ (800437c <prvInitialiseTaskLists+0x6c>)
 800434a:	f7fe f96d 	bl	8002628 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800434e:	480c      	ldr	r0, [pc, #48]	@ (8004380 <prvInitialiseTaskLists+0x70>)
 8004350:	f7fe f96a 	bl	8002628 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004354:	480b      	ldr	r0, [pc, #44]	@ (8004384 <prvInitialiseTaskLists+0x74>)
 8004356:	f7fe f967 	bl	8002628 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800435a:	4b0b      	ldr	r3, [pc, #44]	@ (8004388 <prvInitialiseTaskLists+0x78>)
 800435c:	4a05      	ldr	r2, [pc, #20]	@ (8004374 <prvInitialiseTaskLists+0x64>)
 800435e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004360:	4b0a      	ldr	r3, [pc, #40]	@ (800438c <prvInitialiseTaskLists+0x7c>)
 8004362:	4a05      	ldr	r2, [pc, #20]	@ (8004378 <prvInitialiseTaskLists+0x68>)
 8004364:	601a      	str	r2, [r3, #0]
}
 8004366:	bf00      	nop
 8004368:	3708      	adds	r7, #8
 800436a:	46bd      	mov	sp, r7
 800436c:	bd80      	pop	{r7, pc}
 800436e:	bf00      	nop
 8004370:	20000870 	.word	0x20000870
 8004374:	20000cd0 	.word	0x20000cd0
 8004378:	20000ce4 	.word	0x20000ce4
 800437c:	20000d00 	.word	0x20000d00
 8004380:	20000d14 	.word	0x20000d14
 8004384:	20000d2c 	.word	0x20000d2c
 8004388:	20000cf8 	.word	0x20000cf8
 800438c:	20000cfc 	.word	0x20000cfc

08004390 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004390:	b580      	push	{r7, lr}
 8004392:	b082      	sub	sp, #8
 8004394:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004396:	e019      	b.n	80043cc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004398:	f000 feee 	bl	8005178 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800439c:	4b10      	ldr	r3, [pc, #64]	@ (80043e0 <prvCheckTasksWaitingTermination+0x50>)
 800439e:	68db      	ldr	r3, [r3, #12]
 80043a0:	68db      	ldr	r3, [r3, #12]
 80043a2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	3304      	adds	r3, #4
 80043a8:	4618      	mov	r0, r3
 80043aa:	f7fe f9c7 	bl	800273c <uxListRemove>
				--uxCurrentNumberOfTasks;
 80043ae:	4b0d      	ldr	r3, [pc, #52]	@ (80043e4 <prvCheckTasksWaitingTermination+0x54>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	3b01      	subs	r3, #1
 80043b4:	4a0b      	ldr	r2, [pc, #44]	@ (80043e4 <prvCheckTasksWaitingTermination+0x54>)
 80043b6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80043b8:	4b0b      	ldr	r3, [pc, #44]	@ (80043e8 <prvCheckTasksWaitingTermination+0x58>)
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	3b01      	subs	r3, #1
 80043be:	4a0a      	ldr	r2, [pc, #40]	@ (80043e8 <prvCheckTasksWaitingTermination+0x58>)
 80043c0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80043c2:	f000 ff0b 	bl	80051dc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80043c6:	6878      	ldr	r0, [r7, #4]
 80043c8:	f000 f810 	bl	80043ec <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80043cc:	4b06      	ldr	r3, [pc, #24]	@ (80043e8 <prvCheckTasksWaitingTermination+0x58>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d1e1      	bne.n	8004398 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80043d4:	bf00      	nop
 80043d6:	bf00      	nop
 80043d8:	3708      	adds	r7, #8
 80043da:	46bd      	mov	sp, r7
 80043dc:	bd80      	pop	{r7, pc}
 80043de:	bf00      	nop
 80043e0:	20000d14 	.word	0x20000d14
 80043e4:	20000d40 	.word	0x20000d40
 80043e8:	20000d28 	.word	0x20000d28

080043ec <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b084      	sub	sp, #16
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	3354      	adds	r3, #84	@ 0x54
 80043f8:	4618      	mov	r0, r3
 80043fa:	f001 f9d5 	bl	80057a8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8004404:	2b00      	cmp	r3, #0
 8004406:	d108      	bne.n	800441a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800440c:	4618      	mov	r0, r3
 800440e:	f001 f8a3 	bl	8005558 <vPortFree>
				vPortFree( pxTCB );
 8004412:	6878      	ldr	r0, [r7, #4]
 8004414:	f001 f8a0 	bl	8005558 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004418:	e019      	b.n	800444e <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8004420:	2b01      	cmp	r3, #1
 8004422:	d103      	bne.n	800442c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004424:	6878      	ldr	r0, [r7, #4]
 8004426:	f001 f897 	bl	8005558 <vPortFree>
	}
 800442a:	e010      	b.n	800444e <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8004432:	2b02      	cmp	r3, #2
 8004434:	d00b      	beq.n	800444e <prvDeleteTCB+0x62>
	__asm volatile
 8004436:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800443a:	f383 8811 	msr	BASEPRI, r3
 800443e:	f3bf 8f6f 	isb	sy
 8004442:	f3bf 8f4f 	dsb	sy
 8004446:	60fb      	str	r3, [r7, #12]
}
 8004448:	bf00      	nop
 800444a:	bf00      	nop
 800444c:	e7fd      	b.n	800444a <prvDeleteTCB+0x5e>
	}
 800444e:	bf00      	nop
 8004450:	3710      	adds	r7, #16
 8004452:	46bd      	mov	sp, r7
 8004454:	bd80      	pop	{r7, pc}
	...

08004458 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004458:	b480      	push	{r7}
 800445a:	b083      	sub	sp, #12
 800445c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800445e:	4b0c      	ldr	r3, [pc, #48]	@ (8004490 <prvResetNextTaskUnblockTime+0x38>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	2b00      	cmp	r3, #0
 8004466:	d104      	bne.n	8004472 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004468:	4b0a      	ldr	r3, [pc, #40]	@ (8004494 <prvResetNextTaskUnblockTime+0x3c>)
 800446a:	f04f 32ff 	mov.w	r2, #4294967295
 800446e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004470:	e008      	b.n	8004484 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004472:	4b07      	ldr	r3, [pc, #28]	@ (8004490 <prvResetNextTaskUnblockTime+0x38>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	68db      	ldr	r3, [r3, #12]
 8004478:	68db      	ldr	r3, [r3, #12]
 800447a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	685b      	ldr	r3, [r3, #4]
 8004480:	4a04      	ldr	r2, [pc, #16]	@ (8004494 <prvResetNextTaskUnblockTime+0x3c>)
 8004482:	6013      	str	r3, [r2, #0]
}
 8004484:	bf00      	nop
 8004486:	370c      	adds	r7, #12
 8004488:	46bd      	mov	sp, r7
 800448a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448e:	4770      	bx	lr
 8004490:	20000cf8 	.word	0x20000cf8
 8004494:	20000d60 	.word	0x20000d60

08004498 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004498:	b480      	push	{r7}
 800449a:	b083      	sub	sp, #12
 800449c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800449e:	4b0b      	ldr	r3, [pc, #44]	@ (80044cc <xTaskGetSchedulerState+0x34>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d102      	bne.n	80044ac <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80044a6:	2301      	movs	r3, #1
 80044a8:	607b      	str	r3, [r7, #4]
 80044aa:	e008      	b.n	80044be <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80044ac:	4b08      	ldr	r3, [pc, #32]	@ (80044d0 <xTaskGetSchedulerState+0x38>)
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d102      	bne.n	80044ba <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80044b4:	2302      	movs	r3, #2
 80044b6:	607b      	str	r3, [r7, #4]
 80044b8:	e001      	b.n	80044be <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80044ba:	2300      	movs	r3, #0
 80044bc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80044be:	687b      	ldr	r3, [r7, #4]
	}
 80044c0:	4618      	mov	r0, r3
 80044c2:	370c      	adds	r7, #12
 80044c4:	46bd      	mov	sp, r7
 80044c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ca:	4770      	bx	lr
 80044cc:	20000d4c 	.word	0x20000d4c
 80044d0:	20000d68 	.word	0x20000d68

080044d4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b084      	sub	sp, #16
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80044e0:	2300      	movs	r3, #0
 80044e2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d051      	beq.n	800458e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80044ea:	68bb      	ldr	r3, [r7, #8]
 80044ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80044ee:	4b2a      	ldr	r3, [pc, #168]	@ (8004598 <xTaskPriorityInherit+0xc4>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044f4:	429a      	cmp	r2, r3
 80044f6:	d241      	bcs.n	800457c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80044f8:	68bb      	ldr	r3, [r7, #8]
 80044fa:	699b      	ldr	r3, [r3, #24]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	db06      	blt.n	800450e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004500:	4b25      	ldr	r3, [pc, #148]	@ (8004598 <xTaskPriorityInherit+0xc4>)
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004506:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800450a:	68bb      	ldr	r3, [r7, #8]
 800450c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800450e:	68bb      	ldr	r3, [r7, #8]
 8004510:	6959      	ldr	r1, [r3, #20]
 8004512:	68bb      	ldr	r3, [r7, #8]
 8004514:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004516:	4613      	mov	r3, r2
 8004518:	009b      	lsls	r3, r3, #2
 800451a:	4413      	add	r3, r2
 800451c:	009b      	lsls	r3, r3, #2
 800451e:	4a1f      	ldr	r2, [pc, #124]	@ (800459c <xTaskPriorityInherit+0xc8>)
 8004520:	4413      	add	r3, r2
 8004522:	4299      	cmp	r1, r3
 8004524:	d122      	bne.n	800456c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004526:	68bb      	ldr	r3, [r7, #8]
 8004528:	3304      	adds	r3, #4
 800452a:	4618      	mov	r0, r3
 800452c:	f7fe f906 	bl	800273c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004530:	4b19      	ldr	r3, [pc, #100]	@ (8004598 <xTaskPriorityInherit+0xc4>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004536:	68bb      	ldr	r3, [r7, #8]
 8004538:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800453a:	68bb      	ldr	r3, [r7, #8]
 800453c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800453e:	4b18      	ldr	r3, [pc, #96]	@ (80045a0 <xTaskPriorityInherit+0xcc>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	429a      	cmp	r2, r3
 8004544:	d903      	bls.n	800454e <xTaskPriorityInherit+0x7a>
 8004546:	68bb      	ldr	r3, [r7, #8]
 8004548:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800454a:	4a15      	ldr	r2, [pc, #84]	@ (80045a0 <xTaskPriorityInherit+0xcc>)
 800454c:	6013      	str	r3, [r2, #0]
 800454e:	68bb      	ldr	r3, [r7, #8]
 8004550:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004552:	4613      	mov	r3, r2
 8004554:	009b      	lsls	r3, r3, #2
 8004556:	4413      	add	r3, r2
 8004558:	009b      	lsls	r3, r3, #2
 800455a:	4a10      	ldr	r2, [pc, #64]	@ (800459c <xTaskPriorityInherit+0xc8>)
 800455c:	441a      	add	r2, r3
 800455e:	68bb      	ldr	r3, [r7, #8]
 8004560:	3304      	adds	r3, #4
 8004562:	4619      	mov	r1, r3
 8004564:	4610      	mov	r0, r2
 8004566:	f7fe f88c 	bl	8002682 <vListInsertEnd>
 800456a:	e004      	b.n	8004576 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800456c:	4b0a      	ldr	r3, [pc, #40]	@ (8004598 <xTaskPriorityInherit+0xc4>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004572:	68bb      	ldr	r3, [r7, #8]
 8004574:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8004576:	2301      	movs	r3, #1
 8004578:	60fb      	str	r3, [r7, #12]
 800457a:	e008      	b.n	800458e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800457c:	68bb      	ldr	r3, [r7, #8]
 800457e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004580:	4b05      	ldr	r3, [pc, #20]	@ (8004598 <xTaskPriorityInherit+0xc4>)
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004586:	429a      	cmp	r2, r3
 8004588:	d201      	bcs.n	800458e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800458a:	2301      	movs	r3, #1
 800458c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800458e:	68fb      	ldr	r3, [r7, #12]
	}
 8004590:	4618      	mov	r0, r3
 8004592:	3710      	adds	r7, #16
 8004594:	46bd      	mov	sp, r7
 8004596:	bd80      	pop	{r7, pc}
 8004598:	2000086c 	.word	0x2000086c
 800459c:	20000870 	.word	0x20000870
 80045a0:	20000d48 	.word	0x20000d48

080045a4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b086      	sub	sp, #24
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80045b0:	2300      	movs	r3, #0
 80045b2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d058      	beq.n	800466c <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80045ba:	4b2f      	ldr	r3, [pc, #188]	@ (8004678 <xTaskPriorityDisinherit+0xd4>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	693a      	ldr	r2, [r7, #16]
 80045c0:	429a      	cmp	r2, r3
 80045c2:	d00b      	beq.n	80045dc <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80045c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045c8:	f383 8811 	msr	BASEPRI, r3
 80045cc:	f3bf 8f6f 	isb	sy
 80045d0:	f3bf 8f4f 	dsb	sy
 80045d4:	60fb      	str	r3, [r7, #12]
}
 80045d6:	bf00      	nop
 80045d8:	bf00      	nop
 80045da:	e7fd      	b.n	80045d8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80045dc:	693b      	ldr	r3, [r7, #16]
 80045de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d10b      	bne.n	80045fc <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80045e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045e8:	f383 8811 	msr	BASEPRI, r3
 80045ec:	f3bf 8f6f 	isb	sy
 80045f0:	f3bf 8f4f 	dsb	sy
 80045f4:	60bb      	str	r3, [r7, #8]
}
 80045f6:	bf00      	nop
 80045f8:	bf00      	nop
 80045fa:	e7fd      	b.n	80045f8 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80045fc:	693b      	ldr	r3, [r7, #16]
 80045fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004600:	1e5a      	subs	r2, r3, #1
 8004602:	693b      	ldr	r3, [r7, #16]
 8004604:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004606:	693b      	ldr	r3, [r7, #16]
 8004608:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800460a:	693b      	ldr	r3, [r7, #16]
 800460c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800460e:	429a      	cmp	r2, r3
 8004610:	d02c      	beq.n	800466c <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004612:	693b      	ldr	r3, [r7, #16]
 8004614:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004616:	2b00      	cmp	r3, #0
 8004618:	d128      	bne.n	800466c <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800461a:	693b      	ldr	r3, [r7, #16]
 800461c:	3304      	adds	r3, #4
 800461e:	4618      	mov	r0, r3
 8004620:	f7fe f88c 	bl	800273c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004624:	693b      	ldr	r3, [r7, #16]
 8004626:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004628:	693b      	ldr	r3, [r7, #16]
 800462a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800462c:	693b      	ldr	r3, [r7, #16]
 800462e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004630:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8004634:	693b      	ldr	r3, [r7, #16]
 8004636:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004638:	693b      	ldr	r3, [r7, #16]
 800463a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800463c:	4b0f      	ldr	r3, [pc, #60]	@ (800467c <xTaskPriorityDisinherit+0xd8>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	429a      	cmp	r2, r3
 8004642:	d903      	bls.n	800464c <xTaskPriorityDisinherit+0xa8>
 8004644:	693b      	ldr	r3, [r7, #16]
 8004646:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004648:	4a0c      	ldr	r2, [pc, #48]	@ (800467c <xTaskPriorityDisinherit+0xd8>)
 800464a:	6013      	str	r3, [r2, #0]
 800464c:	693b      	ldr	r3, [r7, #16]
 800464e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004650:	4613      	mov	r3, r2
 8004652:	009b      	lsls	r3, r3, #2
 8004654:	4413      	add	r3, r2
 8004656:	009b      	lsls	r3, r3, #2
 8004658:	4a09      	ldr	r2, [pc, #36]	@ (8004680 <xTaskPriorityDisinherit+0xdc>)
 800465a:	441a      	add	r2, r3
 800465c:	693b      	ldr	r3, [r7, #16]
 800465e:	3304      	adds	r3, #4
 8004660:	4619      	mov	r1, r3
 8004662:	4610      	mov	r0, r2
 8004664:	f7fe f80d 	bl	8002682 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004668:	2301      	movs	r3, #1
 800466a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800466c:	697b      	ldr	r3, [r7, #20]
	}
 800466e:	4618      	mov	r0, r3
 8004670:	3718      	adds	r7, #24
 8004672:	46bd      	mov	sp, r7
 8004674:	bd80      	pop	{r7, pc}
 8004676:	bf00      	nop
 8004678:	2000086c 	.word	0x2000086c
 800467c:	20000d48 	.word	0x20000d48
 8004680:	20000870 	.word	0x20000870

08004684 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8004684:	b580      	push	{r7, lr}
 8004686:	b088      	sub	sp, #32
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
 800468c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8004692:	2301      	movs	r3, #1
 8004694:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d06c      	beq.n	8004776 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800469c:	69bb      	ldr	r3, [r7, #24]
 800469e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d10b      	bne.n	80046bc <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 80046a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046a8:	f383 8811 	msr	BASEPRI, r3
 80046ac:	f3bf 8f6f 	isb	sy
 80046b0:	f3bf 8f4f 	dsb	sy
 80046b4:	60fb      	str	r3, [r7, #12]
}
 80046b6:	bf00      	nop
 80046b8:	bf00      	nop
 80046ba:	e7fd      	b.n	80046b8 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80046bc:	69bb      	ldr	r3, [r7, #24]
 80046be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80046c0:	683a      	ldr	r2, [r7, #0]
 80046c2:	429a      	cmp	r2, r3
 80046c4:	d902      	bls.n	80046cc <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	61fb      	str	r3, [r7, #28]
 80046ca:	e002      	b.n	80046d2 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80046cc:	69bb      	ldr	r3, [r7, #24]
 80046ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80046d0:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80046d2:	69bb      	ldr	r3, [r7, #24]
 80046d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046d6:	69fa      	ldr	r2, [r7, #28]
 80046d8:	429a      	cmp	r2, r3
 80046da:	d04c      	beq.n	8004776 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80046dc:	69bb      	ldr	r3, [r7, #24]
 80046de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80046e0:	697a      	ldr	r2, [r7, #20]
 80046e2:	429a      	cmp	r2, r3
 80046e4:	d147      	bne.n	8004776 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80046e6:	4b26      	ldr	r3, [pc, #152]	@ (8004780 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	69ba      	ldr	r2, [r7, #24]
 80046ec:	429a      	cmp	r2, r3
 80046ee:	d10b      	bne.n	8004708 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 80046f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046f4:	f383 8811 	msr	BASEPRI, r3
 80046f8:	f3bf 8f6f 	isb	sy
 80046fc:	f3bf 8f4f 	dsb	sy
 8004700:	60bb      	str	r3, [r7, #8]
}
 8004702:	bf00      	nop
 8004704:	bf00      	nop
 8004706:	e7fd      	b.n	8004704 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8004708:	69bb      	ldr	r3, [r7, #24]
 800470a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800470c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800470e:	69bb      	ldr	r3, [r7, #24]
 8004710:	69fa      	ldr	r2, [r7, #28]
 8004712:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004714:	69bb      	ldr	r3, [r7, #24]
 8004716:	699b      	ldr	r3, [r3, #24]
 8004718:	2b00      	cmp	r3, #0
 800471a:	db04      	blt.n	8004726 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800471c:	69fb      	ldr	r3, [r7, #28]
 800471e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8004722:	69bb      	ldr	r3, [r7, #24]
 8004724:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8004726:	69bb      	ldr	r3, [r7, #24]
 8004728:	6959      	ldr	r1, [r3, #20]
 800472a:	693a      	ldr	r2, [r7, #16]
 800472c:	4613      	mov	r3, r2
 800472e:	009b      	lsls	r3, r3, #2
 8004730:	4413      	add	r3, r2
 8004732:	009b      	lsls	r3, r3, #2
 8004734:	4a13      	ldr	r2, [pc, #76]	@ (8004784 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8004736:	4413      	add	r3, r2
 8004738:	4299      	cmp	r1, r3
 800473a:	d11c      	bne.n	8004776 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800473c:	69bb      	ldr	r3, [r7, #24]
 800473e:	3304      	adds	r3, #4
 8004740:	4618      	mov	r0, r3
 8004742:	f7fd fffb 	bl	800273c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8004746:	69bb      	ldr	r3, [r7, #24]
 8004748:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800474a:	4b0f      	ldr	r3, [pc, #60]	@ (8004788 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	429a      	cmp	r2, r3
 8004750:	d903      	bls.n	800475a <vTaskPriorityDisinheritAfterTimeout+0xd6>
 8004752:	69bb      	ldr	r3, [r7, #24]
 8004754:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004756:	4a0c      	ldr	r2, [pc, #48]	@ (8004788 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8004758:	6013      	str	r3, [r2, #0]
 800475a:	69bb      	ldr	r3, [r7, #24]
 800475c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800475e:	4613      	mov	r3, r2
 8004760:	009b      	lsls	r3, r3, #2
 8004762:	4413      	add	r3, r2
 8004764:	009b      	lsls	r3, r3, #2
 8004766:	4a07      	ldr	r2, [pc, #28]	@ (8004784 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8004768:	441a      	add	r2, r3
 800476a:	69bb      	ldr	r3, [r7, #24]
 800476c:	3304      	adds	r3, #4
 800476e:	4619      	mov	r1, r3
 8004770:	4610      	mov	r0, r2
 8004772:	f7fd ff86 	bl	8002682 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004776:	bf00      	nop
 8004778:	3720      	adds	r7, #32
 800477a:	46bd      	mov	sp, r7
 800477c:	bd80      	pop	{r7, pc}
 800477e:	bf00      	nop
 8004780:	2000086c 	.word	0x2000086c
 8004784:	20000870 	.word	0x20000870
 8004788:	20000d48 	.word	0x20000d48

0800478c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800478c:	b480      	push	{r7}
 800478e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8004790:	4b07      	ldr	r3, [pc, #28]	@ (80047b0 <pvTaskIncrementMutexHeldCount+0x24>)
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d004      	beq.n	80047a2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8004798:	4b05      	ldr	r3, [pc, #20]	@ (80047b0 <pvTaskIncrementMutexHeldCount+0x24>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800479e:	3201      	adds	r2, #1
 80047a0:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 80047a2:	4b03      	ldr	r3, [pc, #12]	@ (80047b0 <pvTaskIncrementMutexHeldCount+0x24>)
 80047a4:	681b      	ldr	r3, [r3, #0]
	}
 80047a6:	4618      	mov	r0, r3
 80047a8:	46bd      	mov	sp, r7
 80047aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ae:	4770      	bx	lr
 80047b0:	2000086c 	.word	0x2000086c

080047b4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b084      	sub	sp, #16
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
 80047bc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80047be:	4b21      	ldr	r3, [pc, #132]	@ (8004844 <prvAddCurrentTaskToDelayedList+0x90>)
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80047c4:	4b20      	ldr	r3, [pc, #128]	@ (8004848 <prvAddCurrentTaskToDelayedList+0x94>)
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	3304      	adds	r3, #4
 80047ca:	4618      	mov	r0, r3
 80047cc:	f7fd ffb6 	bl	800273c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047d6:	d10a      	bne.n	80047ee <prvAddCurrentTaskToDelayedList+0x3a>
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d007      	beq.n	80047ee <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80047de:	4b1a      	ldr	r3, [pc, #104]	@ (8004848 <prvAddCurrentTaskToDelayedList+0x94>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	3304      	adds	r3, #4
 80047e4:	4619      	mov	r1, r3
 80047e6:	4819      	ldr	r0, [pc, #100]	@ (800484c <prvAddCurrentTaskToDelayedList+0x98>)
 80047e8:	f7fd ff4b 	bl	8002682 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80047ec:	e026      	b.n	800483c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80047ee:	68fa      	ldr	r2, [r7, #12]
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	4413      	add	r3, r2
 80047f4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80047f6:	4b14      	ldr	r3, [pc, #80]	@ (8004848 <prvAddCurrentTaskToDelayedList+0x94>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	68ba      	ldr	r2, [r7, #8]
 80047fc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80047fe:	68ba      	ldr	r2, [r7, #8]
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	429a      	cmp	r2, r3
 8004804:	d209      	bcs.n	800481a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004806:	4b12      	ldr	r3, [pc, #72]	@ (8004850 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004808:	681a      	ldr	r2, [r3, #0]
 800480a:	4b0f      	ldr	r3, [pc, #60]	@ (8004848 <prvAddCurrentTaskToDelayedList+0x94>)
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	3304      	adds	r3, #4
 8004810:	4619      	mov	r1, r3
 8004812:	4610      	mov	r0, r2
 8004814:	f7fd ff59 	bl	80026ca <vListInsert>
}
 8004818:	e010      	b.n	800483c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800481a:	4b0e      	ldr	r3, [pc, #56]	@ (8004854 <prvAddCurrentTaskToDelayedList+0xa0>)
 800481c:	681a      	ldr	r2, [r3, #0]
 800481e:	4b0a      	ldr	r3, [pc, #40]	@ (8004848 <prvAddCurrentTaskToDelayedList+0x94>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	3304      	adds	r3, #4
 8004824:	4619      	mov	r1, r3
 8004826:	4610      	mov	r0, r2
 8004828:	f7fd ff4f 	bl	80026ca <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800482c:	4b0a      	ldr	r3, [pc, #40]	@ (8004858 <prvAddCurrentTaskToDelayedList+0xa4>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	68ba      	ldr	r2, [r7, #8]
 8004832:	429a      	cmp	r2, r3
 8004834:	d202      	bcs.n	800483c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004836:	4a08      	ldr	r2, [pc, #32]	@ (8004858 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004838:	68bb      	ldr	r3, [r7, #8]
 800483a:	6013      	str	r3, [r2, #0]
}
 800483c:	bf00      	nop
 800483e:	3710      	adds	r7, #16
 8004840:	46bd      	mov	sp, r7
 8004842:	bd80      	pop	{r7, pc}
 8004844:	20000d44 	.word	0x20000d44
 8004848:	2000086c 	.word	0x2000086c
 800484c:	20000d2c 	.word	0x20000d2c
 8004850:	20000cfc 	.word	0x20000cfc
 8004854:	20000cf8 	.word	0x20000cf8
 8004858:	20000d60 	.word	0x20000d60

0800485c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800485c:	b580      	push	{r7, lr}
 800485e:	b08a      	sub	sp, #40	@ 0x28
 8004860:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004862:	2300      	movs	r3, #0
 8004864:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004866:	f000 fb13 	bl	8004e90 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800486a:	4b1d      	ldr	r3, [pc, #116]	@ (80048e0 <xTimerCreateTimerTask+0x84>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d021      	beq.n	80048b6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004872:	2300      	movs	r3, #0
 8004874:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004876:	2300      	movs	r3, #0
 8004878:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800487a:	1d3a      	adds	r2, r7, #4
 800487c:	f107 0108 	add.w	r1, r7, #8
 8004880:	f107 030c 	add.w	r3, r7, #12
 8004884:	4618      	mov	r0, r3
 8004886:	f7fd feb5 	bl	80025f4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800488a:	6879      	ldr	r1, [r7, #4]
 800488c:	68bb      	ldr	r3, [r7, #8]
 800488e:	68fa      	ldr	r2, [r7, #12]
 8004890:	9202      	str	r2, [sp, #8]
 8004892:	9301      	str	r3, [sp, #4]
 8004894:	2302      	movs	r3, #2
 8004896:	9300      	str	r3, [sp, #0]
 8004898:	2300      	movs	r3, #0
 800489a:	460a      	mov	r2, r1
 800489c:	4911      	ldr	r1, [pc, #68]	@ (80048e4 <xTimerCreateTimerTask+0x88>)
 800489e:	4812      	ldr	r0, [pc, #72]	@ (80048e8 <xTimerCreateTimerTask+0x8c>)
 80048a0:	f7fe ffa2 	bl	80037e8 <xTaskCreateStatic>
 80048a4:	4603      	mov	r3, r0
 80048a6:	4a11      	ldr	r2, [pc, #68]	@ (80048ec <xTimerCreateTimerTask+0x90>)
 80048a8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80048aa:	4b10      	ldr	r3, [pc, #64]	@ (80048ec <xTimerCreateTimerTask+0x90>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d001      	beq.n	80048b6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80048b2:	2301      	movs	r3, #1
 80048b4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80048b6:	697b      	ldr	r3, [r7, #20]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d10b      	bne.n	80048d4 <xTimerCreateTimerTask+0x78>
	__asm volatile
 80048bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048c0:	f383 8811 	msr	BASEPRI, r3
 80048c4:	f3bf 8f6f 	isb	sy
 80048c8:	f3bf 8f4f 	dsb	sy
 80048cc:	613b      	str	r3, [r7, #16]
}
 80048ce:	bf00      	nop
 80048d0:	bf00      	nop
 80048d2:	e7fd      	b.n	80048d0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80048d4:	697b      	ldr	r3, [r7, #20]
}
 80048d6:	4618      	mov	r0, r3
 80048d8:	3718      	adds	r7, #24
 80048da:	46bd      	mov	sp, r7
 80048dc:	bd80      	pop	{r7, pc}
 80048de:	bf00      	nop
 80048e0:	20000d9c 	.word	0x20000d9c
 80048e4:	080059b4 	.word	0x080059b4
 80048e8:	08004a29 	.word	0x08004a29
 80048ec:	20000da0 	.word	0x20000da0

080048f0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b08a      	sub	sp, #40	@ 0x28
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	60f8      	str	r0, [r7, #12]
 80048f8:	60b9      	str	r1, [r7, #8]
 80048fa:	607a      	str	r2, [r7, #4]
 80048fc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80048fe:	2300      	movs	r3, #0
 8004900:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d10b      	bne.n	8004920 <xTimerGenericCommand+0x30>
	__asm volatile
 8004908:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800490c:	f383 8811 	msr	BASEPRI, r3
 8004910:	f3bf 8f6f 	isb	sy
 8004914:	f3bf 8f4f 	dsb	sy
 8004918:	623b      	str	r3, [r7, #32]
}
 800491a:	bf00      	nop
 800491c:	bf00      	nop
 800491e:	e7fd      	b.n	800491c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004920:	4b19      	ldr	r3, [pc, #100]	@ (8004988 <xTimerGenericCommand+0x98>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	2b00      	cmp	r3, #0
 8004926:	d02a      	beq.n	800497e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004928:	68bb      	ldr	r3, [r7, #8]
 800492a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004934:	68bb      	ldr	r3, [r7, #8]
 8004936:	2b05      	cmp	r3, #5
 8004938:	dc18      	bgt.n	800496c <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800493a:	f7ff fdad 	bl	8004498 <xTaskGetSchedulerState>
 800493e:	4603      	mov	r3, r0
 8004940:	2b02      	cmp	r3, #2
 8004942:	d109      	bne.n	8004958 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004944:	4b10      	ldr	r3, [pc, #64]	@ (8004988 <xTimerGenericCommand+0x98>)
 8004946:	6818      	ldr	r0, [r3, #0]
 8004948:	f107 0110 	add.w	r1, r7, #16
 800494c:	2300      	movs	r3, #0
 800494e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004950:	f7fe f8d2 	bl	8002af8 <xQueueGenericSend>
 8004954:	6278      	str	r0, [r7, #36]	@ 0x24
 8004956:	e012      	b.n	800497e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004958:	4b0b      	ldr	r3, [pc, #44]	@ (8004988 <xTimerGenericCommand+0x98>)
 800495a:	6818      	ldr	r0, [r3, #0]
 800495c:	f107 0110 	add.w	r1, r7, #16
 8004960:	2300      	movs	r3, #0
 8004962:	2200      	movs	r2, #0
 8004964:	f7fe f8c8 	bl	8002af8 <xQueueGenericSend>
 8004968:	6278      	str	r0, [r7, #36]	@ 0x24
 800496a:	e008      	b.n	800497e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800496c:	4b06      	ldr	r3, [pc, #24]	@ (8004988 <xTimerGenericCommand+0x98>)
 800496e:	6818      	ldr	r0, [r3, #0]
 8004970:	f107 0110 	add.w	r1, r7, #16
 8004974:	2300      	movs	r3, #0
 8004976:	683a      	ldr	r2, [r7, #0]
 8004978:	f7fe f9c0 	bl	8002cfc <xQueueGenericSendFromISR>
 800497c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800497e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004980:	4618      	mov	r0, r3
 8004982:	3728      	adds	r7, #40	@ 0x28
 8004984:	46bd      	mov	sp, r7
 8004986:	bd80      	pop	{r7, pc}
 8004988:	20000d9c 	.word	0x20000d9c

0800498c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800498c:	b580      	push	{r7, lr}
 800498e:	b088      	sub	sp, #32
 8004990:	af02      	add	r7, sp, #8
 8004992:	6078      	str	r0, [r7, #4]
 8004994:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004996:	4b23      	ldr	r3, [pc, #140]	@ (8004a24 <prvProcessExpiredTimer+0x98>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	68db      	ldr	r3, [r3, #12]
 800499c:	68db      	ldr	r3, [r3, #12]
 800499e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80049a0:	697b      	ldr	r3, [r7, #20]
 80049a2:	3304      	adds	r3, #4
 80049a4:	4618      	mov	r0, r3
 80049a6:	f7fd fec9 	bl	800273c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80049aa:	697b      	ldr	r3, [r7, #20]
 80049ac:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80049b0:	f003 0304 	and.w	r3, r3, #4
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d023      	beq.n	8004a00 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80049b8:	697b      	ldr	r3, [r7, #20]
 80049ba:	699a      	ldr	r2, [r3, #24]
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	18d1      	adds	r1, r2, r3
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	683a      	ldr	r2, [r7, #0]
 80049c4:	6978      	ldr	r0, [r7, #20]
 80049c6:	f000 f8d5 	bl	8004b74 <prvInsertTimerInActiveList>
 80049ca:	4603      	mov	r3, r0
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d020      	beq.n	8004a12 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80049d0:	2300      	movs	r3, #0
 80049d2:	9300      	str	r3, [sp, #0]
 80049d4:	2300      	movs	r3, #0
 80049d6:	687a      	ldr	r2, [r7, #4]
 80049d8:	2100      	movs	r1, #0
 80049da:	6978      	ldr	r0, [r7, #20]
 80049dc:	f7ff ff88 	bl	80048f0 <xTimerGenericCommand>
 80049e0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80049e2:	693b      	ldr	r3, [r7, #16]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d114      	bne.n	8004a12 <prvProcessExpiredTimer+0x86>
	__asm volatile
 80049e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049ec:	f383 8811 	msr	BASEPRI, r3
 80049f0:	f3bf 8f6f 	isb	sy
 80049f4:	f3bf 8f4f 	dsb	sy
 80049f8:	60fb      	str	r3, [r7, #12]
}
 80049fa:	bf00      	nop
 80049fc:	bf00      	nop
 80049fe:	e7fd      	b.n	80049fc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004a00:	697b      	ldr	r3, [r7, #20]
 8004a02:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004a06:	f023 0301 	bic.w	r3, r3, #1
 8004a0a:	b2da      	uxtb	r2, r3
 8004a0c:	697b      	ldr	r3, [r7, #20]
 8004a0e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004a12:	697b      	ldr	r3, [r7, #20]
 8004a14:	6a1b      	ldr	r3, [r3, #32]
 8004a16:	6978      	ldr	r0, [r7, #20]
 8004a18:	4798      	blx	r3
}
 8004a1a:	bf00      	nop
 8004a1c:	3718      	adds	r7, #24
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	bd80      	pop	{r7, pc}
 8004a22:	bf00      	nop
 8004a24:	20000d94 	.word	0x20000d94

08004a28 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b084      	sub	sp, #16
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004a30:	f107 0308 	add.w	r3, r7, #8
 8004a34:	4618      	mov	r0, r3
 8004a36:	f000 f859 	bl	8004aec <prvGetNextExpireTime>
 8004a3a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004a3c:	68bb      	ldr	r3, [r7, #8]
 8004a3e:	4619      	mov	r1, r3
 8004a40:	68f8      	ldr	r0, [r7, #12]
 8004a42:	f000 f805 	bl	8004a50 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004a46:	f000 f8d7 	bl	8004bf8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004a4a:	bf00      	nop
 8004a4c:	e7f0      	b.n	8004a30 <prvTimerTask+0x8>
	...

08004a50 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b084      	sub	sp, #16
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
 8004a58:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004a5a:	f7ff f929 	bl	8003cb0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004a5e:	f107 0308 	add.w	r3, r7, #8
 8004a62:	4618      	mov	r0, r3
 8004a64:	f000 f866 	bl	8004b34 <prvSampleTimeNow>
 8004a68:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004a6a:	68bb      	ldr	r3, [r7, #8]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d130      	bne.n	8004ad2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d10a      	bne.n	8004a8c <prvProcessTimerOrBlockTask+0x3c>
 8004a76:	687a      	ldr	r2, [r7, #4]
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	429a      	cmp	r2, r3
 8004a7c:	d806      	bhi.n	8004a8c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004a7e:	f7ff f925 	bl	8003ccc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004a82:	68f9      	ldr	r1, [r7, #12]
 8004a84:	6878      	ldr	r0, [r7, #4]
 8004a86:	f7ff ff81 	bl	800498c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004a8a:	e024      	b.n	8004ad6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d008      	beq.n	8004aa4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004a92:	4b13      	ldr	r3, [pc, #76]	@ (8004ae0 <prvProcessTimerOrBlockTask+0x90>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d101      	bne.n	8004aa0 <prvProcessTimerOrBlockTask+0x50>
 8004a9c:	2301      	movs	r3, #1
 8004a9e:	e000      	b.n	8004aa2 <prvProcessTimerOrBlockTask+0x52>
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004aa4:	4b0f      	ldr	r3, [pc, #60]	@ (8004ae4 <prvProcessTimerOrBlockTask+0x94>)
 8004aa6:	6818      	ldr	r0, [r3, #0]
 8004aa8:	687a      	ldr	r2, [r7, #4]
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	1ad3      	subs	r3, r2, r3
 8004aae:	683a      	ldr	r2, [r7, #0]
 8004ab0:	4619      	mov	r1, r3
 8004ab2:	f7fe fe65 	bl	8003780 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004ab6:	f7ff f909 	bl	8003ccc <xTaskResumeAll>
 8004aba:	4603      	mov	r3, r0
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d10a      	bne.n	8004ad6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004ac0:	4b09      	ldr	r3, [pc, #36]	@ (8004ae8 <prvProcessTimerOrBlockTask+0x98>)
 8004ac2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004ac6:	601a      	str	r2, [r3, #0]
 8004ac8:	f3bf 8f4f 	dsb	sy
 8004acc:	f3bf 8f6f 	isb	sy
}
 8004ad0:	e001      	b.n	8004ad6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004ad2:	f7ff f8fb 	bl	8003ccc <xTaskResumeAll>
}
 8004ad6:	bf00      	nop
 8004ad8:	3710      	adds	r7, #16
 8004ada:	46bd      	mov	sp, r7
 8004adc:	bd80      	pop	{r7, pc}
 8004ade:	bf00      	nop
 8004ae0:	20000d98 	.word	0x20000d98
 8004ae4:	20000d9c 	.word	0x20000d9c
 8004ae8:	e000ed04 	.word	0xe000ed04

08004aec <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004aec:	b480      	push	{r7}
 8004aee:	b085      	sub	sp, #20
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004af4:	4b0e      	ldr	r3, [pc, #56]	@ (8004b30 <prvGetNextExpireTime+0x44>)
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d101      	bne.n	8004b02 <prvGetNextExpireTime+0x16>
 8004afe:	2201      	movs	r2, #1
 8004b00:	e000      	b.n	8004b04 <prvGetNextExpireTime+0x18>
 8004b02:	2200      	movs	r2, #0
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d105      	bne.n	8004b1c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004b10:	4b07      	ldr	r3, [pc, #28]	@ (8004b30 <prvGetNextExpireTime+0x44>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	68db      	ldr	r3, [r3, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	60fb      	str	r3, [r7, #12]
 8004b1a:	e001      	b.n	8004b20 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004b20:	68fb      	ldr	r3, [r7, #12]
}
 8004b22:	4618      	mov	r0, r3
 8004b24:	3714      	adds	r7, #20
 8004b26:	46bd      	mov	sp, r7
 8004b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2c:	4770      	bx	lr
 8004b2e:	bf00      	nop
 8004b30:	20000d94 	.word	0x20000d94

08004b34 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b084      	sub	sp, #16
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004b3c:	f7ff f964 	bl	8003e08 <xTaskGetTickCount>
 8004b40:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004b42:	4b0b      	ldr	r3, [pc, #44]	@ (8004b70 <prvSampleTimeNow+0x3c>)
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	68fa      	ldr	r2, [r7, #12]
 8004b48:	429a      	cmp	r2, r3
 8004b4a:	d205      	bcs.n	8004b58 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004b4c:	f000 f93a 	bl	8004dc4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2201      	movs	r2, #1
 8004b54:	601a      	str	r2, [r3, #0]
 8004b56:	e002      	b.n	8004b5e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004b5e:	4a04      	ldr	r2, [pc, #16]	@ (8004b70 <prvSampleTimeNow+0x3c>)
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004b64:	68fb      	ldr	r3, [r7, #12]
}
 8004b66:	4618      	mov	r0, r3
 8004b68:	3710      	adds	r7, #16
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	bd80      	pop	{r7, pc}
 8004b6e:	bf00      	nop
 8004b70:	20000da4 	.word	0x20000da4

08004b74 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b086      	sub	sp, #24
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	60f8      	str	r0, [r7, #12]
 8004b7c:	60b9      	str	r1, [r7, #8]
 8004b7e:	607a      	str	r2, [r7, #4]
 8004b80:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004b82:	2300      	movs	r3, #0
 8004b84:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	68ba      	ldr	r2, [r7, #8]
 8004b8a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	68fa      	ldr	r2, [r7, #12]
 8004b90:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004b92:	68ba      	ldr	r2, [r7, #8]
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	429a      	cmp	r2, r3
 8004b98:	d812      	bhi.n	8004bc0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004b9a:	687a      	ldr	r2, [r7, #4]
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	1ad2      	subs	r2, r2, r3
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	699b      	ldr	r3, [r3, #24]
 8004ba4:	429a      	cmp	r2, r3
 8004ba6:	d302      	bcc.n	8004bae <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004ba8:	2301      	movs	r3, #1
 8004baa:	617b      	str	r3, [r7, #20]
 8004bac:	e01b      	b.n	8004be6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004bae:	4b10      	ldr	r3, [pc, #64]	@ (8004bf0 <prvInsertTimerInActiveList+0x7c>)
 8004bb0:	681a      	ldr	r2, [r3, #0]
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	3304      	adds	r3, #4
 8004bb6:	4619      	mov	r1, r3
 8004bb8:	4610      	mov	r0, r2
 8004bba:	f7fd fd86 	bl	80026ca <vListInsert>
 8004bbe:	e012      	b.n	8004be6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004bc0:	687a      	ldr	r2, [r7, #4]
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	429a      	cmp	r2, r3
 8004bc6:	d206      	bcs.n	8004bd6 <prvInsertTimerInActiveList+0x62>
 8004bc8:	68ba      	ldr	r2, [r7, #8]
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	429a      	cmp	r2, r3
 8004bce:	d302      	bcc.n	8004bd6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004bd0:	2301      	movs	r3, #1
 8004bd2:	617b      	str	r3, [r7, #20]
 8004bd4:	e007      	b.n	8004be6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004bd6:	4b07      	ldr	r3, [pc, #28]	@ (8004bf4 <prvInsertTimerInActiveList+0x80>)
 8004bd8:	681a      	ldr	r2, [r3, #0]
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	3304      	adds	r3, #4
 8004bde:	4619      	mov	r1, r3
 8004be0:	4610      	mov	r0, r2
 8004be2:	f7fd fd72 	bl	80026ca <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004be6:	697b      	ldr	r3, [r7, #20]
}
 8004be8:	4618      	mov	r0, r3
 8004bea:	3718      	adds	r7, #24
 8004bec:	46bd      	mov	sp, r7
 8004bee:	bd80      	pop	{r7, pc}
 8004bf0:	20000d98 	.word	0x20000d98
 8004bf4:	20000d94 	.word	0x20000d94

08004bf8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b08e      	sub	sp, #56	@ 0x38
 8004bfc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004bfe:	e0ce      	b.n	8004d9e <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	da19      	bge.n	8004c3a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004c06:	1d3b      	adds	r3, r7, #4
 8004c08:	3304      	adds	r3, #4
 8004c0a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004c0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d10b      	bne.n	8004c2a <prvProcessReceivedCommands+0x32>
	__asm volatile
 8004c12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c16:	f383 8811 	msr	BASEPRI, r3
 8004c1a:	f3bf 8f6f 	isb	sy
 8004c1e:	f3bf 8f4f 	dsb	sy
 8004c22:	61fb      	str	r3, [r7, #28]
}
 8004c24:	bf00      	nop
 8004c26:	bf00      	nop
 8004c28:	e7fd      	b.n	8004c26 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004c2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004c30:	6850      	ldr	r0, [r2, #4]
 8004c32:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004c34:	6892      	ldr	r2, [r2, #8]
 8004c36:	4611      	mov	r1, r2
 8004c38:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	f2c0 80ae 	blt.w	8004d9e <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004c46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c48:	695b      	ldr	r3, [r3, #20]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d004      	beq.n	8004c58 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004c4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c50:	3304      	adds	r3, #4
 8004c52:	4618      	mov	r0, r3
 8004c54:	f7fd fd72 	bl	800273c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004c58:	463b      	mov	r3, r7
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	f7ff ff6a 	bl	8004b34 <prvSampleTimeNow>
 8004c60:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2b09      	cmp	r3, #9
 8004c66:	f200 8097 	bhi.w	8004d98 <prvProcessReceivedCommands+0x1a0>
 8004c6a:	a201      	add	r2, pc, #4	@ (adr r2, 8004c70 <prvProcessReceivedCommands+0x78>)
 8004c6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c70:	08004c99 	.word	0x08004c99
 8004c74:	08004c99 	.word	0x08004c99
 8004c78:	08004c99 	.word	0x08004c99
 8004c7c:	08004d0f 	.word	0x08004d0f
 8004c80:	08004d23 	.word	0x08004d23
 8004c84:	08004d6f 	.word	0x08004d6f
 8004c88:	08004c99 	.word	0x08004c99
 8004c8c:	08004c99 	.word	0x08004c99
 8004c90:	08004d0f 	.word	0x08004d0f
 8004c94:	08004d23 	.word	0x08004d23
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004c98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c9a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004c9e:	f043 0301 	orr.w	r3, r3, #1
 8004ca2:	b2da      	uxtb	r2, r3
 8004ca4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ca6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004caa:	68ba      	ldr	r2, [r7, #8]
 8004cac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cae:	699b      	ldr	r3, [r3, #24]
 8004cb0:	18d1      	adds	r1, r2, r3
 8004cb2:	68bb      	ldr	r3, [r7, #8]
 8004cb4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004cb6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004cb8:	f7ff ff5c 	bl	8004b74 <prvInsertTimerInActiveList>
 8004cbc:	4603      	mov	r3, r0
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d06c      	beq.n	8004d9c <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004cc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cc4:	6a1b      	ldr	r3, [r3, #32]
 8004cc6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004cc8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004cca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ccc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004cd0:	f003 0304 	and.w	r3, r3, #4
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d061      	beq.n	8004d9c <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004cd8:	68ba      	ldr	r2, [r7, #8]
 8004cda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cdc:	699b      	ldr	r3, [r3, #24]
 8004cde:	441a      	add	r2, r3
 8004ce0:	2300      	movs	r3, #0
 8004ce2:	9300      	str	r3, [sp, #0]
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	2100      	movs	r1, #0
 8004ce8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004cea:	f7ff fe01 	bl	80048f0 <xTimerGenericCommand>
 8004cee:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004cf0:	6a3b      	ldr	r3, [r7, #32]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d152      	bne.n	8004d9c <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8004cf6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cfa:	f383 8811 	msr	BASEPRI, r3
 8004cfe:	f3bf 8f6f 	isb	sy
 8004d02:	f3bf 8f4f 	dsb	sy
 8004d06:	61bb      	str	r3, [r7, #24]
}
 8004d08:	bf00      	nop
 8004d0a:	bf00      	nop
 8004d0c:	e7fd      	b.n	8004d0a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004d0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d10:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004d14:	f023 0301 	bic.w	r3, r3, #1
 8004d18:	b2da      	uxtb	r2, r3
 8004d1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d1c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8004d20:	e03d      	b.n	8004d9e <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004d22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d24:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004d28:	f043 0301 	orr.w	r3, r3, #1
 8004d2c:	b2da      	uxtb	r2, r3
 8004d2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d30:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004d34:	68ba      	ldr	r2, [r7, #8]
 8004d36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d38:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004d3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d3c:	699b      	ldr	r3, [r3, #24]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d10b      	bne.n	8004d5a <prvProcessReceivedCommands+0x162>
	__asm volatile
 8004d42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d46:	f383 8811 	msr	BASEPRI, r3
 8004d4a:	f3bf 8f6f 	isb	sy
 8004d4e:	f3bf 8f4f 	dsb	sy
 8004d52:	617b      	str	r3, [r7, #20]
}
 8004d54:	bf00      	nop
 8004d56:	bf00      	nop
 8004d58:	e7fd      	b.n	8004d56 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004d5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d5c:	699a      	ldr	r2, [r3, #24]
 8004d5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d60:	18d1      	adds	r1, r2, r3
 8004d62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d64:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d66:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004d68:	f7ff ff04 	bl	8004b74 <prvInsertTimerInActiveList>
					break;
 8004d6c:	e017      	b.n	8004d9e <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004d6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d70:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004d74:	f003 0302 	and.w	r3, r3, #2
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d103      	bne.n	8004d84 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8004d7c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004d7e:	f000 fbeb 	bl	8005558 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004d82:	e00c      	b.n	8004d9e <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004d84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d86:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004d8a:	f023 0301 	bic.w	r3, r3, #1
 8004d8e:	b2da      	uxtb	r2, r3
 8004d90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d92:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8004d96:	e002      	b.n	8004d9e <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8004d98:	bf00      	nop
 8004d9a:	e000      	b.n	8004d9e <prvProcessReceivedCommands+0x1a6>
					break;
 8004d9c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004d9e:	4b08      	ldr	r3, [pc, #32]	@ (8004dc0 <prvProcessReceivedCommands+0x1c8>)
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	1d39      	adds	r1, r7, #4
 8004da4:	2200      	movs	r2, #0
 8004da6:	4618      	mov	r0, r3
 8004da8:	f7fe f8d6 	bl	8002f58 <xQueueReceive>
 8004dac:	4603      	mov	r3, r0
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	f47f af26 	bne.w	8004c00 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8004db4:	bf00      	nop
 8004db6:	bf00      	nop
 8004db8:	3730      	adds	r7, #48	@ 0x30
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	bd80      	pop	{r7, pc}
 8004dbe:	bf00      	nop
 8004dc0:	20000d9c 	.word	0x20000d9c

08004dc4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b088      	sub	sp, #32
 8004dc8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004dca:	e049      	b.n	8004e60 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004dcc:	4b2e      	ldr	r3, [pc, #184]	@ (8004e88 <prvSwitchTimerLists+0xc4>)
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	68db      	ldr	r3, [r3, #12]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004dd6:	4b2c      	ldr	r3, [pc, #176]	@ (8004e88 <prvSwitchTimerLists+0xc4>)
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	68db      	ldr	r3, [r3, #12]
 8004ddc:	68db      	ldr	r3, [r3, #12]
 8004dde:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	3304      	adds	r3, #4
 8004de4:	4618      	mov	r0, r3
 8004de6:	f7fd fca9 	bl	800273c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	6a1b      	ldr	r3, [r3, #32]
 8004dee:	68f8      	ldr	r0, [r7, #12]
 8004df0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004df8:	f003 0304 	and.w	r3, r3, #4
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d02f      	beq.n	8004e60 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	699b      	ldr	r3, [r3, #24]
 8004e04:	693a      	ldr	r2, [r7, #16]
 8004e06:	4413      	add	r3, r2
 8004e08:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004e0a:	68ba      	ldr	r2, [r7, #8]
 8004e0c:	693b      	ldr	r3, [r7, #16]
 8004e0e:	429a      	cmp	r2, r3
 8004e10:	d90e      	bls.n	8004e30 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	68ba      	ldr	r2, [r7, #8]
 8004e16:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	68fa      	ldr	r2, [r7, #12]
 8004e1c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004e1e:	4b1a      	ldr	r3, [pc, #104]	@ (8004e88 <prvSwitchTimerLists+0xc4>)
 8004e20:	681a      	ldr	r2, [r3, #0]
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	3304      	adds	r3, #4
 8004e26:	4619      	mov	r1, r3
 8004e28:	4610      	mov	r0, r2
 8004e2a:	f7fd fc4e 	bl	80026ca <vListInsert>
 8004e2e:	e017      	b.n	8004e60 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004e30:	2300      	movs	r3, #0
 8004e32:	9300      	str	r3, [sp, #0]
 8004e34:	2300      	movs	r3, #0
 8004e36:	693a      	ldr	r2, [r7, #16]
 8004e38:	2100      	movs	r1, #0
 8004e3a:	68f8      	ldr	r0, [r7, #12]
 8004e3c:	f7ff fd58 	bl	80048f0 <xTimerGenericCommand>
 8004e40:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d10b      	bne.n	8004e60 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8004e48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e4c:	f383 8811 	msr	BASEPRI, r3
 8004e50:	f3bf 8f6f 	isb	sy
 8004e54:	f3bf 8f4f 	dsb	sy
 8004e58:	603b      	str	r3, [r7, #0]
}
 8004e5a:	bf00      	nop
 8004e5c:	bf00      	nop
 8004e5e:	e7fd      	b.n	8004e5c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004e60:	4b09      	ldr	r3, [pc, #36]	@ (8004e88 <prvSwitchTimerLists+0xc4>)
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d1b0      	bne.n	8004dcc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004e6a:	4b07      	ldr	r3, [pc, #28]	@ (8004e88 <prvSwitchTimerLists+0xc4>)
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004e70:	4b06      	ldr	r3, [pc, #24]	@ (8004e8c <prvSwitchTimerLists+0xc8>)
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	4a04      	ldr	r2, [pc, #16]	@ (8004e88 <prvSwitchTimerLists+0xc4>)
 8004e76:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004e78:	4a04      	ldr	r2, [pc, #16]	@ (8004e8c <prvSwitchTimerLists+0xc8>)
 8004e7a:	697b      	ldr	r3, [r7, #20]
 8004e7c:	6013      	str	r3, [r2, #0]
}
 8004e7e:	bf00      	nop
 8004e80:	3718      	adds	r7, #24
 8004e82:	46bd      	mov	sp, r7
 8004e84:	bd80      	pop	{r7, pc}
 8004e86:	bf00      	nop
 8004e88:	20000d94 	.word	0x20000d94
 8004e8c:	20000d98 	.word	0x20000d98

08004e90 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b082      	sub	sp, #8
 8004e94:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004e96:	f000 f96f 	bl	8005178 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004e9a:	4b15      	ldr	r3, [pc, #84]	@ (8004ef0 <prvCheckForValidListAndQueue+0x60>)
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d120      	bne.n	8004ee4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004ea2:	4814      	ldr	r0, [pc, #80]	@ (8004ef4 <prvCheckForValidListAndQueue+0x64>)
 8004ea4:	f7fd fbc0 	bl	8002628 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004ea8:	4813      	ldr	r0, [pc, #76]	@ (8004ef8 <prvCheckForValidListAndQueue+0x68>)
 8004eaa:	f7fd fbbd 	bl	8002628 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004eae:	4b13      	ldr	r3, [pc, #76]	@ (8004efc <prvCheckForValidListAndQueue+0x6c>)
 8004eb0:	4a10      	ldr	r2, [pc, #64]	@ (8004ef4 <prvCheckForValidListAndQueue+0x64>)
 8004eb2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004eb4:	4b12      	ldr	r3, [pc, #72]	@ (8004f00 <prvCheckForValidListAndQueue+0x70>)
 8004eb6:	4a10      	ldr	r2, [pc, #64]	@ (8004ef8 <prvCheckForValidListAndQueue+0x68>)
 8004eb8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004eba:	2300      	movs	r3, #0
 8004ebc:	9300      	str	r3, [sp, #0]
 8004ebe:	4b11      	ldr	r3, [pc, #68]	@ (8004f04 <prvCheckForValidListAndQueue+0x74>)
 8004ec0:	4a11      	ldr	r2, [pc, #68]	@ (8004f08 <prvCheckForValidListAndQueue+0x78>)
 8004ec2:	2110      	movs	r1, #16
 8004ec4:	200a      	movs	r0, #10
 8004ec6:	f7fd fccd 	bl	8002864 <xQueueGenericCreateStatic>
 8004eca:	4603      	mov	r3, r0
 8004ecc:	4a08      	ldr	r2, [pc, #32]	@ (8004ef0 <prvCheckForValidListAndQueue+0x60>)
 8004ece:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004ed0:	4b07      	ldr	r3, [pc, #28]	@ (8004ef0 <prvCheckForValidListAndQueue+0x60>)
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d005      	beq.n	8004ee4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004ed8:	4b05      	ldr	r3, [pc, #20]	@ (8004ef0 <prvCheckForValidListAndQueue+0x60>)
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	490b      	ldr	r1, [pc, #44]	@ (8004f0c <prvCheckForValidListAndQueue+0x7c>)
 8004ede:	4618      	mov	r0, r3
 8004ee0:	f7fe fbfa 	bl	80036d8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004ee4:	f000 f97a 	bl	80051dc <vPortExitCritical>
}
 8004ee8:	bf00      	nop
 8004eea:	46bd      	mov	sp, r7
 8004eec:	bd80      	pop	{r7, pc}
 8004eee:	bf00      	nop
 8004ef0:	20000d9c 	.word	0x20000d9c
 8004ef4:	20000d6c 	.word	0x20000d6c
 8004ef8:	20000d80 	.word	0x20000d80
 8004efc:	20000d94 	.word	0x20000d94
 8004f00:	20000d98 	.word	0x20000d98
 8004f04:	20000e48 	.word	0x20000e48
 8004f08:	20000da8 	.word	0x20000da8
 8004f0c:	080059bc 	.word	0x080059bc

08004f10 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004f10:	b480      	push	{r7}
 8004f12:	b085      	sub	sp, #20
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	60f8      	str	r0, [r7, #12]
 8004f18:	60b9      	str	r1, [r7, #8]
 8004f1a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	3b04      	subs	r3, #4
 8004f20:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004f28:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	3b04      	subs	r3, #4
 8004f2e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004f30:	68bb      	ldr	r3, [r7, #8]
 8004f32:	f023 0201 	bic.w	r2, r3, #1
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	3b04      	subs	r3, #4
 8004f3e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004f40:	4a0c      	ldr	r2, [pc, #48]	@ (8004f74 <pxPortInitialiseStack+0x64>)
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	3b14      	subs	r3, #20
 8004f4a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004f4c:	687a      	ldr	r2, [r7, #4]
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	3b04      	subs	r3, #4
 8004f56:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	f06f 0202 	mvn.w	r2, #2
 8004f5e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	3b20      	subs	r3, #32
 8004f64:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004f66:	68fb      	ldr	r3, [r7, #12]
}
 8004f68:	4618      	mov	r0, r3
 8004f6a:	3714      	adds	r7, #20
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f72:	4770      	bx	lr
 8004f74:	08004f79 	.word	0x08004f79

08004f78 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004f78:	b480      	push	{r7}
 8004f7a:	b085      	sub	sp, #20
 8004f7c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004f7e:	2300      	movs	r3, #0
 8004f80:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004f82:	4b13      	ldr	r3, [pc, #76]	@ (8004fd0 <prvTaskExitError+0x58>)
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f8a:	d00b      	beq.n	8004fa4 <prvTaskExitError+0x2c>
	__asm volatile
 8004f8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f90:	f383 8811 	msr	BASEPRI, r3
 8004f94:	f3bf 8f6f 	isb	sy
 8004f98:	f3bf 8f4f 	dsb	sy
 8004f9c:	60fb      	str	r3, [r7, #12]
}
 8004f9e:	bf00      	nop
 8004fa0:	bf00      	nop
 8004fa2:	e7fd      	b.n	8004fa0 <prvTaskExitError+0x28>
	__asm volatile
 8004fa4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fa8:	f383 8811 	msr	BASEPRI, r3
 8004fac:	f3bf 8f6f 	isb	sy
 8004fb0:	f3bf 8f4f 	dsb	sy
 8004fb4:	60bb      	str	r3, [r7, #8]
}
 8004fb6:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004fb8:	bf00      	nop
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d0fc      	beq.n	8004fba <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004fc0:	bf00      	nop
 8004fc2:	bf00      	nop
 8004fc4:	3714      	adds	r7, #20
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fcc:	4770      	bx	lr
 8004fce:	bf00      	nop
 8004fd0:	2000000c 	.word	0x2000000c
	...

08004fe0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004fe0:	4b07      	ldr	r3, [pc, #28]	@ (8005000 <pxCurrentTCBConst2>)
 8004fe2:	6819      	ldr	r1, [r3, #0]
 8004fe4:	6808      	ldr	r0, [r1, #0]
 8004fe6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fea:	f380 8809 	msr	PSP, r0
 8004fee:	f3bf 8f6f 	isb	sy
 8004ff2:	f04f 0000 	mov.w	r0, #0
 8004ff6:	f380 8811 	msr	BASEPRI, r0
 8004ffa:	4770      	bx	lr
 8004ffc:	f3af 8000 	nop.w

08005000 <pxCurrentTCBConst2>:
 8005000:	2000086c 	.word	0x2000086c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005004:	bf00      	nop
 8005006:	bf00      	nop

08005008 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005008:	4808      	ldr	r0, [pc, #32]	@ (800502c <prvPortStartFirstTask+0x24>)
 800500a:	6800      	ldr	r0, [r0, #0]
 800500c:	6800      	ldr	r0, [r0, #0]
 800500e:	f380 8808 	msr	MSP, r0
 8005012:	f04f 0000 	mov.w	r0, #0
 8005016:	f380 8814 	msr	CONTROL, r0
 800501a:	b662      	cpsie	i
 800501c:	b661      	cpsie	f
 800501e:	f3bf 8f4f 	dsb	sy
 8005022:	f3bf 8f6f 	isb	sy
 8005026:	df00      	svc	0
 8005028:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800502a:	bf00      	nop
 800502c:	e000ed08 	.word	0xe000ed08

08005030 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005030:	b580      	push	{r7, lr}
 8005032:	b086      	sub	sp, #24
 8005034:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005036:	4b47      	ldr	r3, [pc, #284]	@ (8005154 <xPortStartScheduler+0x124>)
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	4a47      	ldr	r2, [pc, #284]	@ (8005158 <xPortStartScheduler+0x128>)
 800503c:	4293      	cmp	r3, r2
 800503e:	d10b      	bne.n	8005058 <xPortStartScheduler+0x28>
	__asm volatile
 8005040:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005044:	f383 8811 	msr	BASEPRI, r3
 8005048:	f3bf 8f6f 	isb	sy
 800504c:	f3bf 8f4f 	dsb	sy
 8005050:	613b      	str	r3, [r7, #16]
}
 8005052:	bf00      	nop
 8005054:	bf00      	nop
 8005056:	e7fd      	b.n	8005054 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005058:	4b3e      	ldr	r3, [pc, #248]	@ (8005154 <xPortStartScheduler+0x124>)
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	4a3f      	ldr	r2, [pc, #252]	@ (800515c <xPortStartScheduler+0x12c>)
 800505e:	4293      	cmp	r3, r2
 8005060:	d10b      	bne.n	800507a <xPortStartScheduler+0x4a>
	__asm volatile
 8005062:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005066:	f383 8811 	msr	BASEPRI, r3
 800506a:	f3bf 8f6f 	isb	sy
 800506e:	f3bf 8f4f 	dsb	sy
 8005072:	60fb      	str	r3, [r7, #12]
}
 8005074:	bf00      	nop
 8005076:	bf00      	nop
 8005078:	e7fd      	b.n	8005076 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800507a:	4b39      	ldr	r3, [pc, #228]	@ (8005160 <xPortStartScheduler+0x130>)
 800507c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800507e:	697b      	ldr	r3, [r7, #20]
 8005080:	781b      	ldrb	r3, [r3, #0]
 8005082:	b2db      	uxtb	r3, r3
 8005084:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005086:	697b      	ldr	r3, [r7, #20]
 8005088:	22ff      	movs	r2, #255	@ 0xff
 800508a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800508c:	697b      	ldr	r3, [r7, #20]
 800508e:	781b      	ldrb	r3, [r3, #0]
 8005090:	b2db      	uxtb	r3, r3
 8005092:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005094:	78fb      	ldrb	r3, [r7, #3]
 8005096:	b2db      	uxtb	r3, r3
 8005098:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800509c:	b2da      	uxtb	r2, r3
 800509e:	4b31      	ldr	r3, [pc, #196]	@ (8005164 <xPortStartScheduler+0x134>)
 80050a0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80050a2:	4b31      	ldr	r3, [pc, #196]	@ (8005168 <xPortStartScheduler+0x138>)
 80050a4:	2207      	movs	r2, #7
 80050a6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80050a8:	e009      	b.n	80050be <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80050aa:	4b2f      	ldr	r3, [pc, #188]	@ (8005168 <xPortStartScheduler+0x138>)
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	3b01      	subs	r3, #1
 80050b0:	4a2d      	ldr	r2, [pc, #180]	@ (8005168 <xPortStartScheduler+0x138>)
 80050b2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80050b4:	78fb      	ldrb	r3, [r7, #3]
 80050b6:	b2db      	uxtb	r3, r3
 80050b8:	005b      	lsls	r3, r3, #1
 80050ba:	b2db      	uxtb	r3, r3
 80050bc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80050be:	78fb      	ldrb	r3, [r7, #3]
 80050c0:	b2db      	uxtb	r3, r3
 80050c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80050c6:	2b80      	cmp	r3, #128	@ 0x80
 80050c8:	d0ef      	beq.n	80050aa <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80050ca:	4b27      	ldr	r3, [pc, #156]	@ (8005168 <xPortStartScheduler+0x138>)
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f1c3 0307 	rsb	r3, r3, #7
 80050d2:	2b04      	cmp	r3, #4
 80050d4:	d00b      	beq.n	80050ee <xPortStartScheduler+0xbe>
	__asm volatile
 80050d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050da:	f383 8811 	msr	BASEPRI, r3
 80050de:	f3bf 8f6f 	isb	sy
 80050e2:	f3bf 8f4f 	dsb	sy
 80050e6:	60bb      	str	r3, [r7, #8]
}
 80050e8:	bf00      	nop
 80050ea:	bf00      	nop
 80050ec:	e7fd      	b.n	80050ea <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80050ee:	4b1e      	ldr	r3, [pc, #120]	@ (8005168 <xPortStartScheduler+0x138>)
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	021b      	lsls	r3, r3, #8
 80050f4:	4a1c      	ldr	r2, [pc, #112]	@ (8005168 <xPortStartScheduler+0x138>)
 80050f6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80050f8:	4b1b      	ldr	r3, [pc, #108]	@ (8005168 <xPortStartScheduler+0x138>)
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005100:	4a19      	ldr	r2, [pc, #100]	@ (8005168 <xPortStartScheduler+0x138>)
 8005102:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	b2da      	uxtb	r2, r3
 8005108:	697b      	ldr	r3, [r7, #20]
 800510a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800510c:	4b17      	ldr	r3, [pc, #92]	@ (800516c <xPortStartScheduler+0x13c>)
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	4a16      	ldr	r2, [pc, #88]	@ (800516c <xPortStartScheduler+0x13c>)
 8005112:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005116:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005118:	4b14      	ldr	r3, [pc, #80]	@ (800516c <xPortStartScheduler+0x13c>)
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	4a13      	ldr	r2, [pc, #76]	@ (800516c <xPortStartScheduler+0x13c>)
 800511e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8005122:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005124:	f000 f8da 	bl	80052dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005128:	4b11      	ldr	r3, [pc, #68]	@ (8005170 <xPortStartScheduler+0x140>)
 800512a:	2200      	movs	r2, #0
 800512c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800512e:	f000 f8f9 	bl	8005324 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005132:	4b10      	ldr	r3, [pc, #64]	@ (8005174 <xPortStartScheduler+0x144>)
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	4a0f      	ldr	r2, [pc, #60]	@ (8005174 <xPortStartScheduler+0x144>)
 8005138:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800513c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800513e:	f7ff ff63 	bl	8005008 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005142:	f7fe ff2b 	bl	8003f9c <vTaskSwitchContext>
	prvTaskExitError();
 8005146:	f7ff ff17 	bl	8004f78 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800514a:	2300      	movs	r3, #0
}
 800514c:	4618      	mov	r0, r3
 800514e:	3718      	adds	r7, #24
 8005150:	46bd      	mov	sp, r7
 8005152:	bd80      	pop	{r7, pc}
 8005154:	e000ed00 	.word	0xe000ed00
 8005158:	410fc271 	.word	0x410fc271
 800515c:	410fc270 	.word	0x410fc270
 8005160:	e000e400 	.word	0xe000e400
 8005164:	20000e98 	.word	0x20000e98
 8005168:	20000e9c 	.word	0x20000e9c
 800516c:	e000ed20 	.word	0xe000ed20
 8005170:	2000000c 	.word	0x2000000c
 8005174:	e000ef34 	.word	0xe000ef34

08005178 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005178:	b480      	push	{r7}
 800517a:	b083      	sub	sp, #12
 800517c:	af00      	add	r7, sp, #0
	__asm volatile
 800517e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005182:	f383 8811 	msr	BASEPRI, r3
 8005186:	f3bf 8f6f 	isb	sy
 800518a:	f3bf 8f4f 	dsb	sy
 800518e:	607b      	str	r3, [r7, #4]
}
 8005190:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005192:	4b10      	ldr	r3, [pc, #64]	@ (80051d4 <vPortEnterCritical+0x5c>)
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	3301      	adds	r3, #1
 8005198:	4a0e      	ldr	r2, [pc, #56]	@ (80051d4 <vPortEnterCritical+0x5c>)
 800519a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800519c:	4b0d      	ldr	r3, [pc, #52]	@ (80051d4 <vPortEnterCritical+0x5c>)
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	2b01      	cmp	r3, #1
 80051a2:	d110      	bne.n	80051c6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80051a4:	4b0c      	ldr	r3, [pc, #48]	@ (80051d8 <vPortEnterCritical+0x60>)
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	b2db      	uxtb	r3, r3
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d00b      	beq.n	80051c6 <vPortEnterCritical+0x4e>
	__asm volatile
 80051ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051b2:	f383 8811 	msr	BASEPRI, r3
 80051b6:	f3bf 8f6f 	isb	sy
 80051ba:	f3bf 8f4f 	dsb	sy
 80051be:	603b      	str	r3, [r7, #0]
}
 80051c0:	bf00      	nop
 80051c2:	bf00      	nop
 80051c4:	e7fd      	b.n	80051c2 <vPortEnterCritical+0x4a>
	}
}
 80051c6:	bf00      	nop
 80051c8:	370c      	adds	r7, #12
 80051ca:	46bd      	mov	sp, r7
 80051cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d0:	4770      	bx	lr
 80051d2:	bf00      	nop
 80051d4:	2000000c 	.word	0x2000000c
 80051d8:	e000ed04 	.word	0xe000ed04

080051dc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80051dc:	b480      	push	{r7}
 80051de:	b083      	sub	sp, #12
 80051e0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80051e2:	4b12      	ldr	r3, [pc, #72]	@ (800522c <vPortExitCritical+0x50>)
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d10b      	bne.n	8005202 <vPortExitCritical+0x26>
	__asm volatile
 80051ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051ee:	f383 8811 	msr	BASEPRI, r3
 80051f2:	f3bf 8f6f 	isb	sy
 80051f6:	f3bf 8f4f 	dsb	sy
 80051fa:	607b      	str	r3, [r7, #4]
}
 80051fc:	bf00      	nop
 80051fe:	bf00      	nop
 8005200:	e7fd      	b.n	80051fe <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005202:	4b0a      	ldr	r3, [pc, #40]	@ (800522c <vPortExitCritical+0x50>)
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	3b01      	subs	r3, #1
 8005208:	4a08      	ldr	r2, [pc, #32]	@ (800522c <vPortExitCritical+0x50>)
 800520a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800520c:	4b07      	ldr	r3, [pc, #28]	@ (800522c <vPortExitCritical+0x50>)
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	2b00      	cmp	r3, #0
 8005212:	d105      	bne.n	8005220 <vPortExitCritical+0x44>
 8005214:	2300      	movs	r3, #0
 8005216:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	f383 8811 	msr	BASEPRI, r3
}
 800521e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005220:	bf00      	nop
 8005222:	370c      	adds	r7, #12
 8005224:	46bd      	mov	sp, r7
 8005226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522a:	4770      	bx	lr
 800522c:	2000000c 	.word	0x2000000c

08005230 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005230:	f3ef 8009 	mrs	r0, PSP
 8005234:	f3bf 8f6f 	isb	sy
 8005238:	4b15      	ldr	r3, [pc, #84]	@ (8005290 <pxCurrentTCBConst>)
 800523a:	681a      	ldr	r2, [r3, #0]
 800523c:	f01e 0f10 	tst.w	lr, #16
 8005240:	bf08      	it	eq
 8005242:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005246:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800524a:	6010      	str	r0, [r2, #0]
 800524c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005250:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8005254:	f380 8811 	msr	BASEPRI, r0
 8005258:	f3bf 8f4f 	dsb	sy
 800525c:	f3bf 8f6f 	isb	sy
 8005260:	f7fe fe9c 	bl	8003f9c <vTaskSwitchContext>
 8005264:	f04f 0000 	mov.w	r0, #0
 8005268:	f380 8811 	msr	BASEPRI, r0
 800526c:	bc09      	pop	{r0, r3}
 800526e:	6819      	ldr	r1, [r3, #0]
 8005270:	6808      	ldr	r0, [r1, #0]
 8005272:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005276:	f01e 0f10 	tst.w	lr, #16
 800527a:	bf08      	it	eq
 800527c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005280:	f380 8809 	msr	PSP, r0
 8005284:	f3bf 8f6f 	isb	sy
 8005288:	4770      	bx	lr
 800528a:	bf00      	nop
 800528c:	f3af 8000 	nop.w

08005290 <pxCurrentTCBConst>:
 8005290:	2000086c 	.word	0x2000086c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005294:	bf00      	nop
 8005296:	bf00      	nop

08005298 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005298:	b580      	push	{r7, lr}
 800529a:	b082      	sub	sp, #8
 800529c:	af00      	add	r7, sp, #0
	__asm volatile
 800529e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052a2:	f383 8811 	msr	BASEPRI, r3
 80052a6:	f3bf 8f6f 	isb	sy
 80052aa:	f3bf 8f4f 	dsb	sy
 80052ae:	607b      	str	r3, [r7, #4]
}
 80052b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80052b2:	f7fe fdb9 	bl	8003e28 <xTaskIncrementTick>
 80052b6:	4603      	mov	r3, r0
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d003      	beq.n	80052c4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80052bc:	4b06      	ldr	r3, [pc, #24]	@ (80052d8 <xPortSysTickHandler+0x40>)
 80052be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80052c2:	601a      	str	r2, [r3, #0]
 80052c4:	2300      	movs	r3, #0
 80052c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	f383 8811 	msr	BASEPRI, r3
}
 80052ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80052d0:	bf00      	nop
 80052d2:	3708      	adds	r7, #8
 80052d4:	46bd      	mov	sp, r7
 80052d6:	bd80      	pop	{r7, pc}
 80052d8:	e000ed04 	.word	0xe000ed04

080052dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80052dc:	b480      	push	{r7}
 80052de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80052e0:	4b0b      	ldr	r3, [pc, #44]	@ (8005310 <vPortSetupTimerInterrupt+0x34>)
 80052e2:	2200      	movs	r2, #0
 80052e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80052e6:	4b0b      	ldr	r3, [pc, #44]	@ (8005314 <vPortSetupTimerInterrupt+0x38>)
 80052e8:	2200      	movs	r2, #0
 80052ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80052ec:	4b0a      	ldr	r3, [pc, #40]	@ (8005318 <vPortSetupTimerInterrupt+0x3c>)
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	4a0a      	ldr	r2, [pc, #40]	@ (800531c <vPortSetupTimerInterrupt+0x40>)
 80052f2:	fba2 2303 	umull	r2, r3, r2, r3
 80052f6:	099b      	lsrs	r3, r3, #6
 80052f8:	4a09      	ldr	r2, [pc, #36]	@ (8005320 <vPortSetupTimerInterrupt+0x44>)
 80052fa:	3b01      	subs	r3, #1
 80052fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80052fe:	4b04      	ldr	r3, [pc, #16]	@ (8005310 <vPortSetupTimerInterrupt+0x34>)
 8005300:	2207      	movs	r2, #7
 8005302:	601a      	str	r2, [r3, #0]
}
 8005304:	bf00      	nop
 8005306:	46bd      	mov	sp, r7
 8005308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530c:	4770      	bx	lr
 800530e:	bf00      	nop
 8005310:	e000e010 	.word	0xe000e010
 8005314:	e000e018 	.word	0xe000e018
 8005318:	20000000 	.word	0x20000000
 800531c:	10624dd3 	.word	0x10624dd3
 8005320:	e000e014 	.word	0xe000e014

08005324 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005324:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8005334 <vPortEnableVFP+0x10>
 8005328:	6801      	ldr	r1, [r0, #0]
 800532a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800532e:	6001      	str	r1, [r0, #0]
 8005330:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005332:	bf00      	nop
 8005334:	e000ed88 	.word	0xe000ed88

08005338 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005338:	b480      	push	{r7}
 800533a:	b085      	sub	sp, #20
 800533c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800533e:	f3ef 8305 	mrs	r3, IPSR
 8005342:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	2b0f      	cmp	r3, #15
 8005348:	d915      	bls.n	8005376 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800534a:	4a18      	ldr	r2, [pc, #96]	@ (80053ac <vPortValidateInterruptPriority+0x74>)
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	4413      	add	r3, r2
 8005350:	781b      	ldrb	r3, [r3, #0]
 8005352:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005354:	4b16      	ldr	r3, [pc, #88]	@ (80053b0 <vPortValidateInterruptPriority+0x78>)
 8005356:	781b      	ldrb	r3, [r3, #0]
 8005358:	7afa      	ldrb	r2, [r7, #11]
 800535a:	429a      	cmp	r2, r3
 800535c:	d20b      	bcs.n	8005376 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800535e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005362:	f383 8811 	msr	BASEPRI, r3
 8005366:	f3bf 8f6f 	isb	sy
 800536a:	f3bf 8f4f 	dsb	sy
 800536e:	607b      	str	r3, [r7, #4]
}
 8005370:	bf00      	nop
 8005372:	bf00      	nop
 8005374:	e7fd      	b.n	8005372 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005376:	4b0f      	ldr	r3, [pc, #60]	@ (80053b4 <vPortValidateInterruptPriority+0x7c>)
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800537e:	4b0e      	ldr	r3, [pc, #56]	@ (80053b8 <vPortValidateInterruptPriority+0x80>)
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	429a      	cmp	r2, r3
 8005384:	d90b      	bls.n	800539e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8005386:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800538a:	f383 8811 	msr	BASEPRI, r3
 800538e:	f3bf 8f6f 	isb	sy
 8005392:	f3bf 8f4f 	dsb	sy
 8005396:	603b      	str	r3, [r7, #0]
}
 8005398:	bf00      	nop
 800539a:	bf00      	nop
 800539c:	e7fd      	b.n	800539a <vPortValidateInterruptPriority+0x62>
	}
 800539e:	bf00      	nop
 80053a0:	3714      	adds	r7, #20
 80053a2:	46bd      	mov	sp, r7
 80053a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a8:	4770      	bx	lr
 80053aa:	bf00      	nop
 80053ac:	e000e3f0 	.word	0xe000e3f0
 80053b0:	20000e98 	.word	0x20000e98
 80053b4:	e000ed0c 	.word	0xe000ed0c
 80053b8:	20000e9c 	.word	0x20000e9c

080053bc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80053bc:	b580      	push	{r7, lr}
 80053be:	b08a      	sub	sp, #40	@ 0x28
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80053c4:	2300      	movs	r3, #0
 80053c6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80053c8:	f7fe fc72 	bl	8003cb0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80053cc:	4b5c      	ldr	r3, [pc, #368]	@ (8005540 <pvPortMalloc+0x184>)
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d101      	bne.n	80053d8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80053d4:	f000 f924 	bl	8005620 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80053d8:	4b5a      	ldr	r3, [pc, #360]	@ (8005544 <pvPortMalloc+0x188>)
 80053da:	681a      	ldr	r2, [r3, #0]
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	4013      	ands	r3, r2
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	f040 8095 	bne.w	8005510 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d01e      	beq.n	800542a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80053ec:	2208      	movs	r2, #8
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	4413      	add	r3, r2
 80053f2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	f003 0307 	and.w	r3, r3, #7
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d015      	beq.n	800542a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	f023 0307 	bic.w	r3, r3, #7
 8005404:	3308      	adds	r3, #8
 8005406:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	f003 0307 	and.w	r3, r3, #7
 800540e:	2b00      	cmp	r3, #0
 8005410:	d00b      	beq.n	800542a <pvPortMalloc+0x6e>
	__asm volatile
 8005412:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005416:	f383 8811 	msr	BASEPRI, r3
 800541a:	f3bf 8f6f 	isb	sy
 800541e:	f3bf 8f4f 	dsb	sy
 8005422:	617b      	str	r3, [r7, #20]
}
 8005424:	bf00      	nop
 8005426:	bf00      	nop
 8005428:	e7fd      	b.n	8005426 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	2b00      	cmp	r3, #0
 800542e:	d06f      	beq.n	8005510 <pvPortMalloc+0x154>
 8005430:	4b45      	ldr	r3, [pc, #276]	@ (8005548 <pvPortMalloc+0x18c>)
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	687a      	ldr	r2, [r7, #4]
 8005436:	429a      	cmp	r2, r3
 8005438:	d86a      	bhi.n	8005510 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800543a:	4b44      	ldr	r3, [pc, #272]	@ (800554c <pvPortMalloc+0x190>)
 800543c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800543e:	4b43      	ldr	r3, [pc, #268]	@ (800554c <pvPortMalloc+0x190>)
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005444:	e004      	b.n	8005450 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8005446:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005448:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800544a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005450:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005452:	685b      	ldr	r3, [r3, #4]
 8005454:	687a      	ldr	r2, [r7, #4]
 8005456:	429a      	cmp	r2, r3
 8005458:	d903      	bls.n	8005462 <pvPortMalloc+0xa6>
 800545a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	2b00      	cmp	r3, #0
 8005460:	d1f1      	bne.n	8005446 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005462:	4b37      	ldr	r3, [pc, #220]	@ (8005540 <pvPortMalloc+0x184>)
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005468:	429a      	cmp	r2, r3
 800546a:	d051      	beq.n	8005510 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800546c:	6a3b      	ldr	r3, [r7, #32]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	2208      	movs	r2, #8
 8005472:	4413      	add	r3, r2
 8005474:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005476:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005478:	681a      	ldr	r2, [r3, #0]
 800547a:	6a3b      	ldr	r3, [r7, #32]
 800547c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800547e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005480:	685a      	ldr	r2, [r3, #4]
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	1ad2      	subs	r2, r2, r3
 8005486:	2308      	movs	r3, #8
 8005488:	005b      	lsls	r3, r3, #1
 800548a:	429a      	cmp	r2, r3
 800548c:	d920      	bls.n	80054d0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800548e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	4413      	add	r3, r2
 8005494:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005496:	69bb      	ldr	r3, [r7, #24]
 8005498:	f003 0307 	and.w	r3, r3, #7
 800549c:	2b00      	cmp	r3, #0
 800549e:	d00b      	beq.n	80054b8 <pvPortMalloc+0xfc>
	__asm volatile
 80054a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054a4:	f383 8811 	msr	BASEPRI, r3
 80054a8:	f3bf 8f6f 	isb	sy
 80054ac:	f3bf 8f4f 	dsb	sy
 80054b0:	613b      	str	r3, [r7, #16]
}
 80054b2:	bf00      	nop
 80054b4:	bf00      	nop
 80054b6:	e7fd      	b.n	80054b4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80054b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054ba:	685a      	ldr	r2, [r3, #4]
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	1ad2      	subs	r2, r2, r3
 80054c0:	69bb      	ldr	r3, [r7, #24]
 80054c2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80054c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054c6:	687a      	ldr	r2, [r7, #4]
 80054c8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80054ca:	69b8      	ldr	r0, [r7, #24]
 80054cc:	f000 f90a 	bl	80056e4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80054d0:	4b1d      	ldr	r3, [pc, #116]	@ (8005548 <pvPortMalloc+0x18c>)
 80054d2:	681a      	ldr	r2, [r3, #0]
 80054d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054d6:	685b      	ldr	r3, [r3, #4]
 80054d8:	1ad3      	subs	r3, r2, r3
 80054da:	4a1b      	ldr	r2, [pc, #108]	@ (8005548 <pvPortMalloc+0x18c>)
 80054dc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80054de:	4b1a      	ldr	r3, [pc, #104]	@ (8005548 <pvPortMalloc+0x18c>)
 80054e0:	681a      	ldr	r2, [r3, #0]
 80054e2:	4b1b      	ldr	r3, [pc, #108]	@ (8005550 <pvPortMalloc+0x194>)
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	429a      	cmp	r2, r3
 80054e8:	d203      	bcs.n	80054f2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80054ea:	4b17      	ldr	r3, [pc, #92]	@ (8005548 <pvPortMalloc+0x18c>)
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	4a18      	ldr	r2, [pc, #96]	@ (8005550 <pvPortMalloc+0x194>)
 80054f0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80054f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054f4:	685a      	ldr	r2, [r3, #4]
 80054f6:	4b13      	ldr	r3, [pc, #76]	@ (8005544 <pvPortMalloc+0x188>)
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	431a      	orrs	r2, r3
 80054fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054fe:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005500:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005502:	2200      	movs	r2, #0
 8005504:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005506:	4b13      	ldr	r3, [pc, #76]	@ (8005554 <pvPortMalloc+0x198>)
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	3301      	adds	r3, #1
 800550c:	4a11      	ldr	r2, [pc, #68]	@ (8005554 <pvPortMalloc+0x198>)
 800550e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005510:	f7fe fbdc 	bl	8003ccc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005514:	69fb      	ldr	r3, [r7, #28]
 8005516:	f003 0307 	and.w	r3, r3, #7
 800551a:	2b00      	cmp	r3, #0
 800551c:	d00b      	beq.n	8005536 <pvPortMalloc+0x17a>
	__asm volatile
 800551e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005522:	f383 8811 	msr	BASEPRI, r3
 8005526:	f3bf 8f6f 	isb	sy
 800552a:	f3bf 8f4f 	dsb	sy
 800552e:	60fb      	str	r3, [r7, #12]
}
 8005530:	bf00      	nop
 8005532:	bf00      	nop
 8005534:	e7fd      	b.n	8005532 <pvPortMalloc+0x176>
	return pvReturn;
 8005536:	69fb      	ldr	r3, [r7, #28]
}
 8005538:	4618      	mov	r0, r3
 800553a:	3728      	adds	r7, #40	@ 0x28
 800553c:	46bd      	mov	sp, r7
 800553e:	bd80      	pop	{r7, pc}
 8005540:	20004aa8 	.word	0x20004aa8
 8005544:	20004abc 	.word	0x20004abc
 8005548:	20004aac 	.word	0x20004aac
 800554c:	20004aa0 	.word	0x20004aa0
 8005550:	20004ab0 	.word	0x20004ab0
 8005554:	20004ab4 	.word	0x20004ab4

08005558 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005558:	b580      	push	{r7, lr}
 800555a:	b086      	sub	sp, #24
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2b00      	cmp	r3, #0
 8005568:	d04f      	beq.n	800560a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800556a:	2308      	movs	r3, #8
 800556c:	425b      	negs	r3, r3
 800556e:	697a      	ldr	r2, [r7, #20]
 8005570:	4413      	add	r3, r2
 8005572:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005574:	697b      	ldr	r3, [r7, #20]
 8005576:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005578:	693b      	ldr	r3, [r7, #16]
 800557a:	685a      	ldr	r2, [r3, #4]
 800557c:	4b25      	ldr	r3, [pc, #148]	@ (8005614 <vPortFree+0xbc>)
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	4013      	ands	r3, r2
 8005582:	2b00      	cmp	r3, #0
 8005584:	d10b      	bne.n	800559e <vPortFree+0x46>
	__asm volatile
 8005586:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800558a:	f383 8811 	msr	BASEPRI, r3
 800558e:	f3bf 8f6f 	isb	sy
 8005592:	f3bf 8f4f 	dsb	sy
 8005596:	60fb      	str	r3, [r7, #12]
}
 8005598:	bf00      	nop
 800559a:	bf00      	nop
 800559c:	e7fd      	b.n	800559a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800559e:	693b      	ldr	r3, [r7, #16]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d00b      	beq.n	80055be <vPortFree+0x66>
	__asm volatile
 80055a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055aa:	f383 8811 	msr	BASEPRI, r3
 80055ae:	f3bf 8f6f 	isb	sy
 80055b2:	f3bf 8f4f 	dsb	sy
 80055b6:	60bb      	str	r3, [r7, #8]
}
 80055b8:	bf00      	nop
 80055ba:	bf00      	nop
 80055bc:	e7fd      	b.n	80055ba <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80055be:	693b      	ldr	r3, [r7, #16]
 80055c0:	685a      	ldr	r2, [r3, #4]
 80055c2:	4b14      	ldr	r3, [pc, #80]	@ (8005614 <vPortFree+0xbc>)
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	4013      	ands	r3, r2
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d01e      	beq.n	800560a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80055cc:	693b      	ldr	r3, [r7, #16]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d11a      	bne.n	800560a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80055d4:	693b      	ldr	r3, [r7, #16]
 80055d6:	685a      	ldr	r2, [r3, #4]
 80055d8:	4b0e      	ldr	r3, [pc, #56]	@ (8005614 <vPortFree+0xbc>)
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	43db      	mvns	r3, r3
 80055de:	401a      	ands	r2, r3
 80055e0:	693b      	ldr	r3, [r7, #16]
 80055e2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80055e4:	f7fe fb64 	bl	8003cb0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80055e8:	693b      	ldr	r3, [r7, #16]
 80055ea:	685a      	ldr	r2, [r3, #4]
 80055ec:	4b0a      	ldr	r3, [pc, #40]	@ (8005618 <vPortFree+0xc0>)
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	4413      	add	r3, r2
 80055f2:	4a09      	ldr	r2, [pc, #36]	@ (8005618 <vPortFree+0xc0>)
 80055f4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80055f6:	6938      	ldr	r0, [r7, #16]
 80055f8:	f000 f874 	bl	80056e4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80055fc:	4b07      	ldr	r3, [pc, #28]	@ (800561c <vPortFree+0xc4>)
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	3301      	adds	r3, #1
 8005602:	4a06      	ldr	r2, [pc, #24]	@ (800561c <vPortFree+0xc4>)
 8005604:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005606:	f7fe fb61 	bl	8003ccc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800560a:	bf00      	nop
 800560c:	3718      	adds	r7, #24
 800560e:	46bd      	mov	sp, r7
 8005610:	bd80      	pop	{r7, pc}
 8005612:	bf00      	nop
 8005614:	20004abc 	.word	0x20004abc
 8005618:	20004aac 	.word	0x20004aac
 800561c:	20004ab8 	.word	0x20004ab8

08005620 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005620:	b480      	push	{r7}
 8005622:	b085      	sub	sp, #20
 8005624:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005626:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800562a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800562c:	4b27      	ldr	r3, [pc, #156]	@ (80056cc <prvHeapInit+0xac>)
 800562e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	f003 0307 	and.w	r3, r3, #7
 8005636:	2b00      	cmp	r3, #0
 8005638:	d00c      	beq.n	8005654 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	3307      	adds	r3, #7
 800563e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	f023 0307 	bic.w	r3, r3, #7
 8005646:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005648:	68ba      	ldr	r2, [r7, #8]
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	1ad3      	subs	r3, r2, r3
 800564e:	4a1f      	ldr	r2, [pc, #124]	@ (80056cc <prvHeapInit+0xac>)
 8005650:	4413      	add	r3, r2
 8005652:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005658:	4a1d      	ldr	r2, [pc, #116]	@ (80056d0 <prvHeapInit+0xb0>)
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800565e:	4b1c      	ldr	r3, [pc, #112]	@ (80056d0 <prvHeapInit+0xb0>)
 8005660:	2200      	movs	r2, #0
 8005662:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	68ba      	ldr	r2, [r7, #8]
 8005668:	4413      	add	r3, r2
 800566a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800566c:	2208      	movs	r2, #8
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	1a9b      	subs	r3, r3, r2
 8005672:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	f023 0307 	bic.w	r3, r3, #7
 800567a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	4a15      	ldr	r2, [pc, #84]	@ (80056d4 <prvHeapInit+0xb4>)
 8005680:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005682:	4b14      	ldr	r3, [pc, #80]	@ (80056d4 <prvHeapInit+0xb4>)
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	2200      	movs	r2, #0
 8005688:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800568a:	4b12      	ldr	r3, [pc, #72]	@ (80056d4 <prvHeapInit+0xb4>)
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	2200      	movs	r2, #0
 8005690:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	68fa      	ldr	r2, [r7, #12]
 800569a:	1ad2      	subs	r2, r2, r3
 800569c:	683b      	ldr	r3, [r7, #0]
 800569e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80056a0:	4b0c      	ldr	r3, [pc, #48]	@ (80056d4 <prvHeapInit+0xb4>)
 80056a2:	681a      	ldr	r2, [r3, #0]
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	685b      	ldr	r3, [r3, #4]
 80056ac:	4a0a      	ldr	r2, [pc, #40]	@ (80056d8 <prvHeapInit+0xb8>)
 80056ae:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	685b      	ldr	r3, [r3, #4]
 80056b4:	4a09      	ldr	r2, [pc, #36]	@ (80056dc <prvHeapInit+0xbc>)
 80056b6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80056b8:	4b09      	ldr	r3, [pc, #36]	@ (80056e0 <prvHeapInit+0xc0>)
 80056ba:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80056be:	601a      	str	r2, [r3, #0]
}
 80056c0:	bf00      	nop
 80056c2:	3714      	adds	r7, #20
 80056c4:	46bd      	mov	sp, r7
 80056c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ca:	4770      	bx	lr
 80056cc:	20000ea0 	.word	0x20000ea0
 80056d0:	20004aa0 	.word	0x20004aa0
 80056d4:	20004aa8 	.word	0x20004aa8
 80056d8:	20004ab0 	.word	0x20004ab0
 80056dc:	20004aac 	.word	0x20004aac
 80056e0:	20004abc 	.word	0x20004abc

080056e4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80056e4:	b480      	push	{r7}
 80056e6:	b085      	sub	sp, #20
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80056ec:	4b28      	ldr	r3, [pc, #160]	@ (8005790 <prvInsertBlockIntoFreeList+0xac>)
 80056ee:	60fb      	str	r3, [r7, #12]
 80056f0:	e002      	b.n	80056f8 <prvInsertBlockIntoFreeList+0x14>
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	60fb      	str	r3, [r7, #12]
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	687a      	ldr	r2, [r7, #4]
 80056fe:	429a      	cmp	r2, r3
 8005700:	d8f7      	bhi.n	80056f2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	685b      	ldr	r3, [r3, #4]
 800570a:	68ba      	ldr	r2, [r7, #8]
 800570c:	4413      	add	r3, r2
 800570e:	687a      	ldr	r2, [r7, #4]
 8005710:	429a      	cmp	r2, r3
 8005712:	d108      	bne.n	8005726 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	685a      	ldr	r2, [r3, #4]
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	685b      	ldr	r3, [r3, #4]
 800571c:	441a      	add	r2, r3
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	685b      	ldr	r3, [r3, #4]
 800572e:	68ba      	ldr	r2, [r7, #8]
 8005730:	441a      	add	r2, r3
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	429a      	cmp	r2, r3
 8005738:	d118      	bne.n	800576c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	681a      	ldr	r2, [r3, #0]
 800573e:	4b15      	ldr	r3, [pc, #84]	@ (8005794 <prvInsertBlockIntoFreeList+0xb0>)
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	429a      	cmp	r2, r3
 8005744:	d00d      	beq.n	8005762 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	685a      	ldr	r2, [r3, #4]
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	685b      	ldr	r3, [r3, #4]
 8005750:	441a      	add	r2, r3
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	681a      	ldr	r2, [r3, #0]
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	601a      	str	r2, [r3, #0]
 8005760:	e008      	b.n	8005774 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005762:	4b0c      	ldr	r3, [pc, #48]	@ (8005794 <prvInsertBlockIntoFreeList+0xb0>)
 8005764:	681a      	ldr	r2, [r3, #0]
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	601a      	str	r2, [r3, #0]
 800576a:	e003      	b.n	8005774 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681a      	ldr	r2, [r3, #0]
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005774:	68fa      	ldr	r2, [r7, #12]
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	429a      	cmp	r2, r3
 800577a:	d002      	beq.n	8005782 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	687a      	ldr	r2, [r7, #4]
 8005780:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005782:	bf00      	nop
 8005784:	3714      	adds	r7, #20
 8005786:	46bd      	mov	sp, r7
 8005788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578c:	4770      	bx	lr
 800578e:	bf00      	nop
 8005790:	20004aa0 	.word	0x20004aa0
 8005794:	20004aa8 	.word	0x20004aa8

08005798 <memset>:
 8005798:	4402      	add	r2, r0
 800579a:	4603      	mov	r3, r0
 800579c:	4293      	cmp	r3, r2
 800579e:	d100      	bne.n	80057a2 <memset+0xa>
 80057a0:	4770      	bx	lr
 80057a2:	f803 1b01 	strb.w	r1, [r3], #1
 80057a6:	e7f9      	b.n	800579c <memset+0x4>

080057a8 <_reclaim_reent>:
 80057a8:	4b29      	ldr	r3, [pc, #164]	@ (8005850 <_reclaim_reent+0xa8>)
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	4283      	cmp	r3, r0
 80057ae:	b570      	push	{r4, r5, r6, lr}
 80057b0:	4604      	mov	r4, r0
 80057b2:	d04b      	beq.n	800584c <_reclaim_reent+0xa4>
 80057b4:	69c3      	ldr	r3, [r0, #28]
 80057b6:	b1ab      	cbz	r3, 80057e4 <_reclaim_reent+0x3c>
 80057b8:	68db      	ldr	r3, [r3, #12]
 80057ba:	b16b      	cbz	r3, 80057d8 <_reclaim_reent+0x30>
 80057bc:	2500      	movs	r5, #0
 80057be:	69e3      	ldr	r3, [r4, #28]
 80057c0:	68db      	ldr	r3, [r3, #12]
 80057c2:	5959      	ldr	r1, [r3, r5]
 80057c4:	2900      	cmp	r1, #0
 80057c6:	d13b      	bne.n	8005840 <_reclaim_reent+0x98>
 80057c8:	3504      	adds	r5, #4
 80057ca:	2d80      	cmp	r5, #128	@ 0x80
 80057cc:	d1f7      	bne.n	80057be <_reclaim_reent+0x16>
 80057ce:	69e3      	ldr	r3, [r4, #28]
 80057d0:	4620      	mov	r0, r4
 80057d2:	68d9      	ldr	r1, [r3, #12]
 80057d4:	f000 f872 	bl	80058bc <_free_r>
 80057d8:	69e3      	ldr	r3, [r4, #28]
 80057da:	6819      	ldr	r1, [r3, #0]
 80057dc:	b111      	cbz	r1, 80057e4 <_reclaim_reent+0x3c>
 80057de:	4620      	mov	r0, r4
 80057e0:	f000 f86c 	bl	80058bc <_free_r>
 80057e4:	6961      	ldr	r1, [r4, #20]
 80057e6:	b111      	cbz	r1, 80057ee <_reclaim_reent+0x46>
 80057e8:	4620      	mov	r0, r4
 80057ea:	f000 f867 	bl	80058bc <_free_r>
 80057ee:	69e1      	ldr	r1, [r4, #28]
 80057f0:	b111      	cbz	r1, 80057f8 <_reclaim_reent+0x50>
 80057f2:	4620      	mov	r0, r4
 80057f4:	f000 f862 	bl	80058bc <_free_r>
 80057f8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80057fa:	b111      	cbz	r1, 8005802 <_reclaim_reent+0x5a>
 80057fc:	4620      	mov	r0, r4
 80057fe:	f000 f85d 	bl	80058bc <_free_r>
 8005802:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005804:	b111      	cbz	r1, 800580c <_reclaim_reent+0x64>
 8005806:	4620      	mov	r0, r4
 8005808:	f000 f858 	bl	80058bc <_free_r>
 800580c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800580e:	b111      	cbz	r1, 8005816 <_reclaim_reent+0x6e>
 8005810:	4620      	mov	r0, r4
 8005812:	f000 f853 	bl	80058bc <_free_r>
 8005816:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8005818:	b111      	cbz	r1, 8005820 <_reclaim_reent+0x78>
 800581a:	4620      	mov	r0, r4
 800581c:	f000 f84e 	bl	80058bc <_free_r>
 8005820:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8005822:	b111      	cbz	r1, 800582a <_reclaim_reent+0x82>
 8005824:	4620      	mov	r0, r4
 8005826:	f000 f849 	bl	80058bc <_free_r>
 800582a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800582c:	b111      	cbz	r1, 8005834 <_reclaim_reent+0x8c>
 800582e:	4620      	mov	r0, r4
 8005830:	f000 f844 	bl	80058bc <_free_r>
 8005834:	6a23      	ldr	r3, [r4, #32]
 8005836:	b14b      	cbz	r3, 800584c <_reclaim_reent+0xa4>
 8005838:	4620      	mov	r0, r4
 800583a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800583e:	4718      	bx	r3
 8005840:	680e      	ldr	r6, [r1, #0]
 8005842:	4620      	mov	r0, r4
 8005844:	f000 f83a 	bl	80058bc <_free_r>
 8005848:	4631      	mov	r1, r6
 800584a:	e7bb      	b.n	80057c4 <_reclaim_reent+0x1c>
 800584c:	bd70      	pop	{r4, r5, r6, pc}
 800584e:	bf00      	nop
 8005850:	20000010 	.word	0x20000010

08005854 <__libc_init_array>:
 8005854:	b570      	push	{r4, r5, r6, lr}
 8005856:	4d0d      	ldr	r5, [pc, #52]	@ (800588c <__libc_init_array+0x38>)
 8005858:	4c0d      	ldr	r4, [pc, #52]	@ (8005890 <__libc_init_array+0x3c>)
 800585a:	1b64      	subs	r4, r4, r5
 800585c:	10a4      	asrs	r4, r4, #2
 800585e:	2600      	movs	r6, #0
 8005860:	42a6      	cmp	r6, r4
 8005862:	d109      	bne.n	8005878 <__libc_init_array+0x24>
 8005864:	4d0b      	ldr	r5, [pc, #44]	@ (8005894 <__libc_init_array+0x40>)
 8005866:	4c0c      	ldr	r4, [pc, #48]	@ (8005898 <__libc_init_array+0x44>)
 8005868:	f000 f87e 	bl	8005968 <_init>
 800586c:	1b64      	subs	r4, r4, r5
 800586e:	10a4      	asrs	r4, r4, #2
 8005870:	2600      	movs	r6, #0
 8005872:	42a6      	cmp	r6, r4
 8005874:	d105      	bne.n	8005882 <__libc_init_array+0x2e>
 8005876:	bd70      	pop	{r4, r5, r6, pc}
 8005878:	f855 3b04 	ldr.w	r3, [r5], #4
 800587c:	4798      	blx	r3
 800587e:	3601      	adds	r6, #1
 8005880:	e7ee      	b.n	8005860 <__libc_init_array+0xc>
 8005882:	f855 3b04 	ldr.w	r3, [r5], #4
 8005886:	4798      	blx	r3
 8005888:	3601      	adds	r6, #1
 800588a:	e7f2      	b.n	8005872 <__libc_init_array+0x1e>
 800588c:	08005a60 	.word	0x08005a60
 8005890:	08005a60 	.word	0x08005a60
 8005894:	08005a60 	.word	0x08005a60
 8005898:	08005a64 	.word	0x08005a64

0800589c <__retarget_lock_acquire_recursive>:
 800589c:	4770      	bx	lr

0800589e <__retarget_lock_release_recursive>:
 800589e:	4770      	bx	lr

080058a0 <memcpy>:
 80058a0:	440a      	add	r2, r1
 80058a2:	4291      	cmp	r1, r2
 80058a4:	f100 33ff 	add.w	r3, r0, #4294967295
 80058a8:	d100      	bne.n	80058ac <memcpy+0xc>
 80058aa:	4770      	bx	lr
 80058ac:	b510      	push	{r4, lr}
 80058ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 80058b2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80058b6:	4291      	cmp	r1, r2
 80058b8:	d1f9      	bne.n	80058ae <memcpy+0xe>
 80058ba:	bd10      	pop	{r4, pc}

080058bc <_free_r>:
 80058bc:	b538      	push	{r3, r4, r5, lr}
 80058be:	4605      	mov	r5, r0
 80058c0:	2900      	cmp	r1, #0
 80058c2:	d041      	beq.n	8005948 <_free_r+0x8c>
 80058c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80058c8:	1f0c      	subs	r4, r1, #4
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	bfb8      	it	lt
 80058ce:	18e4      	addlt	r4, r4, r3
 80058d0:	f000 f83e 	bl	8005950 <__malloc_lock>
 80058d4:	4a1d      	ldr	r2, [pc, #116]	@ (800594c <_free_r+0x90>)
 80058d6:	6813      	ldr	r3, [r2, #0]
 80058d8:	b933      	cbnz	r3, 80058e8 <_free_r+0x2c>
 80058da:	6063      	str	r3, [r4, #4]
 80058dc:	6014      	str	r4, [r2, #0]
 80058de:	4628      	mov	r0, r5
 80058e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80058e4:	f000 b83a 	b.w	800595c <__malloc_unlock>
 80058e8:	42a3      	cmp	r3, r4
 80058ea:	d908      	bls.n	80058fe <_free_r+0x42>
 80058ec:	6820      	ldr	r0, [r4, #0]
 80058ee:	1821      	adds	r1, r4, r0
 80058f0:	428b      	cmp	r3, r1
 80058f2:	bf01      	itttt	eq
 80058f4:	6819      	ldreq	r1, [r3, #0]
 80058f6:	685b      	ldreq	r3, [r3, #4]
 80058f8:	1809      	addeq	r1, r1, r0
 80058fa:	6021      	streq	r1, [r4, #0]
 80058fc:	e7ed      	b.n	80058da <_free_r+0x1e>
 80058fe:	461a      	mov	r2, r3
 8005900:	685b      	ldr	r3, [r3, #4]
 8005902:	b10b      	cbz	r3, 8005908 <_free_r+0x4c>
 8005904:	42a3      	cmp	r3, r4
 8005906:	d9fa      	bls.n	80058fe <_free_r+0x42>
 8005908:	6811      	ldr	r1, [r2, #0]
 800590a:	1850      	adds	r0, r2, r1
 800590c:	42a0      	cmp	r0, r4
 800590e:	d10b      	bne.n	8005928 <_free_r+0x6c>
 8005910:	6820      	ldr	r0, [r4, #0]
 8005912:	4401      	add	r1, r0
 8005914:	1850      	adds	r0, r2, r1
 8005916:	4283      	cmp	r3, r0
 8005918:	6011      	str	r1, [r2, #0]
 800591a:	d1e0      	bne.n	80058de <_free_r+0x22>
 800591c:	6818      	ldr	r0, [r3, #0]
 800591e:	685b      	ldr	r3, [r3, #4]
 8005920:	6053      	str	r3, [r2, #4]
 8005922:	4408      	add	r0, r1
 8005924:	6010      	str	r0, [r2, #0]
 8005926:	e7da      	b.n	80058de <_free_r+0x22>
 8005928:	d902      	bls.n	8005930 <_free_r+0x74>
 800592a:	230c      	movs	r3, #12
 800592c:	602b      	str	r3, [r5, #0]
 800592e:	e7d6      	b.n	80058de <_free_r+0x22>
 8005930:	6820      	ldr	r0, [r4, #0]
 8005932:	1821      	adds	r1, r4, r0
 8005934:	428b      	cmp	r3, r1
 8005936:	bf04      	itt	eq
 8005938:	6819      	ldreq	r1, [r3, #0]
 800593a:	685b      	ldreq	r3, [r3, #4]
 800593c:	6063      	str	r3, [r4, #4]
 800593e:	bf04      	itt	eq
 8005940:	1809      	addeq	r1, r1, r0
 8005942:	6021      	streq	r1, [r4, #0]
 8005944:	6054      	str	r4, [r2, #4]
 8005946:	e7ca      	b.n	80058de <_free_r+0x22>
 8005948:	bd38      	pop	{r3, r4, r5, pc}
 800594a:	bf00      	nop
 800594c:	20004bfc 	.word	0x20004bfc

08005950 <__malloc_lock>:
 8005950:	4801      	ldr	r0, [pc, #4]	@ (8005958 <__malloc_lock+0x8>)
 8005952:	f7ff bfa3 	b.w	800589c <__retarget_lock_acquire_recursive>
 8005956:	bf00      	nop
 8005958:	20004bf8 	.word	0x20004bf8

0800595c <__malloc_unlock>:
 800595c:	4801      	ldr	r0, [pc, #4]	@ (8005964 <__malloc_unlock+0x8>)
 800595e:	f7ff bf9e 	b.w	800589e <__retarget_lock_release_recursive>
 8005962:	bf00      	nop
 8005964:	20004bf8 	.word	0x20004bf8

08005968 <_init>:
 8005968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800596a:	bf00      	nop
 800596c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800596e:	bc08      	pop	{r3}
 8005970:	469e      	mov	lr, r3
 8005972:	4770      	bx	lr

08005974 <_fini>:
 8005974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005976:	bf00      	nop
 8005978:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800597a:	bc08      	pop	{r3}
 800597c:	469e      	mov	lr, r3
 800597e:	4770      	bx	lr
